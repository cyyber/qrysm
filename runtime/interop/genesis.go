package interop

import (
	"math"
	"math/big"

	"github.com/theQRL/go-zond/common"
	"github.com/theQRL/go-zond/common/hexutil"
	"github.com/theQRL/go-zond/core"
	"github.com/theQRL/go-zond/params"
	clparams "github.com/theQRL/qrysm/v4/config/params"
	"github.com/theQRL/qrysm/v4/consensus-types/primitives"
	"github.com/theQRL/qrysm/v4/time/slots"
)

// defaultMinerAddress is used to send deposits and test transactions in the e2e test.
// This account is given a large initial balance in the genesis block in test setups.
const defaultTestAccountAddress = "0x205547bA6232eEc096770f7161d57dEA54FD13D0"
const defaultTestChainId int64 = 1337
const defaultCoinbase = "0x0000000000000000000000000000000000000000"
const defaultDifficulty = "0"
const defaultMixhash = "0x0000000000000000000000000000000000000000000000000000000000000000"
const defaultParenthash = "0x0000000000000000000000000000000000000000000000000000000000000000"
const defaultTestAccountBalance = "100000000000000000000000000000"

// DepositContractCode is the compiled deposit contract code, via https://github.com/protolambda/merge-genesis-tools
// This is embedded into genesis so that we can start the chain at a merge block.
const DepositContractCode = "0x60806040526004361061003e575f3560e01c806301ffc9a714610042578063228951181461007e578063621fd1301461009a578063c5f2892f146100c4575b5f80fd5b34801561004d575f80fd5b5061006860048036038101906100639190610b67565b6100ee565b6040516100759190610bac565b60405180910390f35b61009860048036038101906100939190610c59565b6101bf565b005b3480156100a5575f80fd5b506100ae6105fb565b6040516100bb9190610da7565b60405180910390f35b3480156100cf575f80fd5b506100d861060d565b6040516100e59190610dd6565b60405180910390f35b5f7f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806101b857507f85640907000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b610a208787905014610206576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101fd90610e6f565b60405180910390fd5b6020858590501461024c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024390610efd565b60405180910390fd5b6111f38383905014610293576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028a90610f8b565b60405180910390fd5b670de0b6b3a76400003410156102de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d590611019565b60405180910390fd5b5f633b9aca00346102ef919061106d565b1461032f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103269061110d565b60405180910390fd5b5f633b9aca00346103409190611158565b905067ffffffffffffffff801681111561038f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610386906111f8565b60405180910390fd5b5f610399826107dd565b90507f649bbc62d0e31342afea4e5cd82d4049e7e1ee912fc0889aa790803be39038c589898989858a8a6103ce6020546107dd565b6040516103e2989796959493929190611250565b60405180910390a15f60018a8a8a8a868b8b60405161040797969594939291906112ca565b602060405180830381855afa158015610422573d5f803e3d5ffd5b5050506040513d601f19601f820116820180604052508101906104459190611343565b9050838114610489576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048090611404565b60405180910390fd5b6001602060026104999190611551565b6104a3919061159b565b602054106104e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104dd9061163e565b60405180910390fd5b600160205f8282546104f8919061165c565b925050819055505f60205490505f5b60208110156105de5760018083160361053d57825f826020811061052e5761052d61168f565b5b018190555050505050506105f2565b60025f82602081106105525761055161168f565b5b0154846040516020016105669291906116dc565b6040516020818303038152906040526040516105829190611741565b602060405180830381855afa15801561059d573d5f803e3d5ffd5b5050506040513d601f19601f820116820180604052508101906105c09190611343565b92506002826105cf9190611158565b91508080600101915050610507565b505f6105ed576105ec611757565b5b505050505b50505050505050565b60606106086020546107dd565b905090565b5f805f60205490505f5b6020811015610757576001808316036106b45760025f826020811061063f5761063e61168f565b5b0154846040516020016106539291906116dc565b60405160208183030381529060405260405161066f9190611741565b602060405180830381855afa15801561068a573d5f803e3d5ffd5b5050506040513d601f19601f820116820180604052508101906106ad9190611343565b925061073b565b600283602183602081106106cb576106ca61168f565b5b01546040516020016106de9291906116dc565b6040516020818303038152906040526040516106fa9190611741565b602060405180830381855afa158015610715573d5f803e3d5ffd5b5050506040513d601f19601f820116820180604052508101906107389190611343565b92505b6002826107489190611158565b91508080600101915050610617565b506002826107666020546107dd565b5f60401b60405160200161077c939291906117cf565b6040516020818303038152906040526040516107989190611741565b602060405180830381855afa1580156107b3573d5f803e3d5ffd5b5050506040513d601f19601f820116820180604052508101906107d69190611343565b9250505090565b6060600867ffffffffffffffff8111156107fa576107f9611807565b5b6040519080825280601f01601f19166020018201604052801561082c5781602001600182028036833780820191505090505b5090505f8260c01b90508060076008811061084a5761084961168f565b5b1a60f81b825f815181106108615761086061168f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350806006600881106108a3576108a261168f565b5b1a60f81b826001815181106108bb576108ba61168f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350806005600881106108fd576108fc61168f565b5b1a60f81b826002815181106109155761091461168f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350806004600881106109575761095661168f565b5b1a60f81b8260038151811061096f5761096e61168f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350806003600881106109b1576109b061168f565b5b1a60f81b826004815181106109c9576109c861168f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a90535080600260088110610a0b57610a0a61168f565b5b1a60f81b82600581518110610a2357610a2261168f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a90535080600160088110610a6557610a6461168f565b5b1a60f81b82600681518110610a7d57610a7c61168f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a905350805f60088110610abe57610abd61168f565b5b1a60f81b82600781518110610ad657610ad561168f565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191690815f1a90535050919050565b5f80fd5b5f80fd5b5f7fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610b4681610b12565b8114610b50575f80fd5b50565b5f81359050610b6181610b3d565b92915050565b5f60208284031215610b7c57610b7b610b0a565b5b5f610b8984828501610b53565b91505092915050565b5f8115159050919050565b610ba681610b92565b82525050565b5f602082019050610bbf5f830184610b9d565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f840112610be657610be5610bc5565b5b8235905067ffffffffffffffff811115610c0357610c02610bc9565b5b602083019150836001820283011115610c1f57610c1e610bcd565b5b9250929050565b5f819050919050565b610c3881610c26565b8114610c42575f80fd5b50565b5f81359050610c5381610c2f565b92915050565b5f805f805f805f6080888a031215610c7457610c73610b0a565b5b5f88013567ffffffffffffffff811115610c9157610c90610b0e565b5b610c9d8a828b01610bd1565b9750975050602088013567ffffffffffffffff811115610cc057610cbf610b0e565b5b610ccc8a828b01610bd1565b9550955050604088013567ffffffffffffffff811115610cef57610cee610b0e565b5b610cfb8a828b01610bd1565b93509350506060610d0e8a828b01610c45565b91505092959891949750929550565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610d54578082015181840152602081019050610d39565b5f8484015250505050565b5f601f19601f8301169050919050565b5f610d7982610d1d565b610d838185610d27565b9350610d93818560208601610d37565b610d9c81610d5f565b840191505092915050565b5f6020820190508181035f830152610dbf8184610d6f565b905092915050565b610dd081610c26565b82525050565b5f602082019050610de95f830184610dc7565b92915050565b5f82825260208201905092915050565b7f4465706f736974436f6e74726163743a20696e76616c6964207075626b6579205f8201527f6c656e6774680000000000000000000000000000000000000000000000000000602082015250565b5f610e59602683610def565b9150610e6482610dff565b604082019050919050565b5f6020820190508181035f830152610e8681610e4d565b9050919050565b7f4465706f736974436f6e74726163743a20696e76616c696420776974686472615f8201527f77616c5f63726564656e7469616c73206c656e67746800000000000000000000602082015250565b5f610ee7603683610def565b9150610ef282610e8d565b604082019050919050565b5f6020820190508181035f830152610f1481610edb565b9050919050565b7f4465706f736974436f6e74726163743a20696e76616c6964207369676e6174755f8201527f7265206c656e6774680000000000000000000000000000000000000000000000602082015250565b5f610f75602983610def565b9150610f8082610f1b565b604082019050919050565b5f6020820190508181035f830152610fa281610f69565b9050919050565b7f4465706f736974436f6e74726163743a206465706f7369742076616c756520745f8201527f6f6f206c6f770000000000000000000000000000000000000000000000000000602082015250565b5f611003602683610def565b915061100e82610fa9565b604082019050919050565b5f6020820190508181035f83015261103081610ff7565b9050919050565b5f819050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f61107782611037565b915061108283611037565b92508261109257611091611040565b5b828206905092915050565b7f4465706f736974436f6e74726163743a206465706f7369742076616c7565206e5f8201527f6f74206d756c7469706c65206f66206777656900000000000000000000000000602082015250565b5f6110f7603383610def565b91506111028261109d565b604082019050919050565b5f6020820190508181035f830152611124816110eb565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61116282611037565b915061116d83611037565b92508261117d5761117c611040565b5b828204905092915050565b7f4465706f736974436f6e74726163743a206465706f7369742076616c756520745f8201527f6f6f206869676800000000000000000000000000000000000000000000000000602082015250565b5f6111e2602783610def565b91506111ed82611188565b604082019050919050565b5f6020820190508181035f83015261120f816111d6565b9050919050565b828183375f83830152505050565b5f61122f8385610d27565b935061123c838584611216565b61124583610d5f565b840190509392505050565b5f60a0820190508181035f830152611269818a8c611224565b9050818103602083015261127e81888a611224565b905081810360408301526112928187610d6f565b905081810360608301526112a7818587611224565b905081810360808301526112bb8184610d6f565b90509998505050505050505050565b5f6080820190508181035f8301526112e381898b611224565b905081810360208301526112f8818789611224565b9050818103604083015261130c8186610d6f565b90508181036060830152611321818486611224565b905098975050505050505050565b5f8151905061133d81610c2f565b92915050565b5f6020828403121561135857611357610b0a565b5b5f6113658482850161132f565b91505092915050565b7f4465706f736974436f6e74726163743a207265636f6e737472756374656420445f8201527f65706f7369744461746120646f6573206e6f74206d6174636820737570706c6960208201527f6564206465706f7369745f646174615f726f6f74000000000000000000000000604082015250565b5f6113ee605483610def565b91506113f98261136e565b606082019050919050565b5f6020820190508181035f83015261141b816113e2565b9050919050565b5f8160011c9050919050565b5f808291508390505b6001851115611477578086048111156114535761145261112b565b5b60018516156114625780820291505b808102905061147085611422565b9450611437565b94509492505050565b5f8261148f576001905061154a565b8161149c575f905061154a565b81600181146114b257600281146114bc576114eb565b600191505061154a565b60ff8411156114ce576114cd61112b565b5b8360020a9150848211156114e5576114e461112b565b5b5061154a565b5060208310610133831016604e8410600b84101617156115205782820a90508381111561151b5761151a61112b565b5b61154a565b61152d848484600161142e565b925090508184048111156115445761154361112b565b5b81810290505b9392505050565b5f61155b82611037565b915061156683611037565b92506115937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611480565b905092915050565b5f6115a582611037565b91506115b083611037565b92508282039050818111156115c8576115c761112b565b5b92915050565b7f4465706f736974436f6e74726163743a206d65726b6c6520747265652066756c5f8201527f6c00000000000000000000000000000000000000000000000000000000000000602082015250565b5f611628602183610def565b9150611633826115ce565b604082019050919050565b5f6020820190508181035f8301526116558161161c565b9050919050565b5f61166682611037565b915061167183611037565b92508282019050808211156116895761168861112b565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f819050919050565b6116d66116d182610c26565b6116bc565b82525050565b5f6116e782856116c5565b6020820191506116f782846116c5565b6020820191508190509392505050565b5f81905092915050565b5f61171b82610d1d565b6117258185611707565b9350611735818560208601610d37565b80840191505092915050565b5f61174c8284611711565b915081905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52600160045260245ffd5b5f7fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000082169050919050565b5f819050919050565b6117c96117c482611784565b6117af565b82525050565b5f6117da82866116c5565b6020820191506117ea8285611711565b91506117f682846117b8565b601882019150819050949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffdfea2646970667358221220d50b8bcc63f95cdb172aa13e9a5ec51dc2f1ab189547eb65ddc4d2f80b175dec64736f6c637828302e382e32332d646576656c6f702e323032332e31312e382b636f6d6d69742e37393163303532310059"

// DefaultDepositContractStorage represents the empty deposit trie used by the deposit contract.
// For details see https://github.com/protolambda/merge-genesis-tools
var DefaultDepositContractStorage = map[string]string{
	"0x0000000000000000000000000000000000000000000000000000000000000022": "0xf5a5fd42d16a20302798ef6ed309979b43003d2320d9f0e8ea9831a92759fb4b",
	"0x0000000000000000000000000000000000000000000000000000000000000023": "0xdb56114e00fdd4c1f85c892bf35ac9a89289aaecb1ebd0a96cde606a748b5d71",
	"0x0000000000000000000000000000000000000000000000000000000000000024": "0xc78009fdf07fc56a11f122370658a353aaa542ed63e44c4bc15ff4cd105ab33c",
	"0x0000000000000000000000000000000000000000000000000000000000000025": "0x536d98837f2dd165a55d5eeae91485954472d56f246df256bf3cae19352a123c",
	"0x0000000000000000000000000000000000000000000000000000000000000026": "0x9efde052aa15429fae05bad4d0b1d7c64da64d03d7a1854a588c2cb8430c0d30",
	"0x0000000000000000000000000000000000000000000000000000000000000027": "0xd88ddfeed400a8755596b21942c1497e114c302e6118290f91e6772976041fa1",
	"0x0000000000000000000000000000000000000000000000000000000000000028": "0x87eb0ddba57e35f6d286673802a4af5975e22506c7cf4c64bb6be5ee11527f2c",
	"0x0000000000000000000000000000000000000000000000000000000000000029": "0x26846476fd5fc54a5d43385167c95144f2643f533cc85bb9d16b782f8d7db193",
	"0x000000000000000000000000000000000000000000000000000000000000002a": "0x506d86582d252405b840018792cad2bf1259f1ef5aa5f887e13cb2f0094f51e1",
	"0x000000000000000000000000000000000000000000000000000000000000002b": "0xffff0ad7e659772f9534c195c815efc4014ef1e1daed4404c06385d11192e92b",
	"0x000000000000000000000000000000000000000000000000000000000000002c": "0x6cf04127db05441cd833107a52be852868890e4317e6a02ab47683aa75964220",
	"0x000000000000000000000000000000000000000000000000000000000000002d": "0xb7d05f875f140027ef5118a2247bbb84ce8f2f0f1123623085daf7960c329f5f",
	"0x000000000000000000000000000000000000000000000000000000000000002e": "0xdf6af5f5bbdb6be9ef8aa618e4bf8073960867171e29676f8b284dea6a08a85e",
	"0x000000000000000000000000000000000000000000000000000000000000002f": "0xb58d900f5e182e3c50ef74969ea16c7726c549757cc23523c369587da7293784",
	"0x0000000000000000000000000000000000000000000000000000000000000030": "0xd49a7502ffcfb0340b1d7885688500ca308161a7f96b62df9d083b71fcc8f2bb",
	"0x0000000000000000000000000000000000000000000000000000000000000031": "0x8fe6b1689256c0d385f42f5bbe2027a22c1996e110ba97c171d3e5948de92beb",
	"0x0000000000000000000000000000000000000000000000000000000000000032": "0x8d0d63c39ebade8509e0ae3c9c3876fb5fa112be18f905ecacfecb92057603ab",
	"0x0000000000000000000000000000000000000000000000000000000000000033": "0x95eec8b2e541cad4e91de38385f2e046619f54496c2382cb6cacd5b98c26f5a4",
	"0x0000000000000000000000000000000000000000000000000000000000000034": "0xf893e908917775b62bff23294dbbe3a1cd8e6cc1c35b4801887b646a6f81f17f",
	"0x0000000000000000000000000000000000000000000000000000000000000035": "0xcddba7b592e3133393c16194fac7431abf2f5485ed711db282183c819e08ebaa",
	"0x0000000000000000000000000000000000000000000000000000000000000036": "0x8a8d7fe3af8caa085a7639a832001457dfb9128a8061142ad0335629ff23ff9c",
	"0x0000000000000000000000000000000000000000000000000000000000000037": "0xfeb3c337d7a51a6fbf00b9e34c52e1c9195c969bd4e7a0bfd51d5c5bed9c1167",
	"0x0000000000000000000000000000000000000000000000000000000000000038": "0xe71f0aa83cc32edfbefa9f4d3e0174ca85182eec9f3a09f6a6c0df6377a510d7",
	"0x0000000000000000000000000000000000000000000000000000000000000039": "0x31206fa80a50bb6abe29085058f16212212a60eec8f049fecb92d8c8e0a84bc0",
	"0x000000000000000000000000000000000000000000000000000000000000003a": "0x21352bfecbeddde993839f614c3dac0a3ee37543f9b412b16199dc158e23b544",
	"0x000000000000000000000000000000000000000000000000000000000000003b": "0x619e312724bb6d7c3153ed9de791d764a366b389af13c58bf8a8d90481a46765",
	"0x000000000000000000000000000000000000000000000000000000000000003c": "0x7cdd2986268250628d0c10e385c58c6191e6fbe05191bcc04f133f2cea72c1c4",
	"0x000000000000000000000000000000000000000000000000000000000000003d": "0x848930bd7ba8cac54661072113fb278869e07bb8587f91392933374d017bcbe1",
	"0x000000000000000000000000000000000000000000000000000000000000003e": "0x8869ff2c22b28cc10510d9853292803328be4fb0e80495e8bb8d271f5b889636",
	"0x000000000000000000000000000000000000000000000000000000000000003f": "0xb5fe28e79f1b850f8658246ce9b6a1e7b49fc06db7143e8fe0b4f2b0c5523a5c",
	"0x0000000000000000000000000000000000000000000000000000000000000040": "0x985e929f70af28d0bdd1a90a808f977f597c7c778c489e98d3bd8910d31ac0f7",
}

var bigz = big.NewInt(0)
var testAccountBalance = big.NewInt(0)

// GzondShanghaiTime calculates the absolute time of the shanghai (aka capella) fork block
// by adding the relative time of the capella the fork epoch to the given genesis timestamp.
func GzondShanghaiTime(genesisTime uint64) *uint64 {
	startSlot := primitives.Slot(0)
	startTime := slots.StartTime(genesisTime, startSlot)
	newTime := uint64(startTime.Unix())
	shanghaiTime := &newTime
	return shanghaiTime
}

// GzondTestnetGenesis creates a genesis.json for eth1 clients with a set of defaults suitable for ephemeral testnets,
// like in an e2e test. The parameters are minimal but the full value is returned unmarshaled so that it can be
// customized as desired.
func GzondTestnetGenesis(genesisTime uint64, cfg *clparams.BeaconChainConfig) *core.Genesis {
	shanghaiTime := GzondShanghaiTime(genesisTime)
	cc := &params.ChainConfig{
		ChainID:                       big.NewInt(defaultTestChainId),
		ArrowGlacierBlock:             bigz,
		GrayGlacierBlock:              bigz,
		MergeNetsplitBlock:            bigz,
		TerminalTotalDifficulty:       bigz,
		TerminalTotalDifficultyPassed: true,
		ShanghaiTime:                  shanghaiTime,
	}
	da := defaultDepositContractAllocation(cfg.DepositContractAddress)
	ma := minerAllocation()
	return &core.Genesis{
		Config:    cc,
		Nonce:     0,
		Timestamp: genesisTime,
		// NOTE(rgeraldes24): required by the genesis generation on the beacon node side
		// during the e2e tests
		ExtraData:  make([]byte, 32),
		GasLimit:   math.MaxUint64 >> 1, // shift 1 back from the max, just in case
		Difficulty: common.HexToHash(defaultDifficulty).Big(),
		Mixhash:    common.HexToHash(defaultMixhash),
		Coinbase:   common.HexToAddress(defaultCoinbase),
		Alloc: core.GenesisAlloc{
			da.Address: da.Account,
			ma.Address: ma.Account,
		},
		ParentHash: common.HexToHash(defaultParenthash),
	}
}

type depositAllocation struct {
	Address common.Address
	Account core.GenesisAccount
}

func minerAllocation() depositAllocation {
	return depositAllocation{
		Address: common.HexToAddress(defaultTestAccountAddress),
		Account: core.GenesisAccount{
			Balance: testAccountBalance,
		},
	}
}

func defaultDepositContractAllocation(contractAddress string) depositAllocation {
	s := make(map[common.Hash]common.Hash)
	for k, v := range DefaultDepositContractStorage {
		s[common.HexToHash(k)] = common.HexToHash(v)
	}
	codeBytes, err := hexutil.Decode(DepositContractCode)
	if err != nil {
		panic(err)
	}
	return depositAllocation{
		Address: common.HexToAddress(contractAddress),
		Account: core.GenesisAccount{
			Code:    codeBytes,
			Storage: s,
			Balance: bigz,
			Nonce:   deterministicNonce(0),
		},
	}
}

func deterministicNonce(i uint64) uint64 {
	return math.MaxUint64/2 + i
}

func init() {
	err := testAccountBalance.UnmarshalText([]byte(defaultTestAccountBalance))
	if err != nil {
		panic(err)
	}
}
