// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: proto/qrl/v1/beacon_state.proto

package v1

import (
	reflect "reflect"
	sync "sync"

	github_com_theQRL_go_bitfield "github.com/theQRL/go-bitfield"
	github_com_theQRL_qrysm_consensus_types_primitives "github.com/theQRL/qrysm/consensus-types/primitives"
	v1 "github.com/theQRL/qrysm/proto/engine/v1"
	_ "github.com/theQRL/qrysm/proto/qrl/ext"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PendingAttestation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AggregationBits github_com_theQRL_go_bitfield.Bitlist                             `protobuf:"bytes,1,opt,name=aggregation_bits,json=aggregationBits,proto3" json:"aggregation_bits,omitempty" cast-type:"github.com/theQRL/go-bitfield.Bitlist" ssz-max:"128"`
	Data            *AttestationData                                                  `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	InclusionDelay  github_com_theQRL_qrysm_consensus_types_primitives.Slot           `protobuf:"varint,3,opt,name=inclusion_delay,json=inclusionDelay,proto3" json:"inclusion_delay,omitempty" cast-type:"github.com/theQRL/qrysm/consensus-types/primitives.Slot"`
	ProposerIndex   github_com_theQRL_qrysm_consensus_types_primitives.ValidatorIndex `protobuf:"varint,4,opt,name=proposer_index,json=proposerIndex,proto3" json:"proposer_index,omitempty" cast-type:"github.com/theQRL/qrysm/consensus-types/primitives.ValidatorIndex"`
}

func (x *PendingAttestation) Reset() {
	*x = PendingAttestation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_qrl_v1_beacon_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PendingAttestation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PendingAttestation) ProtoMessage() {}

func (x *PendingAttestation) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qrl_v1_beacon_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PendingAttestation.ProtoReflect.Descriptor instead.
func (*PendingAttestation) Descriptor() ([]byte, []int) {
	return file_proto_qrl_v1_beacon_state_proto_rawDescGZIP(), []int{0}
}

func (x *PendingAttestation) GetAggregationBits() github_com_theQRL_go_bitfield.Bitlist {
	if x != nil {
		return x.AggregationBits
	}
	return github_com_theQRL_go_bitfield.Bitlist(nil)
}

func (x *PendingAttestation) GetData() *AttestationData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *PendingAttestation) GetInclusionDelay() github_com_theQRL_qrysm_consensus_types_primitives.Slot {
	if x != nil {
		return x.InclusionDelay
	}
	return github_com_theQRL_qrysm_consensus_types_primitives.Slot(0)
}

func (x *PendingAttestation) GetProposerIndex() github_com_theQRL_qrysm_consensus_types_primitives.ValidatorIndex {
	if x != nil {
		return x.ProposerIndex
	}
	return github_com_theQRL_qrysm_consensus_types_primitives.ValidatorIndex(0)
}

type Committee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index      github_com_theQRL_qrysm_consensus_types_primitives.CommitteeIndex   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty" cast-type:"github.com/theQRL/qrysm/consensus-types/primitives.CommitteeIndex"`
	Slot       github_com_theQRL_qrysm_consensus_types_primitives.Slot             `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty" cast-type:"github.com/theQRL/qrysm/consensus-types/primitives.Slot"`
	Validators []github_com_theQRL_qrysm_consensus_types_primitives.ValidatorIndex `protobuf:"varint,3,rep,packed,name=validators,proto3" json:"validators,omitempty" cast-type:"github.com/theQRL/qrysm/consensus-types/primitives.ValidatorIndex"`
}

func (x *Committee) Reset() {
	*x = Committee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_qrl_v1_beacon_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Committee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Committee) ProtoMessage() {}

func (x *Committee) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qrl_v1_beacon_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Committee.ProtoReflect.Descriptor instead.
func (*Committee) Descriptor() ([]byte, []int) {
	return file_proto_qrl_v1_beacon_state_proto_rawDescGZIP(), []int{1}
}

func (x *Committee) GetIndex() github_com_theQRL_qrysm_consensus_types_primitives.CommitteeIndex {
	if x != nil {
		return x.Index
	}
	return github_com_theQRL_qrysm_consensus_types_primitives.CommitteeIndex(0)
}

func (x *Committee) GetSlot() github_com_theQRL_qrysm_consensus_types_primitives.Slot {
	if x != nil {
		return x.Slot
	}
	return github_com_theQRL_qrysm_consensus_types_primitives.Slot(0)
}

func (x *Committee) GetValidators() []github_com_theQRL_qrysm_consensus_types_primitives.ValidatorIndex {
	if x != nil {
		return x.Validators
	}
	return []github_com_theQRL_qrysm_consensus_types_primitives.ValidatorIndex(nil)
}

type Fork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreviousVersion []byte                                                   `protobuf:"bytes,1,opt,name=previous_version,json=previousVersion,proto3" json:"previous_version,omitempty" ssz-size:"4"`
	CurrentVersion  []byte                                                   `protobuf:"bytes,2,opt,name=current_version,json=currentVersion,proto3" json:"current_version,omitempty" ssz-size:"4"`
	Epoch           github_com_theQRL_qrysm_consensus_types_primitives.Epoch `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty" cast-type:"github.com/theQRL/qrysm/consensus-types/primitives.Epoch"`
}

func (x *Fork) Reset() {
	*x = Fork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_qrl_v1_beacon_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fork) ProtoMessage() {}

func (x *Fork) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qrl_v1_beacon_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fork.ProtoReflect.Descriptor instead.
func (*Fork) Descriptor() ([]byte, []int) {
	return file_proto_qrl_v1_beacon_state_proto_rawDescGZIP(), []int{2}
}

func (x *Fork) GetPreviousVersion() []byte {
	if x != nil {
		return x.PreviousVersion
	}
	return nil
}

func (x *Fork) GetCurrentVersion() []byte {
	if x != nil {
		return x.CurrentVersion
	}
	return nil
}

func (x *Fork) GetEpoch() github_com_theQRL_qrysm_consensus_types_primitives.Epoch {
	if x != nil {
		return x.Epoch
	}
	return github_com_theQRL_qrysm_consensus_types_primitives.Epoch(0)
}

type BeaconStateCapella struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GenesisTime                  uint64                                                            `protobuf:"varint,1001,opt,name=genesis_time,json=genesisTime,proto3" json:"genesis_time,omitempty"`
	GenesisValidatorsRoot        []byte                                                            `protobuf:"bytes,1002,opt,name=genesis_validators_root,json=genesisValidatorsRoot,proto3" json:"genesis_validators_root,omitempty" ssz-size:"32"`
	Slot                         github_com_theQRL_qrysm_consensus_types_primitives.Slot           `protobuf:"varint,1003,opt,name=slot,proto3" json:"slot,omitempty" cast-type:"github.com/theQRL/qrysm/consensus-types/primitives.Slot"`
	Fork                         *Fork                                                             `protobuf:"bytes,1004,opt,name=fork,proto3" json:"fork,omitempty"`
	LatestBlockHeader            *BeaconBlockHeader                                                `protobuf:"bytes,2001,opt,name=latest_block_header,json=latestBlockHeader,proto3" json:"latest_block_header,omitempty"`
	BlockRoots                   [][]byte                                                          `protobuf:"bytes,2002,rep,name=block_roots,json=blockRoots,proto3" json:"block_roots,omitempty" ssz-size:"1024,32"`
	StateRoots                   [][]byte                                                          `protobuf:"bytes,2003,rep,name=state_roots,json=stateRoots,proto3" json:"state_roots,omitempty" ssz-size:"1024,32"`
	HistoricalRoots              [][]byte                                                          `protobuf:"bytes,2004,rep,name=historical_roots,json=historicalRoots,proto3" json:"historical_roots,omitempty" ssz-max:"16777216" ssz-size:"?,32"`
	ExecutionData                *ExecutionData                                                    `protobuf:"bytes,3001,opt,name=eth1_data,json=eth1Data,proto3" json:"eth1_data,omitempty"`
	ExecutionDataVotes           []*ExecutionData                                                  `protobuf:"bytes,3002,rep,name=eth1_data_votes,json=eth1DataVotes,proto3" json:"eth1_data_votes,omitempty" ssz-max:"256"`
	ExecutionDepositIndex        uint64                                                            `protobuf:"varint,3003,opt,name=eth1_deposit_index,json=eth1DepositIndex,proto3" json:"eth1_deposit_index,omitempty"`
	Validators                   []*Validator                                                      `protobuf:"bytes,4001,rep,name=validators,proto3" json:"validators,omitempty" ssz-max:"1099511627776"`
	Balances                     []uint64                                                          `protobuf:"varint,4002,rep,packed,name=balances,proto3" json:"balances,omitempty" ssz-max:"1099511627776"`
	RandaoMixes                  [][]byte                                                          `protobuf:"bytes,5001,rep,name=randao_mixes,json=randaoMixes,proto3" json:"randao_mixes,omitempty" ssz-size:"65536,32"`
	Slashings                    []uint64                                                          `protobuf:"varint,6001,rep,packed,name=slashings,proto3" json:"slashings,omitempty" ssz-size:"1024"`
	PreviousEpochParticipation   []byte                                                            `protobuf:"bytes,7001,opt,name=previous_epoch_participation,json=previousEpochParticipation,proto3" json:"previous_epoch_participation,omitempty" ssz-max:"1099511627776"`
	CurrentEpochParticipation    []byte                                                            `protobuf:"bytes,7002,opt,name=current_epoch_participation,json=currentEpochParticipation,proto3" json:"current_epoch_participation,omitempty" ssz-max:"1099511627776"`
	JustificationBits            github_com_theQRL_go_bitfield.Bitvector4                          `protobuf:"bytes,8001,opt,name=justification_bits,json=justificationBits,proto3" json:"justification_bits,omitempty" cast-type:"github.com/theQRL/go-bitfield.Bitvector4" ssz-size:"1"`
	PreviousJustifiedCheckpoint  *Checkpoint                                                       `protobuf:"bytes,8002,opt,name=previous_justified_checkpoint,json=previousJustifiedCheckpoint,proto3" json:"previous_justified_checkpoint,omitempty"`
	CurrentJustifiedCheckpoint   *Checkpoint                                                       `protobuf:"bytes,8003,opt,name=current_justified_checkpoint,json=currentJustifiedCheckpoint,proto3" json:"current_justified_checkpoint,omitempty"`
	FinalizedCheckpoint          *Checkpoint                                                       `protobuf:"bytes,8004,opt,name=finalized_checkpoint,json=finalizedCheckpoint,proto3" json:"finalized_checkpoint,omitempty"`
	InactivityScores             []uint64                                                          `protobuf:"varint,9001,rep,packed,name=inactivity_scores,json=inactivityScores,proto3" json:"inactivity_scores,omitempty" ssz-max:"1099511627776"`
	CurrentSyncCommittee         *SyncCommittee                                                    `protobuf:"bytes,9002,opt,name=current_sync_committee,json=currentSyncCommittee,proto3" json:"current_sync_committee,omitempty"`
	NextSyncCommittee            *SyncCommittee                                                    `protobuf:"bytes,9003,opt,name=next_sync_committee,json=nextSyncCommittee,proto3" json:"next_sync_committee,omitempty"`
	LatestExecutionPayloadHeader *v1.ExecutionPayloadHeaderCapella                                 `protobuf:"bytes,10001,opt,name=latest_execution_payload_header,json=latestExecutionPayloadHeader,proto3" json:"latest_execution_payload_header,omitempty"`
	NextWithdrawalIndex          uint64                                                            `protobuf:"varint,11001,opt,name=next_withdrawal_index,json=nextWithdrawalIndex,proto3" json:"next_withdrawal_index,omitempty"`
	NextWithdrawalValidatorIndex github_com_theQRL_qrysm_consensus_types_primitives.ValidatorIndex `protobuf:"varint,11002,opt,name=next_withdrawal_validator_index,json=nextWithdrawalValidatorIndex,proto3" json:"next_withdrawal_validator_index,omitempty" cast-type:"github.com/theQRL/qrysm/consensus-types/primitives.ValidatorIndex"`
	HistoricalSummaries          []*HistoricalSummary                                              `protobuf:"bytes,11003,rep,name=historical_summaries,json=historicalSummaries,proto3" json:"historical_summaries,omitempty" ssz-max:"16777216"`
}

func (x *BeaconStateCapella) Reset() {
	*x = BeaconStateCapella{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_qrl_v1_beacon_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeaconStateCapella) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconStateCapella) ProtoMessage() {}

func (x *BeaconStateCapella) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qrl_v1_beacon_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconStateCapella.ProtoReflect.Descriptor instead.
func (*BeaconStateCapella) Descriptor() ([]byte, []int) {
	return file_proto_qrl_v1_beacon_state_proto_rawDescGZIP(), []int{3}
}

func (x *BeaconStateCapella) GetGenesisTime() uint64 {
	if x != nil {
		return x.GenesisTime
	}
	return 0
}

func (x *BeaconStateCapella) GetGenesisValidatorsRoot() []byte {
	if x != nil {
		return x.GenesisValidatorsRoot
	}
	return nil
}

func (x *BeaconStateCapella) GetSlot() github_com_theQRL_qrysm_consensus_types_primitives.Slot {
	if x != nil {
		return x.Slot
	}
	return github_com_theQRL_qrysm_consensus_types_primitives.Slot(0)
}

func (x *BeaconStateCapella) GetFork() *Fork {
	if x != nil {
		return x.Fork
	}
	return nil
}

func (x *BeaconStateCapella) GetLatestBlockHeader() *BeaconBlockHeader {
	if x != nil {
		return x.LatestBlockHeader
	}
	return nil
}

func (x *BeaconStateCapella) GetBlockRoots() [][]byte {
	if x != nil {
		return x.BlockRoots
	}
	return nil
}

func (x *BeaconStateCapella) GetStateRoots() [][]byte {
	if x != nil {
		return x.StateRoots
	}
	return nil
}

func (x *BeaconStateCapella) GetHistoricalRoots() [][]byte {
	if x != nil {
		return x.HistoricalRoots
	}
	return nil
}

func (x *BeaconStateCapella) GetExecutionData() *ExecutionData {
	if x != nil {
		return x.ExecutionData
	}
	return nil
}

func (x *BeaconStateCapella) GetExecutionDataVotes() []*ExecutionData {
	if x != nil {
		return x.ExecutionDataVotes
	}
	return nil
}

func (x *BeaconStateCapella) GetExecutionDepositIndex() uint64 {
	if x != nil {
		return x.ExecutionDepositIndex
	}
	return 0
}

func (x *BeaconStateCapella) GetValidators() []*Validator {
	if x != nil {
		return x.Validators
	}
	return nil
}

func (x *BeaconStateCapella) GetBalances() []uint64 {
	if x != nil {
		return x.Balances
	}
	return nil
}

func (x *BeaconStateCapella) GetRandaoMixes() [][]byte {
	if x != nil {
		return x.RandaoMixes
	}
	return nil
}

func (x *BeaconStateCapella) GetSlashings() []uint64 {
	if x != nil {
		return x.Slashings
	}
	return nil
}

func (x *BeaconStateCapella) GetPreviousEpochParticipation() []byte {
	if x != nil {
		return x.PreviousEpochParticipation
	}
	return nil
}

func (x *BeaconStateCapella) GetCurrentEpochParticipation() []byte {
	if x != nil {
		return x.CurrentEpochParticipation
	}
	return nil
}

func (x *BeaconStateCapella) GetJustificationBits() github_com_theQRL_go_bitfield.Bitvector4 {
	if x != nil {
		return x.JustificationBits
	}
	return github_com_theQRL_go_bitfield.Bitvector4(nil)
}

func (x *BeaconStateCapella) GetPreviousJustifiedCheckpoint() *Checkpoint {
	if x != nil {
		return x.PreviousJustifiedCheckpoint
	}
	return nil
}

func (x *BeaconStateCapella) GetCurrentJustifiedCheckpoint() *Checkpoint {
	if x != nil {
		return x.CurrentJustifiedCheckpoint
	}
	return nil
}

func (x *BeaconStateCapella) GetFinalizedCheckpoint() *Checkpoint {
	if x != nil {
		return x.FinalizedCheckpoint
	}
	return nil
}

func (x *BeaconStateCapella) GetInactivityScores() []uint64 {
	if x != nil {
		return x.InactivityScores
	}
	return nil
}

func (x *BeaconStateCapella) GetCurrentSyncCommittee() *SyncCommittee {
	if x != nil {
		return x.CurrentSyncCommittee
	}
	return nil
}

func (x *BeaconStateCapella) GetNextSyncCommittee() *SyncCommittee {
	if x != nil {
		return x.NextSyncCommittee
	}
	return nil
}

func (x *BeaconStateCapella) GetLatestExecutionPayloadHeader() *v1.ExecutionPayloadHeaderCapella {
	if x != nil {
		return x.LatestExecutionPayloadHeader
	}
	return nil
}

func (x *BeaconStateCapella) GetNextWithdrawalIndex() uint64 {
	if x != nil {
		return x.NextWithdrawalIndex
	}
	return 0
}

func (x *BeaconStateCapella) GetNextWithdrawalValidatorIndex() github_com_theQRL_qrysm_consensus_types_primitives.ValidatorIndex {
	if x != nil {
		return x.NextWithdrawalValidatorIndex
	}
	return github_com_theQRL_qrysm_consensus_types_primitives.ValidatorIndex(0)
}

func (x *BeaconStateCapella) GetHistoricalSummaries() []*HistoricalSummary {
	if x != nil {
		return x.HistoricalSummaries
	}
	return nil
}

type HistoricalSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockSummaryRoot []byte `protobuf:"bytes,1,opt,name=block_summary_root,json=blockSummaryRoot,proto3" json:"block_summary_root,omitempty" ssz-size:"32"`
	StateSummaryRoot []byte `protobuf:"bytes,2,opt,name=state_summary_root,json=stateSummaryRoot,proto3" json:"state_summary_root,omitempty" ssz-size:"32"`
}

func (x *HistoricalSummary) Reset() {
	*x = HistoricalSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_qrl_v1_beacon_state_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoricalSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoricalSummary) ProtoMessage() {}

func (x *HistoricalSummary) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qrl_v1_beacon_state_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoricalSummary.ProtoReflect.Descriptor instead.
func (*HistoricalSummary) Descriptor() ([]byte, []int) {
	return file_proto_qrl_v1_beacon_state_proto_rawDescGZIP(), []int{4}
}

func (x *HistoricalSummary) GetBlockSummaryRoot() []byte {
	if x != nil {
		return x.BlockSummaryRoot
	}
	return nil
}

func (x *HistoricalSummary) GetStateSummaryRoot() []byte {
	if x != nil {
		return x.StateSummaryRoot
	}
	return nil
}

type BeaconStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateId []byte `protobuf:"bytes,1,opt,name=state_id,json=stateId,proto3" json:"state_id,omitempty"`
}

func (x *BeaconStateRequest) Reset() {
	*x = BeaconStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_qrl_v1_beacon_state_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeaconStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconStateRequest) ProtoMessage() {}

func (x *BeaconStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qrl_v1_beacon_state_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconStateRequest.ProtoReflect.Descriptor instead.
func (*BeaconStateRequest) Descriptor() ([]byte, []int) {
	return file_proto_qrl_v1_beacon_state_proto_rawDescGZIP(), []int{5}
}

func (x *BeaconStateRequest) GetStateId() []byte {
	if x != nil {
		return x.StateId
	}
	return nil
}

type BeaconStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version             Version               `protobuf:"varint,1,opt,name=version,proto3,enum=theqrl.qrl.v1.Version" json:"version,omitempty"`
	Data                *BeaconStateContainer `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	ExecutionOptimistic bool                  `protobuf:"varint,3,opt,name=execution_optimistic,json=executionOptimistic,proto3" json:"execution_optimistic,omitempty"`
	Finalized           bool                  `protobuf:"varint,4,opt,name=finalized,proto3" json:"finalized,omitempty"`
}

func (x *BeaconStateResponse) Reset() {
	*x = BeaconStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_qrl_v1_beacon_state_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeaconStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconStateResponse) ProtoMessage() {}

func (x *BeaconStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qrl_v1_beacon_state_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconStateResponse.ProtoReflect.Descriptor instead.
func (*BeaconStateResponse) Descriptor() ([]byte, []int) {
	return file_proto_qrl_v1_beacon_state_proto_rawDescGZIP(), []int{6}
}

func (x *BeaconStateResponse) GetVersion() Version {
	if x != nil {
		return x.Version
	}
	return Version_PHASE0
}

func (x *BeaconStateResponse) GetData() *BeaconStateContainer {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BeaconStateResponse) GetExecutionOptimistic() bool {
	if x != nil {
		return x.ExecutionOptimistic
	}
	return false
}

func (x *BeaconStateResponse) GetFinalized() bool {
	if x != nil {
		return x.Finalized
	}
	return false
}

type BeaconStateContainer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to State:
	//
	//	*BeaconStateContainer_CapellaState
	State isBeaconStateContainer_State `protobuf_oneof:"state"`
}

func (x *BeaconStateContainer) Reset() {
	*x = BeaconStateContainer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_qrl_v1_beacon_state_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeaconStateContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeaconStateContainer) ProtoMessage() {}

func (x *BeaconStateContainer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qrl_v1_beacon_state_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeaconStateContainer.ProtoReflect.Descriptor instead.
func (*BeaconStateContainer) Descriptor() ([]byte, []int) {
	return file_proto_qrl_v1_beacon_state_proto_rawDescGZIP(), []int{7}
}

func (m *BeaconStateContainer) GetState() isBeaconStateContainer_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (x *BeaconStateContainer) GetCapellaState() *BeaconStateCapella {
	if x, ok := x.GetState().(*BeaconStateContainer_CapellaState); ok {
		return x.CapellaState
	}
	return nil
}

type isBeaconStateContainer_State interface {
	isBeaconStateContainer_State()
}

type BeaconStateContainer_CapellaState struct {
	CapellaState *BeaconStateCapella `protobuf:"bytes,1,opt,name=capella_state,json=capellaState,proto3,oneof"`
}

func (*BeaconStateContainer_CapellaState) isBeaconStateContainer_State() {}

type ForkChoiceHeadsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*ForkChoiceHead `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ForkChoiceHeadsResponse) Reset() {
	*x = ForkChoiceHeadsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_qrl_v1_beacon_state_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForkChoiceHeadsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForkChoiceHeadsResponse) ProtoMessage() {}

func (x *ForkChoiceHeadsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qrl_v1_beacon_state_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForkChoiceHeadsResponse.ProtoReflect.Descriptor instead.
func (*ForkChoiceHeadsResponse) Descriptor() ([]byte, []int) {
	return file_proto_qrl_v1_beacon_state_proto_rawDescGZIP(), []int{8}
}

func (x *ForkChoiceHeadsResponse) GetData() []*ForkChoiceHead {
	if x != nil {
		return x.Data
	}
	return nil
}

type ForkChoiceHead struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Root                []byte                                                  `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty" ssz-size:"32"`
	Slot                github_com_theQRL_qrysm_consensus_types_primitives.Slot `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty" cast-type:"github.com/theQRL/qrysm/consensus-types/primitives.Slot"`
	ExecutionOptimistic bool                                                    `protobuf:"varint,3,opt,name=execution_optimistic,json=executionOptimistic,proto3" json:"execution_optimistic,omitempty"`
}

func (x *ForkChoiceHead) Reset() {
	*x = ForkChoiceHead{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_qrl_v1_beacon_state_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForkChoiceHead) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForkChoiceHead) ProtoMessage() {}

func (x *ForkChoiceHead) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qrl_v1_beacon_state_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForkChoiceHead.ProtoReflect.Descriptor instead.
func (*ForkChoiceHead) Descriptor() ([]byte, []int) {
	return file_proto_qrl_v1_beacon_state_proto_rawDescGZIP(), []int{9}
}

func (x *ForkChoiceHead) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *ForkChoiceHead) GetSlot() github_com_theQRL_qrysm_consensus_types_primitives.Slot {
	if x != nil {
		return x.Slot
	}
	return github_com_theQRL_qrysm_consensus_types_primitives.Slot(0)
}

func (x *ForkChoiceHead) GetExecutionOptimistic() bool {
	if x != nil {
		return x.ExecutionOptimistic
	}
	return false
}

type RandaoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateId []byte                                                    `protobuf:"bytes,1,opt,name=state_id,json=stateId,proto3" json:"state_id,omitempty"`
	Epoch   *github_com_theQRL_qrysm_consensus_types_primitives.Epoch `protobuf:"varint,2,opt,name=epoch,proto3,oneof" json:"epoch,omitempty" cast-type:"github.com/theQRL/qrysm/consensus-types/primitives.Epoch"`
}

func (x *RandaoRequest) Reset() {
	*x = RandaoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_qrl_v1_beacon_state_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandaoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandaoRequest) ProtoMessage() {}

func (x *RandaoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qrl_v1_beacon_state_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandaoRequest.ProtoReflect.Descriptor instead.
func (*RandaoRequest) Descriptor() ([]byte, []int) {
	return file_proto_qrl_v1_beacon_state_proto_rawDescGZIP(), []int{10}
}

func (x *RandaoRequest) GetStateId() []byte {
	if x != nil {
		return x.StateId
	}
	return nil
}

func (x *RandaoRequest) GetEpoch() github_com_theQRL_qrysm_consensus_types_primitives.Epoch {
	if x != nil && x.Epoch != nil {
		return *x.Epoch
	}
	return github_com_theQRL_qrysm_consensus_types_primitives.Epoch(0)
}

type RandaoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data                *RandaoResponse_Randao `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	ExecutionOptimistic bool                   `protobuf:"varint,2,opt,name=execution_optimistic,json=executionOptimistic,proto3" json:"execution_optimistic,omitempty"`
	Finalized           bool                   `protobuf:"varint,3,opt,name=finalized,proto3" json:"finalized,omitempty"`
}

func (x *RandaoResponse) Reset() {
	*x = RandaoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_qrl_v1_beacon_state_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandaoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandaoResponse) ProtoMessage() {}

func (x *RandaoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qrl_v1_beacon_state_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandaoResponse.ProtoReflect.Descriptor instead.
func (*RandaoResponse) Descriptor() ([]byte, []int) {
	return file_proto_qrl_v1_beacon_state_proto_rawDescGZIP(), []int{11}
}

func (x *RandaoResponse) GetData() *RandaoResponse_Randao {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *RandaoResponse) GetExecutionOptimistic() bool {
	if x != nil {
		return x.ExecutionOptimistic
	}
	return false
}

func (x *RandaoResponse) GetFinalized() bool {
	if x != nil {
		return x.Finalized
	}
	return false
}

type RandaoResponse_Randao struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Randao []byte `protobuf:"bytes,1,opt,name=randao,proto3" json:"randao,omitempty" ssz-size:"32"`
}

func (x *RandaoResponse_Randao) Reset() {
	*x = RandaoResponse_Randao{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_qrl_v1_beacon_state_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RandaoResponse_Randao) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RandaoResponse_Randao) ProtoMessage() {}

func (x *RandaoResponse_Randao) ProtoReflect() protoreflect.Message {
	mi := &file_proto_qrl_v1_beacon_state_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RandaoResponse_Randao.ProtoReflect.Descriptor instead.
func (*RandaoResponse_Randao) Descriptor() ([]byte, []int) {
	return file_proto_qrl_v1_beacon_state_proto_rawDescGZIP(), []int{11, 0}
}

func (x *RandaoResponse_Randao) GetRandao() []byte {
	if x != nil {
		return x.Randao
	}
	return nil
}

var File_proto_qrl_v1_beacon_state_proto protoreflect.FileDescriptor

var file_proto_qrl_v1_beacon_state_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x71, 0x72, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x62,
	0x65, 0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0d, 0x74, 0x68, 0x65, 0x71, 0x72, 0x6c, 0x2e, 0x71, 0x72, 0x6c, 0x2e, 0x76, 0x31,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x71, 0x72, 0x6c, 0x2f, 0x65, 0x78,
	0x74, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x71, 0x72, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x71, 0x72, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x71, 0x72, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x71, 0x72, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x71, 0x72, 0x6c, 0x2f, 0x76, 0x31, 0x2f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x02, 0x0a, 0x12, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x10,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x30, 0x82, 0xb5, 0x18, 0x25, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x65, 0x51, 0x52, 0x4c, 0x2f, 0x67, 0x6f,
	0x2d, 0x62, 0x69, 0x74, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x42, 0x69, 0x74, 0x6c, 0x69, 0x73,
	0x74, 0x92, 0xb5, 0x18, 0x03, 0x31, 0x32, 0x38, 0x52, 0x0f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x68, 0x65, 0x71, 0x72, 0x6c,
	0x2e, 0x71, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x64, 0x0a,
	0x0f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x3b, 0x82, 0xb5, 0x18, 0x37, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x65, 0x51, 0x52, 0x4c, 0x2f, 0x71, 0x72,
	0x79, 0x73, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2d, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x53,
	0x6c, 0x6f, 0x74, 0x52, 0x0e, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x12, 0x6c, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x42, 0x45, 0x82, 0xb5, 0x18,
	0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x65, 0x51,
	0x52, 0x4c, 0x2f, 0x71, 0x72, 0x79, 0x73, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0xa0, 0x02, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x12,
	0x5b, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x45,
	0x82, 0xb5, 0x18, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74,
	0x68, 0x65, 0x51, 0x52, 0x4c, 0x2f, 0x71, 0x72, 0x79, 0x73, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x6d,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x4f, 0x0a, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x3b, 0x82, 0xb5, 0x18, 0x37,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x65, 0x51, 0x52,
	0x4c, 0x2f, 0x71, 0x72, 0x79, 0x73, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x73, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x65, 0x0a,
	0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x04, 0x42, 0x45, 0x82, 0xb5, 0x18, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x74, 0x68, 0x65, 0x51, 0x52, 0x4c, 0x2f, 0x71, 0x72, 0x79, 0x73, 0x6d, 0x2f, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70,
	0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x04, 0x46, 0x6f, 0x72, 0x6b, 0x12, 0x30, 0x0a,
	0x10, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x05, 0x8a, 0xb5, 0x18, 0x01, 0x34, 0x52, 0x0f,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x2e, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x05, 0x8a, 0xb5, 0x18, 0x01, 0x34, 0x52,
	0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x52, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42, 0x3c,
	0x82, 0xb5, 0x18, 0x38, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74,
	0x68, 0x65, 0x51, 0x52, 0x4c, 0x2f, 0x71, 0x72, 0x79, 0x73, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x6d,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x52, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x22, 0xa5, 0x10, 0x0a, 0x12, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x70, 0x65, 0x6c, 0x6c, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x65,
	0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0xe9, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3f,
	0x0a, 0x17, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x42, 0x06, 0x8a, 0xb5, 0x18, 0x02, 0x33, 0x32, 0x52, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69,
	0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x50, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x3b,
	0x82, 0xb5, 0x18, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74,
	0x68, 0x65, 0x51, 0x52, 0x4c, 0x2f, 0x71, 0x72, 0x79, 0x73, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x6d,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x53, 0x6c, 0x6f, 0x74, 0x52, 0x04, 0x73, 0x6c, 0x6f,
	0x74, 0x12, 0x28, 0x0a, 0x04, 0x66, 0x6f, 0x72, 0x6b, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x74, 0x68, 0x65, 0x71, 0x72, 0x6c, 0x2e, 0x71, 0x72, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x52, 0x04, 0x66, 0x6f, 0x72, 0x6b, 0x12, 0x51, 0x0a, 0x13, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0xd1, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x68, 0x65, 0x71,
	0x72, 0x6c, 0x2e, 0x71, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x11, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2d,
	0x0a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x73, 0x18, 0xd2, 0x0f,
	0x20, 0x03, 0x28, 0x0c, 0x42, 0x0b, 0x8a, 0xb5, 0x18, 0x07, 0x31, 0x30, 0x32, 0x34, 0x2c, 0x33,
	0x32, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x12, 0x2d, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x73, 0x18, 0xd3, 0x0f, 0x20,
	0x03, 0x28, 0x0c, 0x42, 0x0b, 0x8a, 0xb5, 0x18, 0x07, 0x31, 0x30, 0x32, 0x34, 0x2c, 0x33, 0x32,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x10,
	0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x73,
	0x18, 0xd4, 0x0f, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x14, 0x8a, 0xb5, 0x18, 0x04, 0x3f, 0x2c, 0x33,
	0x32, 0x92, 0xb5, 0x18, 0x08, 0x31, 0x36, 0x37, 0x37, 0x37, 0x32, 0x31, 0x36, 0x52, 0x0f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x52, 0x6f, 0x6f, 0x74, 0x73, 0x12, 0x3e,
	0x0a, 0x09, 0x65, 0x74, 0x68, 0x31, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0xb9, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x68, 0x65, 0x71, 0x72, 0x6c, 0x2e, 0x71, 0x72, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x65, 0x74, 0x68, 0x31, 0x44, 0x61, 0x74, 0x61, 0x12, 0x52,
	0x0a, 0x0f, 0x65, 0x74, 0x68, 0x31, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x76, 0x6f, 0x74, 0x65,
	0x73, 0x18, 0xba, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x68, 0x65, 0x71, 0x72,
	0x6c, 0x2e, 0x71, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x42, 0x07, 0x92, 0xb5, 0x18, 0x03,
	0x32, 0x35, 0x36, 0x52, 0x0d, 0x65, 0x74, 0x68, 0x31, 0x44, 0x61, 0x74, 0x61, 0x56, 0x6f, 0x74,
	0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x74, 0x68, 0x31, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xbb, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x10, 0x65, 0x74, 0x68, 0x31, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x4c, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0xa1, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x68, 0x65, 0x71, 0x72, 0x6c, 0x2e,
	0x71, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72,
	0x42, 0x11, 0x92, 0xb5, 0x18, 0x0d, 0x31, 0x30, 0x39, 0x39, 0x35, 0x31, 0x31, 0x36, 0x32, 0x37,
	0x37, 0x37, 0x36, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x2e, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0xa2, 0x1f, 0x20, 0x03,
	0x28, 0x04, 0x42, 0x11, 0x92, 0xb5, 0x18, 0x0d, 0x31, 0x30, 0x39, 0x39, 0x35, 0x31, 0x31, 0x36,
	0x32, 0x37, 0x37, 0x37, 0x36, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12,
	0x30, 0x0a, 0x0c, 0x72, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x5f, 0x6d, 0x69, 0x78, 0x65, 0x73, 0x18,
	0x89, 0x27, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x0c, 0x8a, 0xb5, 0x18, 0x08, 0x36, 0x35, 0x35, 0x33,
	0x36, 0x2c, 0x33, 0x32, 0x52, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x4d, 0x69, 0x78, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x09, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x18, 0xf1,
	0x2e, 0x20, 0x03, 0x28, 0x04, 0x42, 0x08, 0x8a, 0xb5, 0x18, 0x04, 0x31, 0x30, 0x32, 0x34, 0x52,
	0x09, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x54, 0x0a, 0x1c, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xd9, 0x36, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x11, 0x92, 0xb5, 0x18, 0x0d, 0x31, 0x30, 0x39, 0x39, 0x35, 0x31, 0x31, 0x36, 0x32,
	0x37, 0x37, 0x37, 0x36, 0x52, 0x1a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x52, 0x0a, 0x1b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0xda, 0x36, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x11, 0x92, 0xb5, 0x18, 0x0d, 0x31, 0x30, 0x39, 0x39,
	0x35, 0x31, 0x31, 0x36, 0x32, 0x37, 0x37, 0x37, 0x36, 0x52, 0x19, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x12, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0xc1, 0x3e, 0x20, 0x01, 0x28,
	0x0c, 0x42, 0x31, 0x82, 0xb5, 0x18, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x74, 0x68, 0x65, 0x51, 0x52, 0x4c, 0x2f, 0x67, 0x6f, 0x2d, 0x62, 0x69, 0x74, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x2e, 0x42, 0x69, 0x74, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x34, 0x8a,
	0xb5, 0x18, 0x01, 0x31, 0x52, 0x11, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x73, 0x12, 0x5e, 0x0a, 0x1d, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x5f, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xc2, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x74, 0x68, 0x65, 0x71, 0x72, 0x6c, 0x2e, 0x71, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x1b, 0x70, 0x72, 0x65, 0x76,
	0x69, 0x6f, 0x75, 0x73, 0x4a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x1c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x6a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xc3, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x74, 0x68, 0x65, 0x71, 0x72, 0x6c, 0x2e, 0x71, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x1a, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4a, 0x75, 0x73, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4d, 0x0a, 0x14, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0xc4, 0x3e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x68, 0x65, 0x71, 0x72, 0x6c, 0x2e, 0x71, 0x72,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x13, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x11, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0xa9, 0x46, 0x20, 0x03, 0x28, 0x04,
	0x42, 0x11, 0x92, 0xb5, 0x18, 0x0d, 0x31, 0x30, 0x39, 0x39, 0x35, 0x31, 0x31, 0x36, 0x32, 0x37,
	0x37, 0x37, 0x36, 0x52, 0x10, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x16, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x18,
	0xaa, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x68, 0x65, 0x71, 0x72, 0x6c, 0x2e,
	0x71, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x65, 0x52, 0x14, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x79, 0x6e,
	0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x12, 0x4d, 0x0a, 0x13, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x65, 0x18, 0xab, 0x46, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x68, 0x65, 0x71, 0x72,
	0x6c, 0x2e, 0x71, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x52, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x79, 0x6e, 0x63,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x12, 0x77, 0x0a, 0x1f, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x91, 0x4e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x68, 0x65, 0x71, 0x72, 0x6c, 0x2e, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x43, 0x61, 0x70,
	0x65, 0x6c, 0x6c, 0x61, 0x52, 0x1c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x33, 0x0a, 0x15, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xf9, 0x55, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x8d, 0x01, 0x0a, 0x1f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0xfa, 0x55, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x45, 0x82, 0xb5, 0x18, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x65, 0x51, 0x52, 0x4c, 0x2f, 0x71, 0x72, 0x79, 0x73, 0x6d, 0x2f,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x1c, 0x6e, 0x65, 0x78, 0x74, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x62, 0x0a, 0x14, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18,
	0xfb, 0x55, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x68, 0x65, 0x71, 0x72, 0x6c, 0x2e,
	0x71, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x0c, 0x92, 0xb5, 0x18, 0x08, 0x31, 0x36,
	0x37, 0x37, 0x37, 0x32, 0x31, 0x36, 0x52, 0x13, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63,
	0x61, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0x7f, 0x0a, 0x11, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x34, 0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0x8a, 0xb5,
	0x18, 0x02, 0x33, 0x32, 0x52, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x34, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x06, 0x8a, 0xb5, 0x18, 0x02, 0x33, 0x32, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0x2f, 0x0a, 0x12,
	0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0xd1, 0x01,
	0x0a, 0x13, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x74, 0x68, 0x65, 0x71, 0x72, 0x6c, 0x2e,
	0x71, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x68, 0x65, 0x71, 0x72, 0x6c, 0x2e, 0x71,
	0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x31, 0x0a, 0x14, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x22, 0x69, 0x0a, 0x14, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0d, 0x63, 0x61, 0x70,
	0x65, 0x6c, 0x6c, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x74, 0x68, 0x65, 0x71, 0x72, 0x6c, 0x2e, 0x71, 0x72, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x61, 0x70, 0x65,
	0x6c, 0x6c, 0x61, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x65, 0x6c, 0x6c, 0x61, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x4c, 0x0a, 0x17,
	0x46, 0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x68, 0x65, 0x71, 0x72, 0x6c, 0x2e, 0x71,
	0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb0, 0x01, 0x0a, 0x0e, 0x46,
	0x6f, 0x72, 0x6b, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1a, 0x0a,
	0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0x8a, 0xb5, 0x18,
	0x02, 0x33, 0x32, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x4f, 0x0a, 0x04, 0x73, 0x6c, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x3b, 0x82, 0xb5, 0x18, 0x37, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x65, 0x51, 0x52, 0x4c, 0x2f, 0x71,
	0x72, 0x79, 0x73, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2d, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x73, 0x2e,
	0x53, 0x6c, 0x6f, 0x74, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x31, 0x0a, 0x14, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x73, 0x74, 0x69, 0x63, 0x22, 0x8d, 0x01,
	0x0a, 0x0d, 0x52, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x57, 0x0a, 0x05, 0x65, 0x70,
	0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x3c, 0x82, 0xb5, 0x18, 0x38, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x65, 0x51, 0x52, 0x4c,
	0x2f, 0x71, 0x72, 0x79, 0x73, 0x6d, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x73, 0x2e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x48, 0x00, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x22, 0xc5, 0x01,
	0x0a, 0x0e, 0x52, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x74, 0x68, 0x65, 0x71, 0x72, 0x6c, 0x2e, 0x71, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x61, 0x6e, 0x64, 0x61, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x61,
	0x6e, 0x64, 0x61, 0x6f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x31, 0x0a, 0x14, 0x65, 0x78,
	0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x1c, 0x0a,
	0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x1a, 0x28, 0x0a, 0x06, 0x52,
	0x61, 0x6e, 0x64, 0x61, 0x6f, 0x12, 0x1e, 0x0a, 0x06, 0x72, 0x61, 0x6e, 0x64, 0x61, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x06, 0x8a, 0xb5, 0x18, 0x02, 0x33, 0x32, 0x52, 0x06, 0x72,
	0x61, 0x6e, 0x64, 0x61, 0x6f, 0x42, 0x6d, 0x0a, 0x11, 0x6f, 0x72, 0x67, 0x2e, 0x74, 0x68, 0x65,
	0x71, 0x72, 0x6c, 0x2e, 0x71, 0x72, 0x6c, 0x2e, 0x76, 0x31, 0x42, 0x10, 0x42, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x24,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68, 0x65, 0x51, 0x52,
	0x4c, 0x2f, 0x71, 0x72, 0x79, 0x73, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x71, 0x72,
	0x6c, 0x2f, 0x76, 0x31, 0xaa, 0x02, 0x0d, 0x54, 0x68, 0x65, 0x51, 0x52, 0x4c, 0x2e, 0x51, 0x52,
	0x4c, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0d, 0x54, 0x68, 0x65, 0x51, 0x52, 0x4c, 0x5c, 0x51, 0x52,
	0x4c, 0x5c, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_qrl_v1_beacon_state_proto_rawDescOnce sync.Once
	file_proto_qrl_v1_beacon_state_proto_rawDescData = file_proto_qrl_v1_beacon_state_proto_rawDesc
)

func file_proto_qrl_v1_beacon_state_proto_rawDescGZIP() []byte {
	file_proto_qrl_v1_beacon_state_proto_rawDescOnce.Do(func() {
		file_proto_qrl_v1_beacon_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_qrl_v1_beacon_state_proto_rawDescData)
	})
	return file_proto_qrl_v1_beacon_state_proto_rawDescData
}

var file_proto_qrl_v1_beacon_state_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_proto_qrl_v1_beacon_state_proto_goTypes = []interface{}{
	(*PendingAttestation)(nil),               // 0: theqrl.qrl.v1.PendingAttestation
	(*Committee)(nil),                        // 1: theqrl.qrl.v1.Committee
	(*Fork)(nil),                             // 2: theqrl.qrl.v1.Fork
	(*BeaconStateCapella)(nil),               // 3: theqrl.qrl.v1.BeaconStateCapella
	(*HistoricalSummary)(nil),                // 4: theqrl.qrl.v1.HistoricalSummary
	(*BeaconStateRequest)(nil),               // 5: theqrl.qrl.v1.BeaconStateRequest
	(*BeaconStateResponse)(nil),              // 6: theqrl.qrl.v1.BeaconStateResponse
	(*BeaconStateContainer)(nil),             // 7: theqrl.qrl.v1.BeaconStateContainer
	(*ForkChoiceHeadsResponse)(nil),          // 8: theqrl.qrl.v1.ForkChoiceHeadsResponse
	(*ForkChoiceHead)(nil),                   // 9: theqrl.qrl.v1.ForkChoiceHead
	(*RandaoRequest)(nil),                    // 10: theqrl.qrl.v1.RandaoRequest
	(*RandaoResponse)(nil),                   // 11: theqrl.qrl.v1.RandaoResponse
	(*RandaoResponse_Randao)(nil),            // 12: theqrl.qrl.v1.RandaoResponse.Randao
	(*AttestationData)(nil),                  // 13: theqrl.qrl.v1.AttestationData
	(*BeaconBlockHeader)(nil),                // 14: theqrl.qrl.v1.BeaconBlockHeader
	(*ExecutionData)(nil),                    // 15: theqrl.qrl.v1.ExecutionData
	(*Validator)(nil),                        // 16: theqrl.qrl.v1.Validator
	(*Checkpoint)(nil),                       // 17: theqrl.qrl.v1.Checkpoint
	(*SyncCommittee)(nil),                    // 18: theqrl.qrl.v1.SyncCommittee
	(*v1.ExecutionPayloadHeaderCapella)(nil), // 19: theqrl.engine.v1.ExecutionPayloadHeaderCapella
	(Version)(0),                             // 20: theqrl.qrl.v1.Version
}
var file_proto_qrl_v1_beacon_state_proto_depIdxs = []int32{
	13, // 0: theqrl.qrl.v1.PendingAttestation.data:type_name -> theqrl.qrl.v1.AttestationData
	2,  // 1: theqrl.qrl.v1.BeaconStateCapella.fork:type_name -> theqrl.qrl.v1.Fork
	14, // 2: theqrl.qrl.v1.BeaconStateCapella.latest_block_header:type_name -> theqrl.qrl.v1.BeaconBlockHeader
	15, // 3: theqrl.qrl.v1.BeaconStateCapella.eth1_data:type_name -> theqrl.qrl.v1.ExecutionData
	15, // 4: theqrl.qrl.v1.BeaconStateCapella.eth1_data_votes:type_name -> theqrl.qrl.v1.ExecutionData
	16, // 5: theqrl.qrl.v1.BeaconStateCapella.validators:type_name -> theqrl.qrl.v1.Validator
	17, // 6: theqrl.qrl.v1.BeaconStateCapella.previous_justified_checkpoint:type_name -> theqrl.qrl.v1.Checkpoint
	17, // 7: theqrl.qrl.v1.BeaconStateCapella.current_justified_checkpoint:type_name -> theqrl.qrl.v1.Checkpoint
	17, // 8: theqrl.qrl.v1.BeaconStateCapella.finalized_checkpoint:type_name -> theqrl.qrl.v1.Checkpoint
	18, // 9: theqrl.qrl.v1.BeaconStateCapella.current_sync_committee:type_name -> theqrl.qrl.v1.SyncCommittee
	18, // 10: theqrl.qrl.v1.BeaconStateCapella.next_sync_committee:type_name -> theqrl.qrl.v1.SyncCommittee
	19, // 11: theqrl.qrl.v1.BeaconStateCapella.latest_execution_payload_header:type_name -> theqrl.engine.v1.ExecutionPayloadHeaderCapella
	4,  // 12: theqrl.qrl.v1.BeaconStateCapella.historical_summaries:type_name -> theqrl.qrl.v1.HistoricalSummary
	20, // 13: theqrl.qrl.v1.BeaconStateResponse.version:type_name -> theqrl.qrl.v1.Version
	7,  // 14: theqrl.qrl.v1.BeaconStateResponse.data:type_name -> theqrl.qrl.v1.BeaconStateContainer
	3,  // 15: theqrl.qrl.v1.BeaconStateContainer.capella_state:type_name -> theqrl.qrl.v1.BeaconStateCapella
	9,  // 16: theqrl.qrl.v1.ForkChoiceHeadsResponse.data:type_name -> theqrl.qrl.v1.ForkChoiceHead
	12, // 17: theqrl.qrl.v1.RandaoResponse.data:type_name -> theqrl.qrl.v1.RandaoResponse.Randao
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_proto_qrl_v1_beacon_state_proto_init() }
func file_proto_qrl_v1_beacon_state_proto_init() {
	if File_proto_qrl_v1_beacon_state_proto != nil {
		return
	}
	file_proto_qrl_v1_attestation_proto_init()
	file_proto_qrl_v1_beacon_block_proto_init()
	file_proto_qrl_v1_validator_proto_init()
	file_proto_qrl_v1_sync_committee_proto_init()
	file_proto_qrl_v1_version_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_qrl_v1_beacon_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PendingAttestation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_qrl_v1_beacon_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Committee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_qrl_v1_beacon_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_qrl_v1_beacon_state_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeaconStateCapella); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_qrl_v1_beacon_state_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoricalSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_qrl_v1_beacon_state_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeaconStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_qrl_v1_beacon_state_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeaconStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_qrl_v1_beacon_state_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeaconStateContainer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_qrl_v1_beacon_state_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForkChoiceHeadsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_qrl_v1_beacon_state_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForkChoiceHead); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_qrl_v1_beacon_state_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandaoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_qrl_v1_beacon_state_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandaoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_qrl_v1_beacon_state_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RandaoResponse_Randao); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_qrl_v1_beacon_state_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*BeaconStateContainer_CapellaState)(nil),
	}
	file_proto_qrl_v1_beacon_state_proto_msgTypes[10].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_qrl_v1_beacon_state_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_qrl_v1_beacon_state_proto_goTypes,
		DependencyIndexes: file_proto_qrl_v1_beacon_state_proto_depIdxs,
		MessageInfos:      file_proto_qrl_v1_beacon_state_proto_msgTypes,
	}.Build()
	File_proto_qrl_v1_beacon_state_proto = out.File
	file_proto_qrl_v1_beacon_state_proto_rawDesc = nil
	file_proto_qrl_v1_beacon_state_proto_goTypes = nil
	file_proto_qrl_v1_beacon_state_proto_depIdxs = nil
}
