// Copyright 2020 Prysmatic Labs.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package theqrl.zond.v1;

import "google/protobuf/descriptor.proto";

import "proto/zond/ext/options.proto";
import "proto/zond/v1/beacon_block.proto";
import "proto/zond/v1/version.proto";

option csharp_namespace = "TheQRL.Zond.V1";
option go_package = "github.com/theQRL/qrysm/proto/qrl/v1";
option java_multiple_files = true;
option java_outer_classname = "ValidatorProto";
option java_package = "org.theqrl.zond.v1";
option php_namespace = "TheQRL\\Zond\\v1";

// A Zond validator.
message Validator {
    // 2592 byte Dilithium public key used for the validator's activities.
    bytes pubkey = 1 [(theqrl.zond.ext.ssz_size) = "2592", (theqrl.zond.ext.spec_name) = "pubkey"];

    // 32 byte hash of the withdrawal destination public key.
    bytes withdrawal_credentials = 2 [(theqrl.zond.ext.ssz_size) = "32"];

    // The validators current effective balance in gplanck.
    uint64 effective_balance = 3;

    // Whether or not the validator has been slashed.
    bool slashed = 4;

    // Epoch when the validator became eligible for activation. This field may
    // be zero if the validator was present in the Ethereum proof of stake genesis. This
    // field is FAR_FUTURE_EPOCH if the validator has not been activated.
    uint64 activation_eligibility_epoch = 5 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/consensus-types/primitives.Epoch"];

    // Epoch when the validator was activated. This field may be zero if the
    // validator was present in the Ethereum proof of stake genesis. This field is
    // FAR_FUTURE_EPOCH if the validator has not been activated.
    uint64 activation_epoch = 6 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/consensus-types/primitives.Epoch"];

    // Epoch when the validator was exited. This field is FAR_FUTURE_EPOCH if
    // the validator has not exited.
    // FAR_FUTURE_EPOCH is a constant defined by the official Ethereum Beacon Chain specification:
    // https://github.com/ethereum/consensus-specs/blob/v0.9.2/specs/core/0_beacon-chain.md#constants
    uint64 exit_epoch = 7 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/consensus-types/primitives.Epoch"];

    // Epoch when the validator is eligible to withdraw their funds. This field
    // is FAR_FUTURE_EPOCH if the validator has not exited.
    // FAR_FUTURE_EPOCH is a constant defined by the official Ethereum Beacon Chain specification:
    // https://github.com/ethereum/consensus-specs/blob/v0.9.2/specs/core/0_beacon-chain.md#constants
    uint64 withdrawable_epoch = 8 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/consensus-types/primitives.Epoch"];
}

enum ValidatorStatus {
    PENDING_INITIALIZED  = 0;
    PENDING_QUEUED = 1;
    ACTIVE_ONGOING = 2;
    ACTIVE_EXITING = 3;
    ACTIVE_SLASHED = 4;
    EXITED_UNSLASHED = 5;
    EXITED_SLASHED = 6;
    WITHDRAWAL_POSSIBLE = 7;
    WITHDRAWAL_DONE = 8;
    ACTIVE = 9;
    PENDING = 10;
    EXITED = 11;
    WITHDRAWAL = 12;
}

message ProduceBlockRequest {
    // The slot to request a block for.
    uint64 slot = 1 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/consensus-types/primitives.Slot"];

    // The validators RANDAO reveal 4595 byte value.
    bytes randao_reveal = 2 [(theqrl.zond.ext.ssz_size) = "4595"];

    // 32 byte field of arbitrary data. This field may contain any data and
    // is not used for anything other than a fun message.
    optional bytes graffiti = 3 [(theqrl.zond.ext.ssz_size) = "32"];
}

message ProduceBlockResponse {
  Version version = 1;
  BeaconBlockContainer data = 2;
}

message ProduceBlindedBlockResponse {
  Version version = 1;
  BlindedBeaconBlockContainer data = 2;
}

// Aggregated sync committee object to support light client.
message SyncCommitteeContribution {
  // Slot to which this contribution pertains.
  uint64 slot = 1 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/consensus-types/primitives.Slot"];

  // 32 byte block root for this signature.
  bytes beacon_block_root = 2 [(theqrl.zond.ext.ssz_size) = "32"];

  // The subcommittee this contribution pertains to out of the broader sync committee.
  uint64 subcommittee_index = 3;

  // A bit is set if a signature from the validator at the corresponding
  // index in the subcommittee is present in the aggregate `signature`.
  bytes aggregation_bits = 4 [(theqrl.zond.ext.ssz_size) = "sync_committee_aggregate_bytes.size", (theqrl.zond.ext.cast_type) = "sync_committee_aggregate_bits.type"];

  // Signature(s) by the validator(s) over the block root of `slot`.
  repeated bytes signatures = 5 [(theqrl.zond.ext.ssz_size) = "?,4595", (theqrl.zond.ext.ssz_max) = "16"];
}

// Aggregated sync committee signature object with selection proof to support light client.
message ContributionAndProof {
  // Index of the aggregator that produced this proof.
  uint64 aggregator_index = 1 [(theqrl.zond.ext.cast_type) = "github.com/theQRL/qrysm/consensus-types/primitives.ValidatorIndex"];

  SyncCommitteeContribution contribution = 2;

  // The selection proof itself.
  bytes selection_proof = 3 [(theqrl.zond.ext.ssz_size) = "4595"];
}

// Signed aggregated sync committee signature object with selection proof to support light client.
message SignedContributionAndProof {
  ContributionAndProof message = 1;

  // Signature of the aggregator that produced `message`.
  bytes signature = 4 [(theqrl.zond.ext.ssz_size) = "4595"];
}
