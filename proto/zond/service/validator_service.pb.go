// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.3
// source: proto/zond/service/validator_service.proto

package service

import (
	context "context"
	reflect "reflect"

	_ "github.com/golang/protobuf/protoc-gen-go/descriptor"
	v1 "github.com/theQRL/qrysm/v4/proto/zond/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_proto_zond_service_validator_service_proto protoreflect.FileDescriptor

var file_proto_zond_service_validator_service_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x7a, 0x6f, 0x6e, 0x64, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x74, 0x68,
	0x65, 0x71, 0x72, 0x6c, 0x2e, 0x7a, 0x6f, 0x6e, 0x64, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x7a, 0x6f, 0x6e, 0x64, 0x2f, 0x76, 0x31,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x7a, 0x6f, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x73, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xf0, 0x04, 0x0a, 0x0f, 0x42, 0x65,
	0x61, 0x63, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x8c, 0x01,
	0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x23,
	0x2e, 0x74, 0x68, 0x65, 0x71, 0x72, 0x6c, 0x2e, 0x7a, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x68, 0x65, 0x71, 0x72, 0x6c, 0x2e, 0x7a, 0x6f, 0x6e,
	0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x2b, 0x12, 0x29, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x7a, 0x6f, 0x6e,
	0x64, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2f, 0x7b, 0x73, 0x6c, 0x6f, 0x74, 0x7d, 0x12, 0x8b, 0x01, 0x0a,
	0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x53, 0x5a,
	0x12, 0x23, 0x2e, 0x74, 0x68, 0x65, 0x71, 0x72, 0x6c, 0x2e, 0x7a, 0x6f, 0x6e, 0x64, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x74, 0x68, 0x65, 0x71, 0x72, 0x6c, 0x2e, 0x7a,
	0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x53, 0x5a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x7a, 0x6f, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2f,
	0x7b, 0x73, 0x6c, 0x6f, 0x74, 0x7d, 0x2f, 0x73, 0x73, 0x7a, 0x12, 0xa2, 0x01, 0x0a, 0x13, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x64, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x23, 0x2e, 0x74, 0x68, 0x65, 0x71, 0x72, 0x6c, 0x2e, 0x7a, 0x6f, 0x6e, 0x64,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x74, 0x68, 0x65, 0x71, 0x72, 0x6c,
	0x2e, 0x7a, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x42, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12, 0x31, 0x2f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x7a, 0x6f, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x2f, 0x7b, 0x73, 0x6c, 0x6f, 0x74, 0x7d, 0x12,
	0x9a, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64,
	0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x53, 0x5a, 0x12, 0x23, 0x2e, 0x74, 0x68, 0x65,
	0x71, 0x72, 0x6c, 0x2e, 0x7a, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x74, 0x68, 0x65, 0x71, 0x72, 0x6c, 0x2e, 0x7a, 0x6f, 0x6e, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x53, 0x5a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x22, 0x3d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x7a, 0x6f, 0x6e, 0x64, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x2f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x2f, 0x7b, 0x73, 0x6c, 0x6f, 0x74, 0x7d, 0x2f, 0x73, 0x73, 0x7a, 0x42, 0x8d, 0x01, 0x0a,
	0x17, 0x6f, 0x72, 0x67, 0x2e, 0x74, 0x68, 0x65, 0x71, 0x72, 0x6c, 0x2e, 0x7a, 0x6f, 0x6e, 0x64,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x15, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x68,
	0x65, 0x51, 0x52, 0x4c, 0x2f, 0x71, 0x72, 0x79, 0x73, 0x6d, 0x2f, 0x76, 0x34, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x7a, 0x6f, 0x6e, 0x64, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0xaa, 0x02, 0x13, 0x54, 0x68, 0x65, 0x51, 0x52, 0x4c, 0x2e, 0x5a, 0x6f, 0x6e, 0x64, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0xca, 0x02, 0x13, 0x54, 0x68, 0x65, 0x51, 0x52, 0x4c, 0x5c,
	0x5a, 0x6f, 0x6e, 0x64, 0x5c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var file_proto_zond_service_validator_service_proto_goTypes = []interface{}{
	(*v1.ProduceBlockRequest)(nil),         // 0: theqrl.zond.v1.ProduceBlockRequest
	(*v1.ProduceBlockResponse)(nil),        // 1: theqrl.zond.v1.ProduceBlockResponse
	(*v1.SSZContainer)(nil),                // 2: theqrl.zond.v1.SSZContainer
	(*v1.ProduceBlindedBlockResponse)(nil), // 3: theqrl.zond.v1.ProduceBlindedBlockResponse
}
var file_proto_zond_service_validator_service_proto_depIdxs = []int32{
	0, // 0: theqrl.zond.service.BeaconValidator.ProduceBlock:input_type -> theqrl.zond.v1.ProduceBlockRequest
	0, // 1: theqrl.zond.service.BeaconValidator.ProduceBlockSSZ:input_type -> theqrl.zond.v1.ProduceBlockRequest
	0, // 2: theqrl.zond.service.BeaconValidator.ProduceBlindedBlock:input_type -> theqrl.zond.v1.ProduceBlockRequest
	0, // 3: theqrl.zond.service.BeaconValidator.ProduceBlindedBlockSSZ:input_type -> theqrl.zond.v1.ProduceBlockRequest
	1, // 4: theqrl.zond.service.BeaconValidator.ProduceBlock:output_type -> theqrl.zond.v1.ProduceBlockResponse
	2, // 5: theqrl.zond.service.BeaconValidator.ProduceBlockSSZ:output_type -> theqrl.zond.v1.SSZContainer
	3, // 6: theqrl.zond.service.BeaconValidator.ProduceBlindedBlock:output_type -> theqrl.zond.v1.ProduceBlindedBlockResponse
	2, // 7: theqrl.zond.service.BeaconValidator.ProduceBlindedBlockSSZ:output_type -> theqrl.zond.v1.SSZContainer
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_zond_service_validator_service_proto_init() }
func file_proto_zond_service_validator_service_proto_init() {
	if File_proto_zond_service_validator_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_zond_service_validator_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_zond_service_validator_service_proto_goTypes,
		DependencyIndexes: file_proto_zond_service_validator_service_proto_depIdxs,
	}.Build()
	File_proto_zond_service_validator_service_proto = out.File
	file_proto_zond_service_validator_service_proto_rawDesc = nil
	file_proto_zond_service_validator_service_proto_goTypes = nil
	file_proto_zond_service_validator_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BeaconValidatorClient is the client API for BeaconValidator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BeaconValidatorClient interface {
	ProduceBlock(ctx context.Context, in *v1.ProduceBlockRequest, opts ...grpc.CallOption) (*v1.ProduceBlockResponse, error)
	ProduceBlockSSZ(ctx context.Context, in *v1.ProduceBlockRequest, opts ...grpc.CallOption) (*v1.SSZContainer, error)
	ProduceBlindedBlock(ctx context.Context, in *v1.ProduceBlockRequest, opts ...grpc.CallOption) (*v1.ProduceBlindedBlockResponse, error)
	ProduceBlindedBlockSSZ(ctx context.Context, in *v1.ProduceBlockRequest, opts ...grpc.CallOption) (*v1.SSZContainer, error)
}

type beaconValidatorClient struct {
	cc grpc.ClientConnInterface
}

func NewBeaconValidatorClient(cc grpc.ClientConnInterface) BeaconValidatorClient {
	return &beaconValidatorClient{cc}
}

func (c *beaconValidatorClient) ProduceBlock(ctx context.Context, in *v1.ProduceBlockRequest, opts ...grpc.CallOption) (*v1.ProduceBlockResponse, error) {
	out := new(v1.ProduceBlockResponse)
	err := c.cc.Invoke(ctx, "/theqrl.zond.service.BeaconValidator/ProduceBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconValidatorClient) ProduceBlockSSZ(ctx context.Context, in *v1.ProduceBlockRequest, opts ...grpc.CallOption) (*v1.SSZContainer, error) {
	out := new(v1.SSZContainer)
	err := c.cc.Invoke(ctx, "/theqrl.zond.service.BeaconValidator/ProduceBlockSSZ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconValidatorClient) ProduceBlindedBlock(ctx context.Context, in *v1.ProduceBlockRequest, opts ...grpc.CallOption) (*v1.ProduceBlindedBlockResponse, error) {
	out := new(v1.ProduceBlindedBlockResponse)
	err := c.cc.Invoke(ctx, "/theqrl.zond.service.BeaconValidator/ProduceBlindedBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beaconValidatorClient) ProduceBlindedBlockSSZ(ctx context.Context, in *v1.ProduceBlockRequest, opts ...grpc.CallOption) (*v1.SSZContainer, error) {
	out := new(v1.SSZContainer)
	err := c.cc.Invoke(ctx, "/theqrl.zond.service.BeaconValidator/ProduceBlindedBlockSSZ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeaconValidatorServer is the server API for BeaconValidator service.
type BeaconValidatorServer interface {
	ProduceBlock(context.Context, *v1.ProduceBlockRequest) (*v1.ProduceBlockResponse, error)
	ProduceBlockSSZ(context.Context, *v1.ProduceBlockRequest) (*v1.SSZContainer, error)
	ProduceBlindedBlock(context.Context, *v1.ProduceBlockRequest) (*v1.ProduceBlindedBlockResponse, error)
	ProduceBlindedBlockSSZ(context.Context, *v1.ProduceBlockRequest) (*v1.SSZContainer, error)
}

// UnimplementedBeaconValidatorServer can be embedded to have forward compatible implementations.
type UnimplementedBeaconValidatorServer struct {
}

func (*UnimplementedBeaconValidatorServer) ProduceBlock(context.Context, *v1.ProduceBlockRequest) (*v1.ProduceBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProduceBlock not implemented")
}
func (*UnimplementedBeaconValidatorServer) ProduceBlockSSZ(context.Context, *v1.ProduceBlockRequest) (*v1.SSZContainer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProduceBlockSSZ not implemented")
}
func (*UnimplementedBeaconValidatorServer) ProduceBlindedBlock(context.Context, *v1.ProduceBlockRequest) (*v1.ProduceBlindedBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProduceBlindedBlock not implemented")
}
func (*UnimplementedBeaconValidatorServer) ProduceBlindedBlockSSZ(context.Context, *v1.ProduceBlockRequest) (*v1.SSZContainer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProduceBlindedBlockSSZ not implemented")
}

func RegisterBeaconValidatorServer(s *grpc.Server, srv BeaconValidatorServer) {
	s.RegisterService(&_BeaconValidator_serviceDesc, srv)
}

func _BeaconValidator_ProduceBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ProduceBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconValidatorServer).ProduceBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/theqrl.zond.service.BeaconValidator/ProduceBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconValidatorServer).ProduceBlock(ctx, req.(*v1.ProduceBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconValidator_ProduceBlockSSZ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ProduceBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconValidatorServer).ProduceBlockSSZ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/theqrl.zond.service.BeaconValidator/ProduceBlockSSZ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconValidatorServer).ProduceBlockSSZ(ctx, req.(*v1.ProduceBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconValidator_ProduceBlindedBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ProduceBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconValidatorServer).ProduceBlindedBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/theqrl.zond.service.BeaconValidator/ProduceBlindedBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconValidatorServer).ProduceBlindedBlock(ctx, req.(*v1.ProduceBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeaconValidator_ProduceBlindedBlockSSZ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.ProduceBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconValidatorServer).ProduceBlindedBlockSSZ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/theqrl.zond.service.BeaconValidator/ProduceBlindedBlockSSZ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconValidatorServer).ProduceBlindedBlockSSZ(ctx, req.(*v1.ProduceBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BeaconValidator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "theqrl.zond.service.BeaconValidator",
	HandlerType: (*BeaconValidatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProduceBlock",
			Handler:    _BeaconValidator_ProduceBlock_Handler,
		},
		{
			MethodName: "ProduceBlockSSZ",
			Handler:    _BeaconValidator_ProduceBlockSSZ_Handler,
		},
		{
			MethodName: "ProduceBlindedBlock",
			Handler:    _BeaconValidator_ProduceBlindedBlock_Handler,
		},
		{
			MethodName: "ProduceBlindedBlockSSZ",
			Handler:    _BeaconValidator_ProduceBlindedBlockSSZ_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/zond/service/validator_service.proto",
}
