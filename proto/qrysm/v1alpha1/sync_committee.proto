// Copyright 2021 Prysmatic Labs.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package theqrl.qrl.v1alpha1;

import "proto/qrl/ext/options.proto";

option csharp_namespace = "TheQRL.QRL.V1";
option go_package = "github.com/theQRL/qrysm/proto/qrysm/v1alpha1;qrl";
option java_multiple_files = true;
option java_outer_classname = "SyncCommitteeProto";
option java_package = "org.theqrl.qrl.v1alpha1";
option php_namespace = "TheQRL\\QRL\\v1alpha1";

// Sync committee object to support light client.
message SyncCommitteeMessage {
  // Slot to which this contribution pertains.
  uint64 slot = 1 [(theqrl.qrl.ext.cast_type) = "github.com/theQRL/qrysm/consensus-types/primitives.Slot"];

  // 32 byte block root for this signature.
  bytes block_root = 2 [(theqrl.qrl.ext.ssz_size) = "32"];

  // Index of the validator that produced this signature.
  uint64 validator_index = 3 [(theqrl.qrl.ext.cast_type) = "github.com/theQRL/qrysm/consensus-types/primitives.ValidatorIndex"];

  // Signature by the validator over the block root of `slot`.
  bytes signature = 4 [(theqrl.qrl.ext.ssz_size) = "4627"];
}

// Aggregated sync committee object to support light client.
message SyncCommitteeContribution {
  // Slot to which this contribution pertains.
  uint64 slot = 1 [(theqrl.qrl.ext.cast_type) = "github.com/theQRL/qrysm/consensus-types/primitives.Slot"];

  // 32 byte block root for this signature.
  bytes block_root = 2 [(theqrl.qrl.ext.ssz_size) = "32"];

  // The subcommittee this contribution pertains to out of the broader sync committee.
  uint64 subcommittee_index = 3;

  // A bit is set if a signature from the validator at the corresponding
  // index in the subcommittee is present in the aggregate `signature`.
  bytes aggregation_bits = 4 [(theqrl.qrl.ext.ssz_size) = "sync_committee_aggregate_bytes.size", (theqrl.qrl.ext.cast_type) = "sync_committee_aggregate_bits.type"];

  // Signature(s) by the validator(s) over the block root of `slot`.
  repeated bytes signatures = 5 [(theqrl.qrl.ext.ssz_size) = "?,4627", (theqrl.qrl.ext.ssz_max) = "16"];
}

// Aggregated sync committee signature object with selection proof to support light client.
message ContributionAndProof {
  // Index of the aggregator that produced this proof.
  uint64 aggregator_index = 1 [(theqrl.qrl.ext.cast_type) = "github.com/theQRL/qrysm/consensus-types/primitives.ValidatorIndex"];

  SyncCommitteeContribution contribution = 2;

  // The selection proof itself.
  bytes selection_proof = 3 [(theqrl.qrl.ext.ssz_size) = "4627"];
}

// Signed aggregated sync committee signature object with selection proof to support light client.
message SignedContributionAndProof {
  ContributionAndProof message = 1;

  // Signature of the aggregator that produced `message`.
  bytes signature = 2 [(theqrl.qrl.ext.ssz_size) = "4627"];
}
