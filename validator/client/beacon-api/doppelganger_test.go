package beacon_api

import (
	"bytes"
	"context"
	"encoding/json"
	"testing"

	"github.com/golang/mock/gomock"
	"github.com/pkg/errors"
	"github.com/theQRL/go-zond/common/hexutil"
	"github.com/theQRL/qrysm/v4/beacon-chain/rpc/apimiddleware"
	"github.com/theQRL/qrysm/v4/beacon-chain/rpc/zond/beacon"
	"github.com/theQRL/qrysm/v4/beacon-chain/rpc/zond/shared"
	"github.com/theQRL/qrysm/v4/beacon-chain/rpc/zond/validator"
	zondpb "github.com/theQRL/qrysm/v4/proto/qrysm/v1alpha1"
	"github.com/theQRL/qrysm/v4/testing/assert"
	"github.com/theQRL/qrysm/v4/testing/require"
	"github.com/theQRL/qrysm/v4/validator/client/beacon-api/mock"
)

func TestCheckDoppelGanger_Nominal(t *testing.T) {
	const stringPubKey1 = "0x93cf5af12e73cefb4891e9a1537c3bcd109654ff870ce66d0c70a2b46e93013f5cf5bf23f5da5b8e370c9972e1789642a73667f668b6336afdbb7b767bc705e62791ab483a8879c4c69cdcad9036467a35161597396f7cf20a0f4ae58dc6ccf0f87dd5a2918b369c59b61759e04dc40b50eb7e19cb34e1b89aa4c9760dabc811258469539da1c72d3a930ad20388a01784d3540d7f338511f3d2cc6a64a24d6f5d18a90b3bf789bc561908024e74f77fe971b78872e467a03b2f7336ac95649d4f3a2f2abdce287314e0902bf55ef5805921953335a3ed20ef2034fd6d3387c628b15ff8845a97d84660c41e174f7379306b4d6220ae2f83ecf8d58a9bf54dbce5fdf2e862f077d55f49e17d4ecf677880b6e933907a2a426c7a89a8e1a5b6b9b5531df4666bdf71c8d48cada19e285c6d1c5f906af54d6a9e0234cbb4f500241a6bb16c8011d8c4eee4d04ea02a4149906cecb97f4e8893a2a0e1edaec86272193a15d205f16653b02d2860c0b493b6d74b04db87b13b2fda3485c5cbf3f3022c95f2421ad6f970e21c5373b9e1abdd2921b02ad2925f63b30867a96364951f4dde87a9240c955ceebffc14d85f37f94c6e0d0c132248b0bc5fee084dc6d208686ea4a96643c478c8e9fc56a676487c0c510a769272837012796c215bf93c8d1cbfb0915e8d051f833b8c9095a7519efdc93e64cdc29fcac2cab5bfa67ea6cba8bf7dbb4dfc7023d92699fbd0e2630cc6f14d705333cf3bb7e1c136f6079c769acde4b0a874b53676924598daa35801d77bbabe5641aa780f8ce953e73bc1d7cae6e48fc435cbe8bf9acb9ccb29447c6f76c0291c229d47ffb0f1125cd59354a8885f7615b4695edd070ae41d10034f58ba7c1d1be4b9d1148c4b485c439c5fb1177890b32cb7b59e9f8f7ecc2527c2f1f2c526f505abffb714abbdd3a5479bb9e909072a2d28b301cd629b8f13ca06e924b66defb1fc8a38d188456b68092717fc4815f60c668c658af9c9cdcbd0ca08dff463a55b30e4d733230709fed9dc204f34b50f8d96ef42e8bced354b34e1e0d4be5922b01e66081e2bf3ebc1b421ec039d8a9a1a3b8375b50b6a93e3b661cfb9cd9c4df3e4a11f66bf43d906d8173a35a4b8059cea148873519176c39bbae7919b8b663eba21d340bba67b1fc973a51f951d230896d9bb15bac6f8de74cd3072a331a3e58eb5663b0c2fd53c8224721e4c8447cf5e48f940df5220d7131638addcc865138cfe711833fd0ddaebbe7817ba3cfb80b49e0a20eecc735b62f18a78dd87cc681fea664a7f1f390b227682514f26e3377574d1a426fb9ee7096afc85af1ee2aba5c184ccb433e9477f487e1c7b6b721fc96d4e77a579d80fba96c0a31e051f2a8daaae4bc1fbac560b02da749612da9842dc2d98b26073d9c8da678b56f6733cff2f99ae2e3eeb896bd735ac491301896fc4e22f4894792a7992eb85fd0eb1f567f027c6099ef8e5958c33d5230ce1df6fde4c61572ec2d9b038bf2fd17804e8abc953106ea68802970de58372828d1ac8e3c415cfdd9856c32d094a59c7d21d98fa9a619f74ce934b8e869a3bc4bf7401c50a49bbd47c23345679a0a0a288c50f21fdc8f23125041d3234eb18444110a3c33b2ee0bc3d97c51694838d6e3e4a1b6bc4f4b3d971e6905ceafa234038c1a112f6b275b93ca8c8266754f5a8b252991738c87f888278683546bbf721fc905f9ea2a256fd4aae7176b571ac21a69adc12d467f68efd7b4a5fa089ca3d37220e5a91b6277310a8087e757f3de012137dd0132ebb1575344e3718ec002e4dee0e3ecd54940d63adedecc18e8eff6aa170d977995d89fc86d45599641d217a792c8aa6b31fbbcff81279bf9e53238e30267bcca6e3914ec0a3af47218d411614177849a0a9a0f69e53671b85ed68bb868d4a12d05ff1ce99cbd5f127a2406d031801a56a1d76367dd8a528d19597f1b178fa9998a3ffe487a28e507534f86b268d66a539a244304960b845bcf509880feef95920e1a5477f57262d02e0be73aed6ed3b08cb182c1566f85a8aa50ae32567c7fae8d3b7d2be5280159a351720ff1d6b2aec264dc13ebc35c212536dfee72715348165c414b18c910f7106cd549703c657aa368e3727be53f28cd5107324734ea3ac8d4db5b6ecc881f95d15fcc3de7fc8864dcb67ee9a9fd51690530dd1ab8ec698e5a11a592717b44ddc857ec6cbe7ce654c748bf6aec22dc3f9d825b50e1ea98529e1c68d5af402345f3a11e2a2a95ab03e2c685a7a8602d536eea5a94fcfeed423748be354930962c0e5f73633c1f5398cbff893cb4a7a8ae0b1bf33c9003d17e4a84575aafb8bd4c81959fa7d8344876544a6d855e6a0572863dbabe9c87c38cb7b095fcf13fb6cbe2bfb742db6e461357dc0f6026a39869ef6561b623b395b8bb4fde76b907e6330217d55fa38aed8db56010d140b5bac00d4d1fbe03b24b715a6738208095af90386152896ef0d83d873f83a80eabf3e6627eb010bc88e84a5872adea667e1d21c2b24ad0d511931eba25932b919f442a4a2239790b09ccb83133aaaa73caea249db8a3f6ec7af07da275d081cb5fe78215a9cee21db691c30c14edd7910954256dc279880194e3080e537318aaf1da7afb5a6403eaa4ea9f76fbd57ffdb98a1b5ee767a3bcf086373694d20280cb5a8a984e01aaa6e4ab0776680eb527635ffbd2ea802a1197c5068ff1d5da25ac090f75071c9cbbd4492251b7b73eb19b88d36db919923788a124b056ea05de99997df8a4a0a98463e6541611c9b9dea6b3537bdc5f589076391b8ebf2c12d51d75e3edc9b9c3ffce2a22eec5c90c0ccd5c5240d78d4d2f36636d274a1522cf633018f755e9237bfbd9a1918138f191f8f1364613a8efafb09c8a951d984555810f61412d428290244946a09da938d8897954c41066a9a1d9a06bf646d8418fd14b9173fddc6f332ed7e6a7b8483f297ba84b466b52a8e8b6e9fd2c58f2d86989c358cd39a36c81f12202d47df9a5470ff2e0911b24f8363e258bb5ef3045a1192ab48a46595d024480dd5cdf95a82fc898581af1bb72a7252753871b799ad4385dae56f44bbe20ab345631f973101af845f706b06bd6d77064283c9fa278126ecdc04779a6252b04f08d8a3005d32b45c4fb365070b82080cdb70952881b5b634494a9cdeb5a8e96b3b574e03644268b094179984afd2ae03434c399cc4b45864129e29375e1831d6d104bd4d29de398aeee429be608e02814c95248c54fd6530a6184dcd84b37bf40faf15539e318d8c1f4f123557c5e8d35eb2ef6943731ff2eef208f493ef7c3833a567e0078b7dac14bacb05611edfedbb583fe20e3cf9da254609050276a6b84237fcf0177e3dc29642c8cf242399d674e29ed262da65341935055cc1e7cfc3112989717f9a4da0f4ab384efa26de605fd3b71bc6369ffbce35b7984dca49bb4fb4b968021b04e5f11527e7c759eed0819066c5504925d97a2190dd2f6a00e2c6fc1d7fbb4b7dd71c65c0329f01a1f7a7fe3c3b02c278f010cede3b183890808735b9432f4c7a8f8fefc17c4c6bd2a767a2862a28764ca1475beff5b68069d35359e8e3342d56408190e9de5f72d559c66a485991c3bf9699e9fa5265bd8c0459279ae3676103"
	const stringPubKey2 = "0xde5a0fa74ce6da8e709180dbfa19ac5c98b392f1cdc4cf2135063b3d49c62e72200bda56bee43ef14af37a15317ba16c7ea80647e303926f29bd3006cde5ff5015599e257b82f8f007330ed0561cdef20d6bd4e2d2083f41e8791f48c38e8f9d0dc86850da22baced85a2ec0d6ebbdeaf1b9726f1bd9d5c50cd280363fba33b6022ca450f4df11101334cd0207b0e55e77e835acd7e1947e3db04cf8159a838402127739d80e0a43575e24bfa990addf8facc163c49f0ae35d481008ff47ba8b251507017851809fe135e01b2c0e7669ea4b6c91d66005eba1a111106c6514650b936e3fdf50f01c5dd4ed12bf2c62af57bb629bb7de3ec34321d5160e9ebbf632046571e8665009eda32192715622e687511e3a82b062aa26a9af5e4be6aaf824605eb4037cb237b55f4b5c4be2717dfbf58b96e79beebce4a38709ff69f25ff12097480266206d90bf79b2d28268f5975ef5321235f091e690e5c7161d8a271e7a1351d2c59fe92bfbebd1ed77f0fffa437b3ce3950bd39ed402e0a5845ad9f3e09150646aa8c39e23de1815a81ec739359141f56a9727b4a24ea90faf389d1c88c7155bd3942ec01b2488c9768fa78b887e6900ac35551f9fbb8d7cf41f2ed9063f4532071cbe2f3cc92bf2ca79789545812dd145b483799f1f7ddf8760727fe341fff792fd9cb0d8786d7567f29001351d6149fd803f471868447920a0a1b8b0110bd102d7bf1d2f63f8809a7566016e0c0afdaefc150268d9eca6ebb5c14f8cf95b25ebf2adb6dba4e643fc84cf43488e80e821431089eb0647f446d79ff022b7c17ca89ead28269eddac755f752aaa53477d29a442b06da7ea7b41c94f80bcb4126a4ff46bdc8c557d03fbe3955b21566f52ee79b6da49884978f50ba33081d1a677712482824cfcbcf7db109f602e3b89b644b488b48d92d679cde80fc0fa44cade0654d7877d3c5131df8a0e4a110acb1b543b10f6ff5ed09dc501adbef3195319dfd1a0a02050e3d30a895de1e1dfc6d57f5a2134fef1caab10475f2555f11e39ca4aae7c12438644d1a99ce517dd68f0fc211d964280c86f104521b0bebca17afea922c8468cdbabd9957afa6bcab3e5a0106d6e3d05025c63b2aa20a2c91137524b8e73363250e107c8a9fc8e12c825ce2928e4f19e5252263710b3f2b5d3b66dc3c3a272289145f77ae553a87f68f627d8db260cd0383b9a79bf8a4cb54a1f18ac94123b72f250ee7727cbdc7709c4ace7ee93fc65701157357b07d769855198ab288e181dbeefabce85c47e3185174951f9480b46a9ec99a3b5797e3e8cbb7d84ac243ce5bdc8c366ef337efc22f6c75bd98943dfba3065348acc48bd359cb5b35a4cee30478e69db4c398d01a45f2d4b1d3ff5ec29d4abb2ba922d9a09bd78e29dfb896404cba4d469a1e5d0f359df3f0bfb27fa43f7ba096ea7504374457e23bceed87bda99f7486836d158e7c4a80a4418f1f232e1eb9de9444173ef50e66b332782d319443ca818bfa7c05b644757deec5098cf5eee2e59c8e0147b5173002ea5c5b13d38593c255f9c81b6cb5f7194e3f7093245de8eacee671ffd30f5fba8097478e016b91c576ee303c1c42b14d6ef4f61eb5f6bd5face5f9996a04bb2a4d37ed8561b60d5e838206f00e1b474499bad2b8775280d26785dafe0e352ef579a4d549dd9ad3d422cc0772b216e8f4aa4418a631131faf200cb38781f06ca0c09b166c0f3769ee9b9f54fee39b2fbd81cb507821dfadb713baae8e1918f6214af83f0ac27889195249f2136d0eb8f211af1106e6613604d572534cc38b9894ca706b13d185ba48f05bf9f3a7c771017fbf50fe12c8d47608808af58287964493628c372e7c8f118d5b6befa6205c69d6b56c3634125526e0ade88b72458e21c4cec6e6566af27215f7cec27130e71c2be53bc22160c9f502ea2e17b314aca9a3617c75dbb9b929df779e578e7c9a9349a4b4a0cfb6f617606d8c662e2a0a48244bf9e649afbe148f4980b7b2c7b8f99a9e63c8ffc4f60aa5138370cfd8ea366689f9939dcead5c86022e92abf047c59bc5cd7736c17c5db72e72966f8bc686c8feedf57457401b122ac3353eabbae0a1acae4aedcb2f61c28f183714a7caa2b9370cc89414815123a8448d7cd3a6666fc0bf5acdb48c97f80217fa8b64d31b567e98dac5b9fe3df8b59f4bd7cc64283984e5ec8e1229f2469577b7069b91b88979a0b606d44c56317e2b4afb8fd37979f21ee51939b59c80d8bf0db7b02341ec3f5d1d0aee489953c90e55723078b099a6392ea7a518cee17a3e81fe7f88f257f66957d1226275e8e7bee984f0dac734ee2dc4dcb758ef5fb9c26582f8342fea2a1e04371e31f70ee2f7c061bfab809565663a1082da34aa94d082d3a822b3f305cbe9371752a43065df548c09f02c18e890a6b0094521c42fd3a37941670cb9a792cc58a5d6391999f24cc058b4239ed6b061a8f0ea4209ec95eea2e8559928c7b392f68ca228223b905d5bcc9e1df1186183a6e802818b89b5f8c2ab45f3847e0dc7600ab2e4c5b998ae01230363fc8b7526e89aca5aa61e513562de2e901c1d19f4794547f45ae827e889dd4989bdf7ab79d30090b3b940a05458ad09628a00c7aacc5f203304b7d16ba9f2ec8b786560b150b4982338eccae1550e3741f435dd374bf6bf97125b47afaed258e11a5e99c717bede0b7e4dae8903b260b5d1c817110de252c5aeee89a2b7741885bfc4eb2298f25e24aa50e39a396c654df8ddd12bbc4c376df7ca6d49a42a67c8cd266a9f7e2eeb7f204cce73dfc515aaa6277e51c1a45f827383ba92c3d26b8cc7864eba116b1237dbb2d54254bddd0b12269a19e1cc7361ea128bc71614a2eaec18f2af6c00fb273ce040cd36505d12b4d552fafbbdf242970c09b01e9e57b1f6a0082f525a630fe525d425b1bdb083d9fcbf99e94c6dcf5e451dbc55b33011d6603d3da908861ac1bcc8d8a03332f15eb0fac2d3ae5f4b6c278940b4e55e65d763454b533fefddd7e33ddd2c02c08e529f585d5edf1b3849f1c35f738f13e86b77eeb539edb677bef501fe92a832089a3ea4a050f8c2d7645f82a47247679e89193b0ad26fffdc58987a356761df6442e3146032b6e4065ce55e39b49ad9f5075a71180e4344c366db545be514187e30de902354810371435361fa32d0e926d558b758f72fda2e3060f00a8c79fe78eec3788c5292c649c65700038fd4641b53a642eea8131df342cd3f121e85987c964b25622921bc3fce669bbc0b83501cf9aa5c060b8e9dc7d01ccad96b046d9094773bf2c8a895fba84f30862e7aee9aa1325d4d89c276cd700a8019c062b0e266a7771d39fbce5eecf135cf88e2db967cb11cf43a9328f5252767ba7220e0c0d699e794a8d3f1ed8012cde31129d6db57aa88ae3df880f057dfa69f167d129bce467b0d9c27d6f5547747428776b701d8f0bdaeb99434ecf7c3c336ceddc00c21eac9ac6ae5a4436684c7fb7e88f9d92b4f881f22ff4efaab3ccdb4ed4c4b5ba5c81377f6644616686d971023c18e4e9f8965d26971f26783254f2c3c86842c5ed925bff887cdaf335b819a8b2d387dfaf647f4922c2c781106307ece31408fbfa9fce60a38b1a5e31b52853e9185c5bd025d4a7e55400c8"
	const stringPubKey3 = "0xf9f12afdf8ad794ac49de4474c4845e1e067f559c31611dab9a824b0c98e32410d7a4e94871fb4aa7788e876749495c472a9c1f17f7d517ebbef7a10b62e70ec8c7f3ecadbec1efb297e483f2fee88b459ae8dc2e5e629ab8cc184cce92380d12947a2d7a05ccb59fe61c667386ba4ac5f24a8bb091b197080d5b18c167f97abab73d8fe372a07225e05d3b95187eb91589dfd323199d6b170eab36e5ab783902642c145d2de8d928253d6a1c13c7a47d472137c1d9e99e17f118fac8a6018d8272522072efe2f86d09e233662d5db195df70de33f90a87fca645edd573e920ad49f2ea4b7cba676d734d563597d69c3d3bd714c1f51c9720f61d119b069f99db192af1e3b5766d264f09eb8d2eb714144c5b4301b2a439123647b8869dc4cdf6b1660f99fe7d61c194cf10691b268dc9c7e12ce680e6df8b2b20aad2173fbea6f080039467519ff8adff290dac91b4d80d462cbd9e07728bb35c41ef1b2ee35dc8218e43f38baee8a5fb0df7c09091397e48ed15ba9f459d81f61437d13432fa5545ddb5cb8581c880998aaa83fe978400d7e9f4bb713dd0c934edadab93ebbaa860a2f814b61ffe8ea7aa7143e0a7f17819dace56f96629add9d85120187cfb4fe2039654e404ac2224aa6efa91c36a98cc20e9a0ea95f189daa5c014fcce4ef60380bf96eea7807e528e3d46fa7ceba2acfb906d9d82e8ae019730ad12aa0e8355266934a328adc3de87a60246d7dbb0ccb693f565bc3a9d482679e382ec3bac700fe9f4776fbbe0f513a241caa758d6fade172ee10cb19015f9a2d50577cd3360ae475270c332a05546fa619692c7b1cbbb8f1b7576f42759cf16b300b14fdcef9e656816dee6b78974e8a8ec10b8399961b42f4c0d90c5a8b77221f311b7012a4f7cb91a980e8b1b42a7c53f7881f28ea324b1d92a8f5f2930d2ec97613a6efbb309b78cac5c5c94d46a15bc02df0728b32acab74c9e7dda67d4328ba755a73b7e90c2eb9fd1415aa3b4d4c06d411fb4db07d0b1ab642249c2853eb1b47b912a7c4facf89aa2cd7313fe77249185d72afb91e8a7714a9ae3e0672c7157b3cf1a5387c245f1647b9069f57d320817dbec7cfff38dbb4e819157a216f9de5197a2b7fe2f96466088f4a53c3361ee673ea162f010ad73034058ac9f6211738ea526ecd6245f9ea5ed7a1cf7c1fae6b1bf6c0e85ad2873a036fea1302fa0d4f1d1fc07c8eaa6765d102e6303ad85da6e110deac3b1962504666d7a23327c962dda3909cb9ec804cf5d96ecb1daaf11178c149efd0988cfdd90a60571f763326523082bc21d63b2986c83fd79df09f7bcbfea925eeac120c4cf77a0d3025c7a6b59debca9aac0790c985058bfc22fe85b5c3d58ba2221bed75dca7dbc92d913375aac0bcdf089612ec53fee872b7e216e36d9038fba24e0d5a9a15b482af13656af0269c4da24dd04fc06de6f25394d77e59be374e58b69ccc214301b9cfc420f5b7eb0b17ce31075cdd9cf801f47b59771851c105aa66a0393573b3a430ce1072730fd32e11b438365e24de5541ebbf326fffd75fd0942cb9c895ac1f868f3cd53f938bd47d6733239730e2a6af7428a7026c7da1619046fd3212ff66347e9b60bebc2824cce9fa65a7b1558e90a92504b2e9529e110feb652f7b88cbcea0d21ce061228cd89f8a231991c761d1c75a4a8a8cdc834ae62471ad4013481d543219a807959ddbc0a02b1d6fe204879fd845b23085cf62564e3f0855e7faa76e89d84c247a35840ec68a4d26c8bdabd2a2eaa355af70f8cc47a313cf79e40d0512ffe9362831c60f683f856569fe72f2131d360a5426e049e370e036133ef0ba243a3316866f8a60aa0629ad6efadf1fa842b98312ac3da9cecf21571e6e2c09cafd6dd4407dfd44f9c8f93615e132739477aafd0723df94f772de04d5a718d7bee2e3d0f9b05bb753baf650c48f08e7238db5a8216f361c14754b34413a29bd87fbe95e193df7424ab726dc0abab7624b2f04b6ec14bdbe9d55edc0ea945aadee136dd921c059803e95034d11f46227374339cf888e76b23c3b1ed858d92562c0a50edeffa95875f8fe016e827d86c7ed7be376078ef0a731ac7d300bbab46cff19e16f1e8cc60d9e832993c61d8af3c84bb1c1f87e1f81e1432bcd49e95d86a68bd3f5edbe4e360a21d87b4ff42fee9b66898835b5220c7cf2e641c0faafa7721f2bcf8e378fe758e39078131442efea3a021aef4d3f502d600799935a32d57ac26409aa1ef7b2bbde3e841ef0bdf5752f46b3e6dbd9ea738e334c71bf91493d60c606ed969c3adf9c145056547e57323eee5ce2ca545914fb405ddb0c2bfffa9f5699b5c809e6fb375012436290920b61ceec85cfe958830ac9a4957930d319b8f4ff441c9ecedb4520a6af3c9b299cbd554dc8c06816778a9f1f46d16dd8d3bee33e70d176fe2eb62709e9d9a7e6e8bfaa8afe9da4fa2b4e4f4eb1a626cc72ec9edeb5cbd9eefc66766be17237330fbf3f5496c22a6e0800f77192655e9de77088d5b6e92c14680511c57c2ded999762402144f9bf8f42ef36f137ecd9ab7264ccdfd64cd753924e4ca4b18956d4d87074479d7d33b6da9221b45d77d53047bd12459de0405323961059bcf301272e94f02be817ec2958636a48386468398a660f470043bee88d386da643b36926821a602e6c97d7135bdbd4e676adc6609e1d42b74e02355d9c30ccdce5236289dfc337b6e41e2cde7fad87b08c21bb8c281e0cf0bb4e30149bdd7fb875fc2e4bb915d3047d5c54bc12a3dc10a8966cbf2ce79d2ddc1258f228805b53ab23e7fd27e0bd07ca874fa60952a78028fac40ee7d9849fd596f540aba0bb944b084a6937ce4b14cfad5ba314ec99e4deedb02e702150f1c05a74498dbabc59588df23970bfb4ab1747cfa723b959f0c30725ec1bcb9de49af58d77615a272e27899858402fbb39ab9a7d6aaf8f476d1700b32dda9216a112cf9acac411c08f26c505643bdac3bbe712a4e3624fbdd0c7dbe7a3b5380851f8577e3ca32c9247442b3db5a3781c8d0fd8678c5e078bf3b40fc1ab0cec7fafaba9d0c277f5bbf0a98c2f1041c19ca018e8c0c98680ec3078417dd373f639c6485fe94e43b291ea75bb19b4d723bcbc68955898a8be6d05d6dbd8997933fad1643822677fa149c4625193350857eb158ef46f1c18dcc762b6cbbdd36db22d58aa3a1e4ad6f38428234b55cff033a6d816a0d355bac6137d44176a67d48dc41ffcbe6c3d6cc2bf1da0bb089f6795364990ea362cbb764053b7c331cdf7f6e815e28a9f286f746bc9135d326c1401761af048cd78867db3871a1be9f5f95d06bfe29c978c1bd3ab92d144e01bd610be5fcce61f4ddcc337016888a660788ceb13d9992f5f90ef9e7c39cefdb7ef50a2d2487ab0438834c418a008d493976ace39704dee0876ce6cdcbba9dd75e8ef4cbbe629b5b83265cb7667701cc5a313cca16016033c7275a1e9c8cdd08a5ac2af96bd6572a9b0a0fff4e4a969a3735f7f9b8ae4a84ea363aeee9bc48c955cf355b564bc3576577ea63f70d6a3dfb7be1314df2dad6a6e0f650d063976a73cad194bc3bb29ce8146856974fe876b56d8bda7dff3ba6efce260ad5607ca71b1fef567f40911c764e91e427e610fdfdb"
	const stringPubKey4 = "0x71e773997d15d08ee63184ec3817d748a3015af4b9ac41d7f3c8229f6d2a5e2dbb00ca6deab48ff41986f48a51813e44e4c2f42ea62e0cfb2b3d19eba9e200797e81da8b737f51a5be320c3a34f4d95cd180029397d7f6e991b4aaef4641f6302847fca78fef350a929c780ea14c1cbd612f36a246f01a8879018154b6dee8150ce0c8e36d4f6937debe01951a4a10dce78bc2758bcb18026afdde3f10a8efc7acd90473e2127fffbdc87daa79ecb85d5fd504a14dae449e123f94bd39cbcb81afbe98a878e4393a77a863f2845dffcc796010dbb5865b8424ad8b4bb7286a4e44a09c560abf27b03d281c4da539316d7c94b270f7e75e24f5f4392cd91280c0ac2b19a61754681b58c7b61cddbb911d053b3841265ac6268bc2d3a7a6f99785fb79e18bbc6080f0fc23a53e3445abcf9e4accdc9c6b9aad0d38e0237d52484edf7b6b95e4a660256e7e35e2717c33027b18849a424b1d5411dd4c00f704fce3ecddc59bafee0a1a997eb364eef64f206f17da2faaac76cef8d3aba40b0fc31dbeafff5e0e8b4e6513c97e36d9af2c7fa8914f67607f8e8ea7cc4b2edc7ffb1b070bbb983882aab5178b557b6fdf368dcb5534059febe5e6f9138ca64f211d92b6ec8d40079b30799b1afaeb5d1284d040c3d8fc9dc08e19718e07a2671d88768375d35629e46859996c6ba4dcddaa5296f40b3a51ad2f8dfe920c29ffa37c07105647438818ce6d520cf72192d89b080beffbbde3de356c50f376430a3f09da9a7fae03d157eec865e734fcbd86d8a622523f0185d35232d8ca9005946a7c4c44dc5e8eff5662793b25ccdb996cc412a1f944479aea48ac93755d467b0aaf9cdb0db5d9fa48a3c4055f5b373fce954428324c61cac2d29c599a8ac73f2743bfb7a9738e38a1b3875fd88c1e9e6bd388abff56b0c6c27ac7498c96f9001d925793a9f2ebe361718935b30b078b18f1327c811f2ffdeb50813827a8fbd2a959c2b69a2820418eb2dd48e77e6aa44e08c40cae9a6fcb40beba878389a1854fa7c692bbf0a0dc55493bbd01b65ceb1ae9df60cbd71801c99b9e942ab84b772d34db5a93d42f4b7357967ea814a6e2497800ef4f044038462672607d627674da187db8358140d44d453856342605765f27f7e7287ea29ddf568cfcfa2f2cab0c0d59e41f6ed424350e4bc4c851dbeb8495cd2ab8ffa02b72b8c00e6f715bb0da669d8fcdcec661d2dffcbe570fa710faad0ac6d6be83013b085d97bf180524f7593d5df1158207330b2ed05345962e058811caf884f01c8ccdc308233695a3778782ae70085af4baaa445a690ac214beeb9eded222f3f6ba235ca859205d7412d61dd04c06b285912ea1c05a2f1ed92f01339b4df184caa16f156d216e52ec5c0e142934fdb00c4525140522f11aa361c76bfdc9734192b65e47dec8d9bb078611a0bc57b8bfe7e80a815116c9b99885064ccdca9639f02f8f7d4d02a4e1ffce8208186f3b73ff5335ea4e1c281eaad2435ea79ebb553bd7551484eba1cc6b4c1a4214dbd5e65ce71051145280d5b00efe7c9f3ca455ea1cac9ff29ed108a38bd9e6d4d827b890ce3e281bb900f280cfd636733fb6a361ea992f7b7b5e11f3e4cec60c45659ee3851bccae5e2cfbb53d2ce8f40e1fddf679288cbde8c0e54b4da5e3583da19a0ee58dba08f31a3fcc3f2ff8cdfb3bf59ebef2491a795b742b5728324bc81b62b1dc6265b3761e10da219a27b79ccb64ad4d06ae1349d4cf01ad0d3d70fda9bd364701e977c0452474637c4c2239819092d880a4a29149c71fb5bb01caeb685ff9e335d0d4c6cbfcd54a167c673beea69245b5a36d8e203e83e55b7d21c8c3686e4196920046933bf1e1af0d3135dce9f4697877a2ecf24927af21ea9816dcf013d61de47a6563bbc69752973788aafa51eba7cb596cc093366cf7b90a8ccfcfb7932d73e29852f2bde597957f7bd49add7631b0df5a72012dd87bc54c257f3c54b81d624997b6b2baa3e69aea13c903aad3a00dbefd86c638c228d67cecceeebd0d3211a950e12158963a69efbbf09d277ef793866727e3533f05e14614e2fa5f82619ab72d4807d6ca4348bf5ec53b1cfa7a2cf2b8e6b335def8c7db803f2c80c0f7f82ad0ecf54508d3df6e42e5635a4ded69f1aeea768b5763c8d8393e2527335f7b9e3ce582b8008c1fbec401ad088f0e5aabebf2cacc78481211d4968ae291e560b97cede70e78bbb3bcaf4ef4f42ebe1cbe54d48a23798242cfe4f9a6e49879bb662e88c4fe19b248c729a431db11a1e7fa869eb4aed486071252a510edf9f9c4eaf66e5229473203e7a23533461f6ae388cb5aa6ee7e2570df58b2d12af6140863b0f9e012e8588b03cd0507b8e966bb80df846d87b40d2dcc781df608dea1b3ba140b7874c4b91922cb846c2456be49b9f13fd114eb203593d14e7fda8c8ba4730c7030f4473708c860c3c4cbc1c480936b1545e08e448399489af54aca9d20f8be798276a8e62d7e6d90d71c3fea3337686aee2bc5f4cd51f40d9dbeeb725041c3cfda9d03debaf8c39e80d2c49080c1ac8106f4704d4bc6f498202d8d55ee3a28f08d98169679bab9ccab85a371ccc2a2e244f70e1371924606a89e43414a60e2bc471321f19937c86de10aba1f3dfe48ff3fb376aa7578f51ac054ed110c906ee8fde5798a74a7f363ee63f6947496f18e655406cb8c3c099c33bb5c5ec4169d1b12b68c6742d0166ef775643cf1996c41e6f5d8dc79b45084720a061f7102efc4d9c3851512b0b2694940a9a401c1fd7940b540999324a5b3d30b2fd405a8e23fe218c40bc2b2a741d7ee4fdf25909c27c4f5dbe32fc6c2d2ce67e0e8771e3d8d07223c4efd7e755d688ebc2abe6144da015fcbe8e6e66c3a36c61f6e6526663ff8d14910dc7258a6c25b9ec64e7725b76c7751fbe8c70cf931d0e79cdc210973eb079df19cdea823b5cd64a24383c3ab2ace9c49712b98213fb4b12e63ab0cb5b02efa10ecae2f3433720e7538cd3baddd3a18658c704c58445f37c2c9e88421f5b34c9b0fee22da90fa8e3e35caac100a5f51947e1ce45996360b876549601aa72e742a4eaac58fc1098587ec0e88b906b0b81b20424e9d6a5760b88069a620c00b7ea4380f4c5369a47183f93763b9c00b108f5fb58201024edbd8cfa129ebc8a65c9e3270871160917544d352fae63d48f7718287e679b9d3d5e1f45eded619238685269d5569d7a57ed11d5a060d570acf7b5a1c7803fb685a52b4445e9d2958c02dbad9e1df671f5aa5c8c0395c0ca5b05dc8f3502d5539b2f5f85ea6d147bc5b5fd2be33fa8775f2e52416824f082495026d2ab6b86032b64ec9c31ce8a0d027d6ca291fb1c446ca33bf32f21856c774a2c25cfe2dd6beb6bd92c8c8212ef57d055753016e9e78cce986f5dd37520ee5531d371a58d531723d379b3d62c7135938c3504e0f0375b3383f0bcd3e3cad0f3adca0956053e851bea682016f3e2175e2660085dd60e07b35e4119fb2c08b4ae4716b942e7602ceceec49777c40e4eb0770f3783ab64f0352194ebe949b57be4d91a6f4e0ba424947d2433d0f3e976264c73a052c641ba8ad4a31ad7a9645b9810a7f846306f530b7ba2df20f09f481fd32a7487abb60a1270a6ffe70c0dd0cd6e5"
	const stringPubKey5 = "0xdf2aba758441515a897ff599c4c7b81abfc7ae6a07bc2112e9c142125148345f92d17efa9cabad062c4706ce923fee2e743e3b65e8401de455468d417c73765fa9ab3dbccfeb3bb43875c43acfba5feee144bedcf73cdb8b4e8f010910fa6338f82d5f19e3f2085658aaecf3e8bb7a04995c6a899368888a033cefa0e0e0e1433c4faa452f36531c233c1174cb3d8363e89d82549af5583e976f5ad920a22a1cb4be8b2abaaa15b5598ec97d98d22b8334801584c38524d89fcb8011f61676db93be63e50cd1c8f61eda7c7d94f53ee6bb7bdf46556a28db0fcc073c7b2e01cc9f4223223e816bcf2c65e357aa58b78d3c15b85df9b53a5bf36807ecc35f6bc96f7da823686625404d218bbd5aae408c23e921f1f70eace42a3f76655ab8ede1e8d8fc760fa73eead97264ab76c5fbfd0a2dbc336511193c7a2a14dc77d5b891acbbd182d4daca8b4f325f3c8b0cf3e6f5c518c94675d07bb90524a176ae6d9708ff7ee12547aff2d94644e79c1a65995d53b13da8ba43bf7e35bde2a840ac56b4c390541427300709af80b20a73cf7745ac21fec9ef1479c1f3654db883793330a6b4c6f55a4d71e06a98fee02c3ae3c97abc84c9226cc9e4485342008699eac9277289718d84286ea2d907bb4add7a082cd88fb988fd0fc4eec3f8c0689c330b0f5d176b6cb638645932d3a28edd147dfd7f992d109d69baf20b87c742b571b04901e1bef119291cad10b1c69848e59d415860bd0046ade3f1f6795cb3685c236dc367afb67de6cda76321a17070fa85a8223d231a25c3b51cfca275c37c7777f58276075d083a133baa280dc7688f09a02cd505d7b6cf01fb04677d060e65a9f0c5e2596502fb9d2438100659ea415e53e85ac759a3966e2d20ebed081aafb1e5f292896b567e1c3bb2fe85f0827498cddc8c73137547b0ed7ed3b0995d39365fa0c6bfdb2cc012dafaf8ba1cc86a3960a9b40b1da39f8772930385036dca2fd84857a8c0f0f5bd9cb8c89380942f5b358dd50aec80e8299cfc4e830b851b58ddee1ece666a67bd2b62de6fc36de3997049d71b881e74506d319e0b130d39ce52c867b12d6a9e9b76d991462b0bde65ae429beafe4ac8cb459776b5b82ad2026ff7e3bd7528e2e7d883133680c76960e0d1bcd67e14529f2026fa1e1faaa380fa80c37b4b10af76c0acc8a787668eaf7851471d380d374239fc3f11663fca6d8cdaedb775d7114deb6d3e98501947f3d9a0ba6b09268afb23e0fd97b266d828c639d013f2d7954e4227fa2094b78b34eb1f309c7a1bed2e8e0808708666dfd06c538769bc49181a8b6c2e6cded142f3ad38546dbb768ef14adccb73748c3b1afea62f634de1a2d1e6ec6ec9ef6469327fbe68262ce86e83eec8e2b2f33ed5a077fc02796069a353540691a69c0a53944ea077d26b63d11232c57c32e6d8f4ab3fe4710b69b7537c12aa334bf0878f36f08b5ee42c97d2b22ce780e5c912a55d9b2900896a7621032371cc8adbd891eb4b7c6b6894009946034f423ce35d086fd7e0bd9cf1c850077c6f21d4e320fb8edf4f013d04a265edea803c55f7f2cb539ad77ffe95ce90be6e41899229e2572b9e9ff73c8b3621a296a5382d50c97aea661547cbb2894519348ff08a5cfa1f523e933c2b272b4342283408a0cc5fd8f4c80c80ff89f7659c98ed6cec14e927ea407a7771414db391e4f07b0092e9a36bcec4b83296becb5fb9f21bd5eaa605bbde1f7849a7d2e4be725d5bb5163b915b3e48a97ac0f8ab5a2e9e466ec26e018d6c563d5223adcc4da02bc68b463937198ed1e6140536ae13982f40ff2056dd91d8e2d11130cbaa81e5ef30dcb8042a028d35d42b4dca789d51cd6d923388ca6a7ecd45d4b58b41b5917c3bbe07e373a31c756010dcc36d80630dae6557b8828849d4928fe71a77978ed2a1767e01811baeb82154124f67000c360f0c52a6b3199f63647bc919ea175ca6112a6641a9a8961c23b2206cd5f2adf282f01f05866dbeeb00a797932f8d1e196748e27b4fd44691b95cefec0bad89e8999278fa17448d0930e7d530962e41303263acc976cda99bf948ad01b00138db69153cf975d822b8c76b58ec7420de19aec4a52f97bc6516eed8c182af1f278caf9cb932f12548396baeb8f2dca05a891df35033a3d54a0b7c1b6c8e5a8e9a5be730c018687989f9729c99b8548c328a774ad4ec50e2864c7e9d86d1b2097e7eb70c9936b47102ef77c6d6af59bda6cbf7bd7a7d18915a7233fe4cee4ca9c3ae3d73b227a06788c2cebf1f7020f62800dc950cf1afdaac0d5515280f34e193f75d43be0f557e5d80ff643f3ceace4ec8eec34cd8ad0f522e96479cdc9e96091ff980414523e1e211f0b519545f3126817107b784eb9863620616b7e92cd482a49d22ec256ce73cfefa0dee8efaaeef2aa503fcbefe0fa331ebd679f00094e5a9ef790010f7cadeb5ecb2b562510372100a0469e6b435911ddd478cdf23d3f572f3faba84fbdd5141c4964cac4b9c77a3f28f8b4299a591cff6046808145ce96ea294c61b9a2bd4a9f8b05a4c1050e2b997630bfcd6f6ccdf07bce87a61989fe853b4dcaa04c18c33a86962936983be71e8d67a9746e633da2bbccbd91cd3c7b855265f30b1094c9014b252341c3995bb026711ac4e02201c1df20c9eef63922eef8608197ea12d1800fea8661f10c46b4c5ac9ecae1c9d760f2019c711a2c34c4292e785b939a688a8825c85acdc72ca9bb02212a494d497f130df4b115f5fb85886d247a54fc10bbb439ff9903edd5f2db0d3e4a2e5d352e7e56a07d81e88d9fb25177ccea4cff8bd0a8c1cb3c34b73bde2490af0edd76c243ed802b6d39bf52476bb8c09c3fce1d59f57fbed2ce08ccc60df93acdfdd3751afe83594b239c4238431c942c9633499e7c76cec60834030da5eb1ebae7e7d7ed8246805312cf222090553be193a60caee500fabb79a62e31381021771e0ee2b47d4348532b1c8643558ef14ef6e5007cbbd37325a59c764195ef3c46239c5161bce0c35945c7cd9bb96372ea187705bbfba2f6e386a36aa66d6ca22bae1e0a5361e4799188d1f1500b81a3fb40512f13a270c6cf5b04ca7051695866985d2fd79b7f64c761f59ef358f46676c7d98bd000e529ed6f141cd106415a87403c47640a13a661b1b510e71d690e1c23eca80895769061bd82155c31f01d12acc525de49bc417a9c7ddd129d64e5e73e67f4ac92edfc8259cc2d7f02d079b7cade4d2de591e0f1e1b06fd3a9f57d41d91fbc1870c20e9acfe59ca710e36c50b7fae20289bcfb97e7bfb3c01f29c4c0bb3e88bb0989f17cc39a4af8ebbd84dc04d294c90ca44859e5f27c0b5f8aa3149485a0d4f1d219d937dab398070995153d4561e1d02c13684705969fdb2d52b4b4aeb67ecc0867d86b806b5bb9c8841236eef4a6ee028e1dc393cb00ddf75099b911d57e901dc511171e86ad286e052c4f0029529df75e33b723a00ed97162b8a4b05e12310f1e405116d7e744e8e9b149fd442e1349b1457d7549387f122cf139f822bdd0e3e598978c860a8f2a00fa8292c8063d22f03d70ecdde3722930fb51dbdab7df879853bb44fb20741ca3056e301369751c95659d88cc26502e3cafd4d1fcc49edbd4920a22e24a4d6a09c"
	const stringPubKey6 = "0x245711d371e237b0fe3db281aebb26e5ca9f626ab9e028840f42dadee4ee8e75eae3c1ac99fafcd7118f33eb065321503b3262da36dd996128213e32002d8fa58d4444fea1814576e512f184a1f406e6746e8087a552afba6f8867adac365912e1c346fdd4168f67a208fa8d9f83e338211628d89f767de85b570745503cdf39bd22cc6133a2a21003d41db3e75875877041c19bcea9c7cd47b6155858aa690af62c2f7627bebbea22b55637e698e9f3c37d154ee4b588a769021f91c7173f5b7fa96557be779fa5b8ed8e63416072c2427a54b07825628a0c3b4bbfb819d5d0557f7aa2a3822db5aba9106029e65da97805eabb8a95f7c1c1f022cad1d631c844187c8c284a9292d20dd048972431bb6fd762fce859f52ce7765db924d1bac9dbf6a599f9ff1f04e5c8a78f55f3659aec4e46d98ec406c95e4dbd4cbee8ae65ee4c7c2c2a51052656633c10fca723da9f65c3a90ffd600ef2792e8203205820daa8e227b0cb44213f504b38db61f20c22c7379b51d1be49cafe8508cdf210792d9c2c2f039ba501ee12c982797f1e459f7454232a67fc4f0a0afb59628cf8c3661e3d6d78d8540aeef35c178ec42943f7bb5e5c7eae236070212ec6fe637923a87f6fdb8df37b105a06e1d803ffc1ad209909ebf3425d7eab398f24587db319505157e88ec5f84fcaad3f4773a634f4683ac99f3a34b54b223f5e57c5c1512e71517806971e488608dc868ef84a2339ccff452dfef8e8450e35027bb6a9fdb24c43830ec1232ab36c9a11f17c94e6e5d5901685c65fdebe95901263841bea574c73423e06ff14cd7787a833f85133fe6e48ad0e10e861959a5a30313304b6216728924628e332f2d1668e71b2f76d9b236fe3b287a0b5466122e6a0663e211c7895577581e55674f0e05a221aabc420e1a668af1c32aeac5dee222af2e06475f31f29cd2f7c4bdad720bb45ca4c69021dc2c9c958a203dff3d3b20172d808e4eab05edf568a1e340e83bc1d151e5d6641d59e592ddb0dc05c953ef422adcc87ba556183544917d703a19a604aca06e0120b01bb8dbc52aa6b4a84204dac30978cdc2c26b2a3b1ae8276383ed4a57c6b265ced016a4382a98773d6b2af8300430e0f02a6ae3a055e7371f36e96c4a4ac69a4340f736c68f2605891f5c7f2e548e4deb61cc65118610a6de5912c6f87301dda8eac00885403f15bffa376451e6646d86c107bd02a02d0362ded01b3ceded1d7d3b73d6684ff906df53d4e9945a5cad7805eb6c57627d99d6f1090e7d36c9474dea9fbbabfe53847abf6c94a74a289711e459fc9c01313052ba34b9bdeb0b8eb7d2c6968a7738804c1256fa161e81185550a9ade10060a7112a223d177853d357eb94635e741ae4163e0e93625ba3d03044531d224b24a136c0f3e837942df53a19306f94b404026cc1803663f1928b451d41490497a685d8d69bf48e130238cffd1b6f821a509f357e8e3d787581edee889dc15bea50350bb55b7e10b0d3934bd5d566e73c334dfbcb9d521f668f160d0305bba7e24f915730824a9c694bfd127b3a1eb37cb4c828c8d033f0705fd2d143fd7683cfbd8078d3e31a43b5c2ed11d5535e31ebcac20d8e1dcfbc52fc96603f78d16a91ce9903b2af064417c6b610d4f07b0f9637ab77e41f961a55dc23c218107875a62e7c51106a6aaf02b6f9b4f14c8729ceda1bf87155af52f7658b786a50c1e33aedf4d3465dbf97da791089050edb255070c4e628a333ebc22c2c27a93e18d8546acefe7541969d3d9a8276b6e95d55afe8bfd50a2825f3ac800b083408f9c166482189b804f68b6675f43fa88254b102dde420f82b8577206ae2b232f02920cefcba58d273afe78f7fd54ed69658727c1634d65b6ae42c63953a457b2355b384a2ac1456c76ce9a91fa0ea74535ca037fd462fe0aaf93e0bc2ab805d382578a07af1158f690371ad5c0b2bd368d9f39495826d8bee53f6d80a21255b130af525f2ab7b09c7d9063b597b187507114d7f49d2be5f019179c8cfa3af03d4e0ed899197c295b0c8954a3848cd13ebba7f8083c4afa4f28426451ced3162e5df31dfce82302034e9251fe7b93bd271024a233899700b71a914f9cc9b18c68cb85aedb10243d2f1cb7dd4bb882b88df8bda12e03096a0df132c8bf71cc9b1074c9c439afe92df8c74db0ce703e62375cf4772e673292c6c1ba7b153c08fe61f03d41eee0e49d73487966fb39db370f51d32d089ca801db61679ce97311826e6d2f9d9dbaf9eb57bd22f821d15698aba82ce53881cb5a8f726230af2e413ea70f7de7ea6fa8f16d90fc85fc8b7f567a05f4aa5ea23185de3e0f85488987b0d3a97c76df19844a70576107cc369b0c1789657f35ebc029f2ece6bb1f6a1e55ecf40bd3879b382485ab341c35a28b8f4f48e8ed80078c304ed29b0cb6b3547e76efaee0e1207da0b134fc62e2e7847e6013b5d3192e69028883e57396929eee779aa4a94d020ef13a38e49a9e1daa47ff8a2930d49d4040a6c3829307b7fa87ae0f9a9443cf7bfb16f6fc2794c338e94b32669cbb38a1c27cb053a539a8cd429c7bf7f512f15ba337e04a93a41c0e83cc169527e45f49819a34749ad4ef6febea863e1fe6c1368dcfa1e1b225be60c0b24fda709ddb57cbb249b8e9f2c94a58a6d39135f1152b8ed8d1d110d6078210935ae48c031bd1e027c297fe900b4df3b8c24d4c0c4636948ac1d8acef3fae93e8380537b819d623e553890b13528ab51bf34d902fe33a53527717c9f6ce9422a7dbf7d6dd4fe460f0800bfd2a679d0932428c2a181f0bd6d21670c2d629eb89b913a2356eb7ad4b747e8f4044af96f923bd69fb1c4d3a86afb8995e7774697a6fab3f3696a215476e29c1f3dd718315a0bf135c1f6c59114436ce0298bbd528be428ab6983696a90e4b074f561119fdc80cc26ee778e6a0827468491a10c74e71d43f302d3393c138e8b067ff2d31e227a81c02395f0f17f29112eea8936b6bc70e5fe3d255bafecb32fa3b194e39a49390ef938e7dc5c4394576415f3c0d5b3916340ee2820e072ac5d085de8d6579b122dd3c8785a3c99a9ff1a6507f4ad485f32af3fa7ed18b308496a3cdd42090026edac5bd185759a4dea0a124e94df7668f4238abcf26b5bef9f981f79a4b9154282e06cb1b5647cbe6d6a365291ccd00021f6574e6c1aede70618c37048e8a4f0312710f07435106c52e0754ef823f383e27ab0dc42193b8dcbe4856294c63f26177d33ab8a3bd6625e4089ed64c00c9c137530095bc89de1688b620e60ddc53d34cb008dd88394f30fa99634d3d693c5e7b7365107b0e067f4304d10ef77bf197d99ac8851db645da27019418277ff62da9f57f9a104c235f0e4c361dc3177894a19ad76aaf321918ddbf642ea701adccc1d9dab545d7f6d26a2bd5cad81a614e607ea816c35e316d616a124cc9e82c4f1baec3ea8d379b1767c9a9b41e87a284bc38a9e365daa96baa47ff1ad46d4e34e32e2b3d8c5fb0485eb799d4ffa46144bd2a54652f27877ac20a74c0503867d22dbbc7e5b7c5cfbfabb5ea0b08c97afd90fee0081c33763d54d25ebd0ed7759abc827717064bf68a62f0544163b1241df9f2ed6ab91de3d7f76eb02f7a368fc8f5b8a03080af6c69bae50e"

	pubKey1, err := hexutil.Decode(stringPubKey1)
	require.NoError(t, err)

	pubKey2, err := hexutil.Decode(stringPubKey2)
	require.NoError(t, err)

	pubKey3, err := hexutil.Decode(stringPubKey3)
	require.NoError(t, err)

	pubKey4, err := hexutil.Decode(stringPubKey4)
	require.NoError(t, err)

	pubKey5, err := hexutil.Decode(stringPubKey5)
	require.NoError(t, err)

	pubKey6, err := hexutil.Decode(stringPubKey6)
	require.NoError(t, err)

	testCases := []struct {
		name                        string
		doppelGangerInput           *zondpb.DoppelGangerRequest
		doppelGangerExpectedOutput  *zondpb.DoppelGangerResponse
		getSyncingOutput            *apimiddleware.SyncingResponseJson
		getHeadersOutput            *beacon.GetBlockHeadersResponse
		getStateValidatorsInterface *struct {
			input  []string
			output *beacon.GetValidatorsResponse
		}
		getLivelinessInterfaces []struct {
			inputUrl           string
			inputStringIndexes []string
			output             *validator.GetLivenessResponse
		}
	}{
		{
			name:              "nil input",
			doppelGangerInput: nil,
			doppelGangerExpectedOutput: &zondpb.DoppelGangerResponse{
				Responses: []*zondpb.DoppelGangerResponse_ValidatorResponse{},
			},
		},
		{
			name: "nil validator requests",
			doppelGangerInput: &zondpb.DoppelGangerRequest{
				ValidatorRequests: nil,
			},
			doppelGangerExpectedOutput: &zondpb.DoppelGangerResponse{
				Responses: []*zondpb.DoppelGangerResponse_ValidatorResponse{},
			},
		},
		{
			name: "empty validator requests",
			doppelGangerInput: &zondpb.DoppelGangerRequest{
				ValidatorRequests: []*zondpb.DoppelGangerRequest_ValidatorRequest{},
			},
			doppelGangerExpectedOutput: &zondpb.DoppelGangerResponse{
				Responses: []*zondpb.DoppelGangerResponse_ValidatorResponse{},
			},
		},
		{
			name: "all validators are recent",
			doppelGangerInput: &zondpb.DoppelGangerRequest{
				ValidatorRequests: []*zondpb.DoppelGangerRequest_ValidatorRequest{
					{PublicKey: pubKey1, Epoch: 2},
					{PublicKey: pubKey2, Epoch: 2},
					{PublicKey: pubKey3, Epoch: 2},
					{PublicKey: pubKey4, Epoch: 2},
					{PublicKey: pubKey5, Epoch: 2},
					{PublicKey: pubKey6, Epoch: 2},
				},
			},
			doppelGangerExpectedOutput: &zondpb.DoppelGangerResponse{
				Responses: []*zondpb.DoppelGangerResponse_ValidatorResponse{
					{PublicKey: pubKey1, DuplicateExists: false},
					{PublicKey: pubKey2, DuplicateExists: false},
					{PublicKey: pubKey3, DuplicateExists: false},
					{PublicKey: pubKey4, DuplicateExists: false},
					{PublicKey: pubKey5, DuplicateExists: false},
					{PublicKey: pubKey6, DuplicateExists: false},
				},
			},
			getSyncingOutput: &apimiddleware.SyncingResponseJson{
				Data: &shared.SyncDetails{
					IsSyncing: false,
				},
			},
			getHeadersOutput: &beacon.GetBlockHeadersResponse{
				Data: []*shared.SignedBeaconBlockHeaderContainer{
					{
						Header: &shared.SignedBeaconBlockHeader{
							Message: &shared.BeaconBlockHeader{
								Slot: "395",
							},
						},
					},
				},
			},
		},
		{
			name: "some validators are recent, some not, some duplicates",
			doppelGangerInput: &zondpb.DoppelGangerRequest{
				ValidatorRequests: []*zondpb.DoppelGangerRequest_ValidatorRequest{
					{PublicKey: pubKey1, Epoch: 99}, // recent
					{PublicKey: pubKey2, Epoch: 80}, // not recent - duplicate on previous epoch
					{PublicKey: pubKey3, Epoch: 80}, // not recent - duplicate on current epoch
					{PublicKey: pubKey4, Epoch: 80}, // not recent - duplicate on both previous and current epoch
					{PublicKey: pubKey5, Epoch: 80}, // non existing validator
					{PublicKey: pubKey6, Epoch: 80}, // not recent - not duplicate
				},
			},
			doppelGangerExpectedOutput: &zondpb.DoppelGangerResponse{
				Responses: []*zondpb.DoppelGangerResponse_ValidatorResponse{
					{PublicKey: pubKey1, DuplicateExists: false}, // recent
					{PublicKey: pubKey2, DuplicateExists: true},  // not recent - duplicate on previous epoch
					{PublicKey: pubKey3, DuplicateExists: true},  // not recent - duplicate on current epoch
					{PublicKey: pubKey4, DuplicateExists: true},  // not recent - duplicate on both previous and current epoch
					{PublicKey: pubKey5, DuplicateExists: false}, // non existing validator
					{PublicKey: pubKey6, DuplicateExists: false}, // not recent - not duplicate
				},
			},
			getSyncingOutput: &apimiddleware.SyncingResponseJson{
				Data: &shared.SyncDetails{
					IsSyncing: false,
				},
			},
			getHeadersOutput: &beacon.GetBlockHeadersResponse{
				Data: []*shared.SignedBeaconBlockHeaderContainer{
					{
						Header: &shared.SignedBeaconBlockHeader{
							Message: &shared.BeaconBlockHeader{
								Slot: "12800",
							},
						},
					},
				},
			},
			getStateValidatorsInterface: &struct {
				input  []string
				output *beacon.GetValidatorsResponse
			}{
				input: []string{
					// no stringPubKey1 since recent
					stringPubKey2, // not recent - duplicate on previous epoch
					stringPubKey3, // not recent - duplicate on current epoch
					stringPubKey4, // not recent - duplicate on both previous and current epoch
					stringPubKey5, // non existing validator
					stringPubKey6, // not recent - not duplicate
				},
				output: &beacon.GetValidatorsResponse{
					Data: []*beacon.ValidatorContainer{
						// No "11111" since corresponding validator is recent
						{Index: "22222", Validator: &beacon.Validator{Pubkey: stringPubKey2}}, // not recent - duplicate on previous epoch
						{Index: "33333", Validator: &beacon.Validator{Pubkey: stringPubKey3}}, // not recent - duplicate on current epoch
						{Index: "44444", Validator: &beacon.Validator{Pubkey: stringPubKey4}}, // not recent - duplicate on both previous and current epoch
						// No "55555" sicee corresponding validator does not exist
						{Index: "66666", Validator: &beacon.Validator{Pubkey: stringPubKey6}}, // not recent - not duplicate
					},
				},
			},
			getLivelinessInterfaces: []struct {
				inputUrl           string
				inputStringIndexes []string
				output             *validator.GetLivenessResponse
			}{
				{
					inputUrl: "/zond/v1/validator/liveness/99", // previous epoch
					inputStringIndexes: []string{
						// No "11111" since corresponding validator is recent
						"22222", // not recent - duplicate on previous epoch
						"33333", // not recent - duplicate on current epoch
						"44444", // not recent - duplicate on both previous and current epoch
						// No "55555" since corresponding validator it does not exist
						"66666", // not recent - not duplicate
					},
					output: &validator.GetLivenessResponse{
						Data: []*validator.ValidatorLiveness{
							// No "11111" since corresponding validator is recent
							{Index: "22222", IsLive: true},  // not recent - duplicate on previous epoch
							{Index: "33333", IsLive: false}, // not recent - duplicate on current epoch
							{Index: "44444", IsLive: true},  // not recent - duplicate on both previous and current epoch
							// No "55555" since corresponding validator it does not exist
							{Index: "66666", IsLive: false}, // not recent - not duplicate
						},
					},
				},
				{
					inputUrl: "/zond/v1/validator/liveness/100", // current epoch
					inputStringIndexes: []string{
						// No "11111" since corresponding validator is recent
						"22222", // not recent - duplicate on previous epoch
						"33333", // not recent - duplicate on current epoch
						"44444", // not recent - duplicate on both previous and current epoch
						// No "55555" since corresponding validator it does not exist
						"66666", // not recent - not duplicate
					},
					output: &validator.GetLivenessResponse{
						Data: []*validator.ValidatorLiveness{
							// No "11111" since corresponding validator is recent
							{Index: "22222", IsLive: false}, // not recent - duplicate on previous epoch
							{Index: "33333", IsLive: true},  // not recent - duplicate on current epoch
							{Index: "44444", IsLive: true},  // not recent - duplicate on both previous and current epoch
							// No "55555" since corresponding validator it does not exist
							{Index: "66666", IsLive: false}, // not recent - not duplicate
						},
					},
				},
			},
		},
	}

	for _, testCase := range testCases {
		t.Run(testCase.name, func(t *testing.T) {
			ctrl := gomock.NewController(t)
			defer ctrl.Finish()

			jsonRestHandler := mock.NewMockjsonRestHandler(ctrl)

			ctx := context.Background()

			if testCase.getSyncingOutput != nil {
				syncingResponseJson := apimiddleware.SyncingResponseJson{}

				jsonRestHandler.EXPECT().GetRestJsonResponse(
					ctx,
					syncingEnpoint,
					&syncingResponseJson,
				).Return(
					nil,
					nil,
				).SetArg(
					2,
					*testCase.getSyncingOutput,
				).Times(1)
			}

			if testCase.getHeadersOutput != nil {
				blockHeadersResponseJson := beacon.GetBlockHeadersResponse{}

				jsonRestHandler.EXPECT().GetRestJsonResponse(
					ctx,
					headersEndpoint,
					&blockHeadersResponseJson,
				).Return(
					nil,
					nil,
				).SetArg(
					2,
					*testCase.getHeadersOutput,
				).Times(1)
			}

			if testCase.getLivelinessInterfaces != nil {
				for _, iface := range testCase.getLivelinessInterfaces {
					livenessResponseJson := validator.GetLivenessResponse{}

					marshalledIndexes, err := json.Marshal(iface.inputStringIndexes)
					require.NoError(t, err)

					jsonRestHandler.EXPECT().PostRestJson(
						ctx,
						iface.inputUrl,
						nil,
						bytes.NewBuffer(marshalledIndexes),
						&livenessResponseJson,
					).SetArg(
						4,
						*iface.output,
					).Return(
						nil,
						nil,
					).Times(1)
				}
			}

			stateValidatorsProvider := mock.NewMockstateValidatorsProvider(ctrl)

			if testCase.getStateValidatorsInterface != nil {
				stateValidatorsProvider.EXPECT().GetStateValidators(
					ctx,
					testCase.getStateValidatorsInterface.input,
					nil,
					nil,
				).Return(
					testCase.getStateValidatorsInterface.output,
					nil,
				).Times(1)
			}

			validatorClient := beaconApiValidatorClient{
				jsonRestHandler:         jsonRestHandler,
				stateValidatorsProvider: stateValidatorsProvider,
			}

			doppelGangerActualOutput, err := validatorClient.CheckDoppelGanger(
				context.Background(),
				testCase.doppelGangerInput,
			)

			require.DeepEqual(t, testCase.doppelGangerExpectedOutput, doppelGangerActualOutput)
			assert.NoError(t, err)
		})
	}
}

func TestCheckDoppelGanger_Errors(t *testing.T) {
	const stringPubKey = "0x93cf5af12e73cefb4891e9a1537c3bcd109654ff870ce66d0c70a2b46e93013f5cf5bf23f5da5b8e370c9972e1789642a73667f668b6336afdbb7b767bc705e62791ab483a8879c4c69cdcad9036467a35161597396f7cf20a0f4ae58dc6ccf0f87dd5a2918b369c59b61759e04dc40b50eb7e19cb34e1b89aa4c9760dabc811258469539da1c72d3a930ad20388a01784d3540d7f338511f3d2cc6a64a24d6f5d18a90b3bf789bc561908024e74f77fe971b78872e467a03b2f7336ac95649d4f3a2f2abdce287314e0902bf55ef5805921953335a3ed20ef2034fd6d3387c628b15ff8845a97d84660c41e174f7379306b4d6220ae2f83ecf8d58a9bf54dbce5fdf2e862f077d55f49e17d4ecf677880b6e933907a2a426c7a89a8e1a5b6b9b5531df4666bdf71c8d48cada19e285c6d1c5f906af54d6a9e0234cbb4f500241a6bb16c8011d8c4eee4d04ea02a4149906cecb97f4e8893a2a0e1edaec86272193a15d205f16653b02d2860c0b493b6d74b04db87b13b2fda3485c5cbf3f3022c95f2421ad6f970e21c5373b9e1abdd2921b02ad2925f63b30867a96364951f4dde87a9240c955ceebffc14d85f37f94c6e0d0c132248b0bc5fee084dc6d208686ea4a96643c478c8e9fc56a676487c0c510a769272837012796c215bf93c8d1cbfb0915e8d051f833b8c9095a7519efdc93e64cdc29fcac2cab5bfa67ea6cba8bf7dbb4dfc7023d92699fbd0e2630cc6f14d705333cf3bb7e1c136f6079c769acde4b0a874b53676924598daa35801d77bbabe5641aa780f8ce953e73bc1d7cae6e48fc435cbe8bf9acb9ccb29447c6f76c0291c229d47ffb0f1125cd59354a8885f7615b4695edd070ae41d10034f58ba7c1d1be4b9d1148c4b485c439c5fb1177890b32cb7b59e9f8f7ecc2527c2f1f2c526f505abffb714abbdd3a5479bb9e909072a2d28b301cd629b8f13ca06e924b66defb1fc8a38d188456b68092717fc4815f60c668c658af9c9cdcbd0ca08dff463a55b30e4d733230709fed9dc204f34b50f8d96ef42e8bced354b34e1e0d4be5922b01e66081e2bf3ebc1b421ec039d8a9a1a3b8375b50b6a93e3b661cfb9cd9c4df3e4a11f66bf43d906d8173a35a4b8059cea148873519176c39bbae7919b8b663eba21d340bba67b1fc973a51f951d230896d9bb15bac6f8de74cd3072a331a3e58eb5663b0c2fd53c8224721e4c8447cf5e48f940df5220d7131638addcc865138cfe711833fd0ddaebbe7817ba3cfb80b49e0a20eecc735b62f18a78dd87cc681fea664a7f1f390b227682514f26e3377574d1a426fb9ee7096afc85af1ee2aba5c184ccb433e9477f487e1c7b6b721fc96d4e77a579d80fba96c0a31e051f2a8daaae4bc1fbac560b02da749612da9842dc2d98b26073d9c8da678b56f6733cff2f99ae2e3eeb896bd735ac491301896fc4e22f4894792a7992eb85fd0eb1f567f027c6099ef8e5958c33d5230ce1df6fde4c61572ec2d9b038bf2fd17804e8abc953106ea68802970de58372828d1ac8e3c415cfdd9856c32d094a59c7d21d98fa9a619f74ce934b8e869a3bc4bf7401c50a49bbd47c23345679a0a0a288c50f21fdc8f23125041d3234eb18444110a3c33b2ee0bc3d97c51694838d6e3e4a1b6bc4f4b3d971e6905ceafa234038c1a112f6b275b93ca8c8266754f5a8b252991738c87f888278683546bbf721fc905f9ea2a256fd4aae7176b571ac21a69adc12d467f68efd7b4a5fa089ca3d37220e5a91b6277310a8087e757f3de012137dd0132ebb1575344e3718ec002e4dee0e3ecd54940d63adedecc18e8eff6aa170d977995d89fc86d45599641d217a792c8aa6b31fbbcff81279bf9e53238e30267bcca6e3914ec0a3af47218d411614177849a0a9a0f69e53671b85ed68bb868d4a12d05ff1ce99cbd5f127a2406d031801a56a1d76367dd8a528d19597f1b178fa9998a3ffe487a28e507534f86b268d66a539a244304960b845bcf509880feef95920e1a5477f57262d02e0be73aed6ed3b08cb182c1566f85a8aa50ae32567c7fae8d3b7d2be5280159a351720ff1d6b2aec264dc13ebc35c212536dfee72715348165c414b18c910f7106cd549703c657aa368e3727be53f28cd5107324734ea3ac8d4db5b6ecc881f95d15fcc3de7fc8864dcb67ee9a9fd51690530dd1ab8ec698e5a11a592717b44ddc857ec6cbe7ce654c748bf6aec22dc3f9d825b50e1ea98529e1c68d5af402345f3a11e2a2a95ab03e2c685a7a8602d536eea5a94fcfeed423748be354930962c0e5f73633c1f5398cbff893cb4a7a8ae0b1bf33c9003d17e4a84575aafb8bd4c81959fa7d8344876544a6d855e6a0572863dbabe9c87c38cb7b095fcf13fb6cbe2bfb742db6e461357dc0f6026a39869ef6561b623b395b8bb4fde76b907e6330217d55fa38aed8db56010d140b5bac00d4d1fbe03b24b715a6738208095af90386152896ef0d83d873f83a80eabf3e6627eb010bc88e84a5872adea667e1d21c2b24ad0d511931eba25932b919f442a4a2239790b09ccb83133aaaa73caea249db8a3f6ec7af07da275d081cb5fe78215a9cee21db691c30c14edd7910954256dc279880194e3080e537318aaf1da7afb5a6403eaa4ea9f76fbd57ffdb98a1b5ee767a3bcf086373694d20280cb5a8a984e01aaa6e4ab0776680eb527635ffbd2ea802a1197c5068ff1d5da25ac090f75071c9cbbd4492251b7b73eb19b88d36db919923788a124b056ea05de99997df8a4a0a98463e6541611c9b9dea6b3537bdc5f589076391b8ebf2c12d51d75e3edc9b9c3ffce2a22eec5c90c0ccd5c5240d78d4d2f36636d274a1522cf633018f755e9237bfbd9a1918138f191f8f1364613a8efafb09c8a951d984555810f61412d428290244946a09da938d8897954c41066a9a1d9a06bf646d8418fd14b9173fddc6f332ed7e6a7b8483f297ba84b466b52a8e8b6e9fd2c58f2d86989c358cd39a36c81f12202d47df9a5470ff2e0911b24f8363e258bb5ef3045a1192ab48a46595d024480dd5cdf95a82fc898581af1bb72a7252753871b799ad4385dae56f44bbe20ab345631f973101af845f706b06bd6d77064283c9fa278126ecdc04779a6252b04f08d8a3005d32b45c4fb365070b82080cdb70952881b5b634494a9cdeb5a8e96b3b574e03644268b094179984afd2ae03434c399cc4b45864129e29375e1831d6d104bd4d29de398aeee429be608e02814c95248c54fd6530a6184dcd84b37bf40faf15539e318d8c1f4f123557c5e8d35eb2ef6943731ff2eef208f493ef7c3833a567e0078b7dac14bacb05611edfedbb583fe20e3cf9da254609050276a6b84237fcf0177e3dc29642c8cf242399d674e29ed262da65341935055cc1e7cfc3112989717f9a4da0f4ab384efa26de605fd3b71bc6369ffbce35b7984dca49bb4fb4b968021b04e5f11527e7c759eed0819066c5504925d97a2190dd2f6a00e2c6fc1d7fbb4b7dd71c65c0329f01a1f7a7fe3c3b02c278f010cede3b183890808735b9432f4c7a8f8fefc17c4c6bd2a767a2862a28764ca1475beff5b68069d35359e8e3342d56408190e9de5f72d559c66a485991c3bf9699e9fa5265bd8c0459279ae3676103"
	pubKey, err := hexutil.Decode(stringPubKey)
	require.NoError(t, err)

	standardInputValidatorRequests := []*zondpb.DoppelGangerRequest_ValidatorRequest{
		{
			PublicKey: pubKey,
			Epoch:     1,
		},
	}

	standardGetSyncingOutput := &apimiddleware.SyncingResponseJson{
		Data: &shared.SyncDetails{
			IsSyncing: false,
		},
	}

	standardGetHeadersOutput := &beacon.GetBlockHeadersResponse{
		Data: []*shared.SignedBeaconBlockHeaderContainer{
			{
				Header: &shared.SignedBeaconBlockHeader{
					Message: &shared.BeaconBlockHeader{
						Slot: "4000",
					},
				},
			},
		},
	}

	standardGetStateValidatorsInterface := &struct {
		input  []string
		output *beacon.GetValidatorsResponse
		err    error
	}{
		input: []string{stringPubKey},
		output: &beacon.GetValidatorsResponse{
			Data: []*beacon.ValidatorContainer{
				{
					Index: "42",
					Validator: &beacon.Validator{
						Pubkey: stringPubKey,
					},
				},
			},
		},
	}

	testCases := []struct {
		name                        string
		expectedErrorMessage        string
		inputValidatorRequests      []*zondpb.DoppelGangerRequest_ValidatorRequest
		getSyncingOutput            *apimiddleware.SyncingResponseJson
		getSyncingError             error
		getHeadersOutput            *beacon.GetBlockHeadersResponse
		getHeadersError             error
		getStateValidatorsInterface *struct {
			input  []string
			output *beacon.GetValidatorsResponse
			err    error
		}
		getLivenessInterfaces []struct {
			inputUrl           string
			inputStringIndexes []string
			output             *validator.GetLivenessResponse
			err                error
		}
	}{
		{
			name:                   "nil validatorRequest",
			expectedErrorMessage:   "validator request is nil",
			inputValidatorRequests: []*zondpb.DoppelGangerRequest_ValidatorRequest{nil},
		},
		{
			name:                   "isSyncing on error",
			expectedErrorMessage:   "failed to get beacon node sync status",
			inputValidatorRequests: standardInputValidatorRequests,
			getSyncingOutput:       standardGetSyncingOutput,
			getSyncingError:        errors.New("custom error"),
		},
		{
			name:                   "beacon node not synced",
			expectedErrorMessage:   "beacon node not synced",
			inputValidatorRequests: standardInputValidatorRequests,
			getSyncingOutput: &apimiddleware.SyncingResponseJson{
				Data: &shared.SyncDetails{
					IsSyncing: true,
				},
			},
		},
		{
			name:                   "get headers on error",
			expectedErrorMessage:   "failed to get headers",
			inputValidatorRequests: standardInputValidatorRequests,
			getSyncingOutput:       standardGetSyncingOutput,
			getHeadersOutput:       &beacon.GetBlockHeadersResponse{},
			getHeadersError:        errors.New("custom error"),
		},
		{
			name:                   "cannot parse head slot",
			expectedErrorMessage:   "failed to parse head slot",
			inputValidatorRequests: standardInputValidatorRequests,
			getSyncingOutput:       standardGetSyncingOutput,
			getHeadersOutput: &beacon.GetBlockHeadersResponse{
				Data: []*shared.SignedBeaconBlockHeaderContainer{
					{
						Header: &shared.SignedBeaconBlockHeader{
							Message: &shared.BeaconBlockHeader{
								Slot: "not a slot",
							},
						},
					},
				},
			},
		},
		{
			name:                   "state validators error",
			expectedErrorMessage:   "failed to get state validators",
			inputValidatorRequests: standardInputValidatorRequests,
			getSyncingOutput:       standardGetSyncingOutput,
			getHeadersOutput:       standardGetHeadersOutput,
			getStateValidatorsInterface: &struct {
				input  []string
				output *beacon.GetValidatorsResponse
				err    error
			}{
				input: []string{stringPubKey},
				err:   errors.New("custom error"),
			},
		},
		{
			name:                   "validator container is nil",
			expectedErrorMessage:   "validator container is nil",
			inputValidatorRequests: standardInputValidatorRequests,
			getSyncingOutput:       standardGetSyncingOutput,
			getHeadersOutput:       standardGetHeadersOutput,
			getStateValidatorsInterface: &struct {
				input  []string
				output *beacon.GetValidatorsResponse
				err    error
			}{
				input:  []string{stringPubKey},
				output: &beacon.GetValidatorsResponse{Data: []*beacon.ValidatorContainer{nil}},
			},
		},
		{
			name:                   "validator is nil",
			expectedErrorMessage:   "validator is nil",
			inputValidatorRequests: standardInputValidatorRequests,
			getSyncingOutput:       standardGetSyncingOutput,
			getHeadersOutput:       standardGetHeadersOutput,
			getStateValidatorsInterface: &struct {
				input  []string
				output *beacon.GetValidatorsResponse
				err    error
			}{
				input:  []string{stringPubKey},
				output: &beacon.GetValidatorsResponse{Data: []*beacon.ValidatorContainer{{Validator: nil}}},
			},
		},

		{
			name:                        "previous epoch liveness error",
			expectedErrorMessage:        "failed to get map from validator index to liveness for previous epoch 30",
			inputValidatorRequests:      standardInputValidatorRequests,
			getSyncingOutput:            standardGetSyncingOutput,
			getHeadersOutput:            standardGetHeadersOutput,
			getStateValidatorsInterface: standardGetStateValidatorsInterface,
			getLivenessInterfaces: []struct {
				inputUrl           string
				inputStringIndexes []string
				output             *validator.GetLivenessResponse
				err                error
			}{
				{
					inputUrl:           "/zond/v1/validator/liveness/30",
					inputStringIndexes: []string{"42"},
					output:             &validator.GetLivenessResponse{},
					err:                errors.New("custom error"),
				},
			},
		},
		{
			name:                        "liveness is nil",
			expectedErrorMessage:        "liveness is nil",
			inputValidatorRequests:      standardInputValidatorRequests,
			getSyncingOutput:            standardGetSyncingOutput,
			getHeadersOutput:            standardGetHeadersOutput,
			getStateValidatorsInterface: standardGetStateValidatorsInterface,
			getLivenessInterfaces: []struct {
				inputUrl           string
				inputStringIndexes []string
				output             *validator.GetLivenessResponse
				err                error
			}{
				{
					inputUrl:           "/zond/v1/validator/liveness/30",
					inputStringIndexes: []string{"42"},
					output: &validator.GetLivenessResponse{
						Data: []*validator.ValidatorLiveness{nil},
					},
				},
			},
		},
		{
			name:                        "current epoch liveness error",
			expectedErrorMessage:        "failed to get map from validator index to liveness for current epoch 31",
			inputValidatorRequests:      standardInputValidatorRequests,
			getSyncingOutput:            standardGetSyncingOutput,
			getHeadersOutput:            standardGetHeadersOutput,
			getStateValidatorsInterface: standardGetStateValidatorsInterface,
			getLivenessInterfaces: []struct {
				inputUrl           string
				inputStringIndexes []string
				output             *validator.GetLivenessResponse
				err                error
			}{
				{
					inputUrl:           "/zond/v1/validator/liveness/30",
					inputStringIndexes: []string{"42"},
					output: &validator.GetLivenessResponse{
						Data: []*validator.ValidatorLiveness{},
					},
				},
				{
					inputUrl:           "/zond/v1/validator/liveness/31",
					inputStringIndexes: []string{"42"},
					output:             &validator.GetLivenessResponse{},
					err:                errors.New("custom error"),
				},
			},
		},
		{
			name:                        "wrong validator index for previous epoch",
			expectedErrorMessage:        "failed to retrieve liveness for previous epoch `30` for validator index `42`",
			inputValidatorRequests:      standardInputValidatorRequests,
			getSyncingOutput:            standardGetSyncingOutput,
			getHeadersOutput:            standardGetHeadersOutput,
			getStateValidatorsInterface: standardGetStateValidatorsInterface,
			getLivenessInterfaces: []struct {
				inputUrl           string
				inputStringIndexes []string
				output             *validator.GetLivenessResponse
				err                error
			}{
				{
					inputUrl:           "/zond/v1/validator/liveness/30",
					inputStringIndexes: []string{"42"},
					output: &validator.GetLivenessResponse{
						Data: []*validator.ValidatorLiveness{},
					},
				},
				{
					inputUrl:           "/zond/v1/validator/liveness/31",
					inputStringIndexes: []string{"42"},
					output: &validator.GetLivenessResponse{
						Data: []*validator.ValidatorLiveness{},
					},
				},
			},
		},
		{
			name:                        "wrong validator index for current epoch",
			expectedErrorMessage:        "failed to retrieve liveness for current epoch `31` for validator index `42`",
			inputValidatorRequests:      standardInputValidatorRequests,
			getSyncingOutput:            standardGetSyncingOutput,
			getHeadersOutput:            standardGetHeadersOutput,
			getStateValidatorsInterface: standardGetStateValidatorsInterface,
			getLivenessInterfaces: []struct {
				inputUrl           string
				inputStringIndexes []string
				output             *validator.GetLivenessResponse
				err                error
			}{
				{
					inputUrl:           "/zond/v1/validator/liveness/30",
					inputStringIndexes: []string{"42"},
					output: &validator.GetLivenessResponse{
						Data: []*validator.ValidatorLiveness{
							{
								Index: "42",
							},
						},
					},
				},
				{
					inputUrl:           "/zond/v1/validator/liveness/31",
					inputStringIndexes: []string{"42"},
					output: &validator.GetLivenessResponse{
						Data: []*validator.ValidatorLiveness{},
					},
				},
			},
		},
	}

	for _, testCase := range testCases {
		t.Run(testCase.name, func(t *testing.T) {
			ctrl := gomock.NewController(t)
			defer ctrl.Finish()

			jsonRestHandler := mock.NewMockjsonRestHandler(ctrl)

			ctx := context.Background()

			if testCase.getSyncingOutput != nil {
				syncingResponseJson := apimiddleware.SyncingResponseJson{}

				jsonRestHandler.EXPECT().GetRestJsonResponse(
					ctx,
					syncingEnpoint,
					&syncingResponseJson,
				).Return(
					nil,
					testCase.getSyncingError,
				).SetArg(
					2,
					*testCase.getSyncingOutput,
				).Times(1)
			}

			if testCase.getHeadersOutput != nil {
				blockHeadersResponseJson := beacon.GetBlockHeadersResponse{}

				jsonRestHandler.EXPECT().GetRestJsonResponse(
					ctx,
					headersEndpoint,
					&blockHeadersResponseJson,
				).Return(
					nil,
					testCase.getHeadersError,
				).SetArg(
					2,
					*testCase.getHeadersOutput,
				).Times(1)
			}

			stateValidatorsProvider := mock.NewMockstateValidatorsProvider(ctrl)

			if testCase.getStateValidatorsInterface != nil {
				stateValidatorsProvider.EXPECT().GetStateValidators(
					ctx,
					testCase.getStateValidatorsInterface.input,
					nil,
					nil,
				).Return(
					testCase.getStateValidatorsInterface.output,
					testCase.getStateValidatorsInterface.err,
				).Times(1)
			}

			if testCase.getLivenessInterfaces != nil {
				for _, iface := range testCase.getLivenessInterfaces {
					livenessResponseJson := validator.GetLivenessResponse{}

					marshalledIndexes, err := json.Marshal(iface.inputStringIndexes)
					require.NoError(t, err)

					jsonRestHandler.EXPECT().PostRestJson(
						ctx,
						iface.inputUrl,
						nil,
						bytes.NewBuffer(marshalledIndexes),
						&livenessResponseJson,
					).SetArg(
						4,
						*iface.output,
					).Return(
						nil,
						iface.err,
					).Times(1)
				}
			}

			validatorClient := beaconApiValidatorClient{
				jsonRestHandler:         jsonRestHandler,
				stateValidatorsProvider: stateValidatorsProvider,
			}

			_, err := validatorClient.CheckDoppelGanger(
				context.Background(),
				&zondpb.DoppelGangerRequest{
					ValidatorRequests: testCase.inputValidatorRequests,
				},
			)

			require.ErrorContains(t, testCase.expectedErrorMessage, err)
		})
	}
}
