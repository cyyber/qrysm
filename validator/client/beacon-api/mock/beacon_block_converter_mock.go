// Code generated by MockGen. DO NOT EDIT.
// Source: validator/client/beacon-api/beacon_block_converter.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	apimiddleware "github.com/theQRL/qrysm/v4/beacon-chain/rpc/apimiddleware"
	zond "github.com/theQRL/qrysm/v4/proto/qrysm/v1alpha1"
)

// MockbeaconBlockConverter is a mock of beaconBlockConverter interface.
type MockbeaconBlockConverter struct {
	ctrl     *gomock.Controller
	recorder *MockbeaconBlockConverterMockRecorder
}

// MockbeaconBlockConverterMockRecorder is the mock recorder for MockbeaconBlockConverter.
type MockbeaconBlockConverterMockRecorder struct {
	mock *MockbeaconBlockConverter
}

// NewMockbeaconBlockConverter creates a new mock instance.
func NewMockbeaconBlockConverter(ctrl *gomock.Controller) *MockbeaconBlockConverter {
	mock := &MockbeaconBlockConverter{ctrl: ctrl}
	mock.recorder = &MockbeaconBlockConverterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockbeaconBlockConverter) EXPECT() *MockbeaconBlockConverterMockRecorder {
	return m.recorder
}

// ConvertRESTCapellaBlockToProto mocks base method.
func (m *MockbeaconBlockConverter) ConvertRESTCapellaBlockToProto(block *apimiddleware.BeaconBlockCapellaJson) (*zond.BeaconBlockCapella, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConvertRESTCapellaBlockToProto", block)
	ret0, _ := ret[0].(*zond.BeaconBlockCapella)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConvertRESTCapellaBlockToProto indicates an expected call of ConvertRESTCapellaBlockToProto.
func (mr *MockbeaconBlockConverterMockRecorder) ConvertRESTCapellaBlockToProto(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConvertRESTCapellaBlockToProto", reflect.TypeOf((*MockbeaconBlockConverter)(nil).ConvertRESTCapellaBlockToProto), block)
}