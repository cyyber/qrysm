package history

import (
	"fmt"
	"math"
	"reflect"
	"testing"

	dilithium2 "github.com/theQRL/go-qrllib/dilithium"
	"github.com/theQRL/qrysm/v4/consensus-types/primitives"
)

func Test_uint64FromString(t *testing.T) {
	tests := []struct {
		name    string
		str     string
		want    uint64
		wantErr bool
	}{
		{
			name:    "Overflow uint64 gets MaxUint64",
			str:     "29348902839048290384902839048290384902938748278934789273984728934789273894798273498",
			want:    math.MaxUint64,
			wantErr: true,
		},
		{
			name:    "Max Uint64 works",
			str:     "18446744073709551615",
			want:    math.MaxUint64,
			wantErr: false,
		},
		{
			name:    "Negative number fails",
			str:     "-3",
			wantErr: true,
		},
		{
			name:    "Junk fails",
			str:     "alksjdkjasd",
			wantErr: true,
		},
		{
			name: "0 works",
			str:  "0",
			want: 0,
		},
		{
			name: "Normal uint64 works",
			str:  "23980",
			want: 23980,
		},
	}
	for _, tt := range tests {
		t.Run(fmt.Sprintf("Uint64/%s", tt.name), func(t *testing.T) {
			got, err := Uint64FromString(tt.str)
			if (err != nil) != tt.wantErr {
				t.Errorf("Uint64FromString() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("Uint64FromString() got = %v, want %v", got, tt.want)
			}
		})
		t.Run(fmt.Sprintf("Epoch/%s", tt.name), func(t *testing.T) {
			got, err := EpochFromString(tt.str)
			if (err != nil) != tt.wantErr {
				t.Errorf("EpochFromString() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != primitives.Epoch(tt.want) {
				t.Errorf("EpochFromString() got = %v, want %v", got, tt.want)
			}
		})
		t.Run(fmt.Sprintf("Slot/%s", tt.name), func(t *testing.T) {
			got, err := SlotFromString(tt.str)
			if (err != nil) != tt.wantErr {
				t.Errorf("SlotFromString() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != primitives.Slot(tt.want) {
				t.Errorf("SlotFromString() got = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_pubKeyFromHex(t *testing.T) {
	tests := []struct {
		name    string
		str     string
		want    [dilithium2.CryptoPublicKeyBytes]byte
		wantErr bool
	}{
		{
			name:    "Empty value fails due to wrong length",
			str:     "",
			wantErr: true,
		},
		{
			name:    "Junk fails",
			str:     "alksjdkjasd",
			wantErr: true,
		},
		{
			name:    "Empty value with 0x prefix fails due to wrong length",
			str:     "0x",
			wantErr: true,
		},
		{
			name: "Works with 0x prefix and good public key",
			str:  "0x5905718104a292e3681b9c8b676035dd27bab25412494dfada5d8b3e58b3325f02487e667eb19cdc5c60ed7586a0925601b5886b178fd6a6ccd333b079ff583f9c7bc972075e2a966312a32b46e068096ad5e0415c1af552314bb069a453741ddff199b328fd4b7168e3f20198955567f932c8e35eb185c1a887f47267fab1e729341f3a674cc1dcaec5759266509e7ba6dc1ccce9109ebf6cca1cc59a175132152c69ec7885e74451676d6fe39d4d0fbe3ea8a447f673d169bcc9f738b86a532e3857afbef1254077907b093dd721bef63fdf141f901be1fb0db0a73818dc0f4dd134b205ffb8c81d962e01f6b6473c409f8521a67e3a0a46dbfa1f69f84b5e545f116f24c24b62f654bd1c416de4c10e816d4fd0f4575ff0424b8a734089c8baab02bf2f02ee872838d86c6e2b53766ebacd862729443e0ec3b61b01d12258f0e316cc86a451e94370e4e9f5505012b4f75aa8c82c729a5bfa7834986d35348007f0119c478cca8cfbf29445928f12687c0cd184e4b43a302c24be7bc703e0745319d04c3793b6077a1446a99d1f6dfa4c5a5aed6c7cb912adb5e87aac16609f40a61c8c344df26f9934240bd9854359ac122c386da330975dda5170135d41aa36eaa22e9eb9db4d64da890b8061a3b56b8fbfaffa4d9fa19b1ac015c71d3b75b1c350eec83cda981b3117bb6a05185b25c42beced680f43d0d8dba3ca77078f5ee16442f05aa1fc1a021e4feac81bda494ba3d719152211388af3c235bcfcad9c628aafe851297a73e279743e0e9c07668780c268a2a4030718f837c07c239df884445cde8b43f1bf34860c8bc2dae80b730871568afaf90e73855c3f4c53bb54f4ef738ec927d5d81c263fedf9239f763bc53480fd7d0ec2ee2146f2f37a6c89534e767df3eff4fafcacb096016750bad7aa813e028c1ea57d66630d6bb393435b5681b484d76298ee98509978c72c953b398ba96398f99181f8d23c1571c3143c53d8085ee80d151ca9315f940dbedffa1ea706d0c5380a3e87e5b85cea6cecb70e6471ea1261ad668e6d29599e150e1edfe45ccf369d4cd10130bdbdf76bee4d8ec2e114a1cb5def0f6291576816cb0021ee27f138f18f8d7f7336eb37cb78d1b7f532268f3f6667833c9e1ef1e9e30a1ce0f871ac8b62bdb67d79a1cded3e551df25211a4d841813a7207818e45e8374350bc4326c6e3d7d697562235da450de98518c9a219fc2828588f9b48c5ad76f3fcda306bfcd9c977490626a6c1f070e85fad2670925a8e0c30190279eed62dd853499b387dcb1bafa183cef58414b4533d70e4424a809b5b642b98d371c63a86bad8030dd21bfc4447ced1e0dbc601946af24ac21e1606553e01f4dd4e1edf51e49edf99b643950277c0c7685731f2e026cb65a9e7dfb5de76fa4fc093099983f336ebd46b2ccdcb3c0a6b9458e8790334ab0cef814d4f4f6fd116dc7cd7afa1aeaa9c949582aa39bd08625a4d14cbd7472930d9853be50fce01b893c8c8c433e72fb0f373c2568fda4a85aaae614fd9240182146f16fff090359f070c1e3d1e14bb76d7204e37d44dc32c218e5c831f14f9dd42dc2dbe6ea32e414e0a80f8cafb331529a4b10c92c13dffd10fc70723f4945fc58de7a010ecc57b06b061a26fc2a2b0622e57af1015002365b620a90598d35fcc41e20e04866c8cbec3ca0384412fea1417ebf34ca056cc07d1380fd3515f6dfd83b0f5f684af9db5026f6a1ce8f13f07dc38138adc5143c4d2769bbf711af1778414520f978d32c8b680ea9809ebe56ef07e022395200779b29be805e844f1125d45fce968eab0353151093030effadfa64850741c5a44cef6542e2ddf2623bd5664943be7bee596bd4a0217c131db8979a75be352d54a6b0b07090c454c059eb00ac1f96801a6c81cc79fed36b73ce9e7cc3eb401711c699b14a976985699dff78102aef52bd14c916e34ea1849997c0384c00eedcc0cd1c7bb88cea84de092305c8ffd99ae89a2b819b398f280040806e0945f7725bbed1bf510bd84c1e02910598d4c5370280eb50be213ce9e4d5f77fd644079ca167fa41d38d9fc5ce68d5d867b06dfaec59b25860244ab3a0fcb171d094384080d4b3c2b9ab8b24f86cfe5a8aafb0b38014770e9b83ed304329cb8879f8917575407dd4e4eb8ce20737a22d26ff21b581820b071d8c0e7623a4053d2deba11a5051038801854ae5078b254afe7f1373bea098fb40156a7ffaa211bb274312efdb4641ad280945cc3ca65aea344778ae5de436771d03407cce7b886655b7bd16ae715119f0ab10eb3ac9026db976bd47029f7c52122e54ca8217b4a18e48510efc4a5f6d33b9849399b8a6c5ed086ffc4ca7d514811fd5631ef7f0bc2b5d0328bb1874e4b8a20f4bc4c0945e2784be3c3edfd4fa673fb4a169966a1a603e72039165bfd6306ee6cc7debf89cb383776d49885a9fc7277683568baa8b315374d886ab5d105c1fcf933c30b70b5b9237033d49727de082b04b71e054006e90fb676e2579a88d2a3c5c727b77099a021f9623536a4bf0ae9c66fe398d4467e8c2fe3163222ef5684604dc28be212a5b3d6c0b745b65cfc6bad98fd73f646911e70aee10ec93e7666645b35c88488217d21028fd76a2878635e178c71762f8772f71e861c200e069c7195ce88161f8dec8f347aca1b682b0c996f67b364d4db40cf01fc4371dc5df2fb7bb7a949c26a6fd62fbd68862a39d799bbfb0ae3868796f5b068c4b0170474aadbdd68949f8ef7fa467b94e19157d97dd0f786ed9fed8ce266c191e55c754dc3e395b6988e7ce448b3c9271adca134f998c455903b47ad7faf9db3793d0ef87766c62db02c7133beff7dde9393db656b01d92e116f3d9844f3f0c460e646dc24fe1038420fa3673a4020ac8a33476b857f51f75d63dc35ee6fa0b5211075812f6dbd3ea5eb252a5d8ae72235ff2099a351d3ad7e7402d31b47a7a7699c95ffadcb4fcdefbcf30d480602d7c49f0f3d4faf0760744b74332a8c0360da5493bcd3f3251ab9d830a1f5330f23108fac43b88858478f42a83834a798a4dabc78b9a8a5b02510e4d9c75bfaac7f3aa88f6e7effe5d4e956686a916e606df84162e76079eb267bbccd16e63a299ccafde0193630986a29bd00742ddd45ffdc3ff52e86f9b3a5f90d2aade81849d595d24ab2985fea142d3eae068bf9860b96dca10ce5ce6d96a54d5cc3713164af47b7fad7738730dd2464eac72599bbaca89d773e464d796e9698356cf910cb07c64ff5cc95aee0e15a185c512df65e3a962eb00bdc73229ffaa2b8fa6a29372cfd360c5c2e3e8f4352211044e29b5153d9ec53df60a7c54a23f5084b394e9153b6a170010c114e1020eda33640551959f3a48b92cf5aec37ffe23e1a5c8aee1dd95a61a4a511e26e08fa6c379dfdedd94f62caf1d18269b960c37cdd12a46399599d28c8da98a4cefcf93a325fcaec20ca77c5271bafd68b021ff30fdab56ff2bcec09a6edb010166713fcf6292072325044575e045fbb7d61084d540b94a27557bd21abff8cd32766cb23164f4119774c357870d5335cbb6dd5c598eb00d0625b1b539ba329368c4983c2acbfa7537ccf537d4deeb4527ae0446192e69638e91841e24696e08177decdba09e416ae98",
			want: [dilithium2.CryptoPublicKeyBytes]byte{89, 5, 113, 129, 4, 162, 146, 227, 104, 27, 156, 139, 103, 96, 53, 221, 39, 186, 178, 84, 18, 73, 77, 250, 218, 93, 139, 62, 88, 179, 50, 95, 2, 72, 126, 102, 126, 177, 156, 220, 92, 96, 237, 117, 134, 160, 146, 86, 1, 181, 136, 107, 23, 143, 214, 166, 204, 211, 51, 176, 121, 255, 88, 63, 156, 123, 201, 114, 7, 94, 42, 150, 99, 18, 163, 43, 70, 224, 104, 9, 106, 213, 224, 65, 92, 26, 245, 82, 49, 75, 176, 105, 164, 83, 116, 29, 223, 241, 153, 179, 40, 253, 75, 113, 104, 227, 242, 1, 152, 149, 85, 103, 249, 50, 200, 227, 94, 177, 133, 193, 168, 135, 244, 114, 103, 250, 177, 231, 41, 52, 31, 58, 103, 76, 193, 220, 174, 197, 117, 146, 102, 80, 158, 123, 166, 220, 28, 204, 233, 16, 158, 191, 108, 202, 28, 197, 154, 23, 81, 50, 21, 44, 105, 236, 120, 133, 231, 68, 81, 103, 109, 111, 227, 157, 77, 15, 190, 62, 168, 164, 71, 246, 115, 209, 105, 188, 201, 247, 56, 184, 106, 83, 46, 56, 87, 175, 190, 241, 37, 64, 119, 144, 123, 9, 61, 215, 33, 190, 246, 63, 223, 20, 31, 144, 27, 225, 251, 13, 176, 167, 56, 24, 220, 15, 77, 209, 52, 178, 5, 255, 184, 200, 29, 150, 46, 1, 246, 182, 71, 60, 64, 159, 133, 33, 166, 126, 58, 10, 70, 219, 250, 31, 105, 248, 75, 94, 84, 95, 17, 111, 36, 194, 75, 98, 246, 84, 189, 28, 65, 109, 228, 193, 14, 129, 109, 79, 208, 244, 87, 95, 240, 66, 75, 138, 115, 64, 137, 200, 186, 171, 2, 191, 47, 2, 238, 135, 40, 56, 216, 108, 110, 43, 83, 118, 110, 186, 205, 134, 39, 41, 68, 62, 14, 195, 182, 27, 1, 209, 34, 88, 240, 227, 22, 204, 134, 164, 81, 233, 67, 112, 228, 233, 245, 80, 80, 18, 180, 247, 90, 168, 200, 44, 114, 154, 91, 250, 120, 52, 152, 109, 53, 52, 128, 7, 240, 17, 156, 71, 140, 202, 140, 251, 242, 148, 69, 146, 143, 18, 104, 124, 12, 209, 132, 228, 180, 58, 48, 44, 36, 190, 123, 199, 3, 224, 116, 83, 25, 208, 76, 55, 147, 182, 7, 122, 20, 70, 169, 157, 31, 109, 250, 76, 90, 90, 237, 108, 124, 185, 18, 173, 181, 232, 122, 172, 22, 96, 159, 64, 166, 28, 140, 52, 77, 242, 111, 153, 52, 36, 11, 217, 133, 67, 89, 172, 18, 44, 56, 109, 163, 48, 151, 93, 218, 81, 112, 19, 93, 65, 170, 54, 234, 162, 46, 158, 185, 219, 77, 100, 218, 137, 11, 128, 97, 163, 181, 107, 143, 191, 175, 250, 77, 159, 161, 155, 26, 192, 21, 199, 29, 59, 117, 177, 195, 80, 238, 200, 60, 218, 152, 27, 49, 23, 187, 106, 5, 24, 91, 37, 196, 43, 236, 237, 104, 15, 67, 208, 216, 219, 163, 202, 119, 7, 143, 94, 225, 100, 66, 240, 90, 161, 252, 26, 2, 30, 79, 234, 200, 27, 218, 73, 75, 163, 215, 25, 21, 34, 17, 56, 138, 243, 194, 53, 188, 252, 173, 156, 98, 138, 175, 232, 81, 41, 122, 115, 226, 121, 116, 62, 14, 156, 7, 102, 135, 128, 194, 104, 162, 164, 3, 7, 24, 248, 55, 192, 124, 35, 157, 248, 132, 68, 92, 222, 139, 67, 241, 191, 52, 134, 12, 139, 194, 218, 232, 11, 115, 8, 113, 86, 138, 250, 249, 14, 115, 133, 92, 63, 76, 83, 187, 84, 244, 239, 115, 142, 201, 39, 213, 216, 28, 38, 63, 237, 249, 35, 159, 118, 59, 197, 52, 128, 253, 125, 14, 194, 238, 33, 70, 242, 243, 122, 108, 137, 83, 78, 118, 125, 243, 239, 244, 250, 252, 172, 176, 150, 1, 103, 80, 186, 215, 170, 129, 62, 2, 140, 30, 165, 125, 102, 99, 13, 107, 179, 147, 67, 91, 86, 129, 180, 132, 215, 98, 152, 238, 152, 80, 153, 120, 199, 44, 149, 59, 57, 139, 169, 99, 152, 249, 145, 129, 248, 210, 60, 21, 113, 195, 20, 60, 83, 216, 8, 94, 232, 13, 21, 28, 169, 49, 95, 148, 13, 190, 223, 250, 30, 167, 6, 208, 197, 56, 10, 62, 135, 229, 184, 92, 234, 108, 236, 183, 14, 100, 113, 234, 18, 97, 173, 102, 142, 109, 41, 89, 158, 21, 14, 30, 223, 228, 92, 207, 54, 157, 76, 209, 1, 48, 189, 189, 247, 107, 238, 77, 142, 194, 225, 20, 161, 203, 93, 239, 15, 98, 145, 87, 104, 22, 203, 0, 33, 238, 39, 241, 56, 241, 143, 141, 127, 115, 54, 235, 55, 203, 120, 209, 183, 245, 50, 38, 143, 63, 102, 103, 131, 60, 158, 30, 241, 233, 227, 10, 28, 224, 248, 113, 172, 139, 98, 189, 182, 125, 121, 161, 205, 237, 62, 85, 29, 242, 82, 17, 164, 216, 65, 129, 58, 114, 7, 129, 142, 69, 232, 55, 67, 80, 188, 67, 38, 198, 227, 215, 214, 151, 86, 34, 53, 218, 69, 13, 233, 133, 24, 201, 162, 25, 252, 40, 40, 88, 143, 155, 72, 197, 173, 118, 243, 252, 218, 48, 107, 252, 217, 201, 119, 73, 6, 38, 166, 193, 240, 112, 232, 95, 173, 38, 112, 146, 90, 142, 12, 48, 25, 2, 121, 238, 214, 45, 216, 83, 73, 155, 56, 125, 203, 27, 175, 161, 131, 206, 245, 132, 20, 180, 83, 61, 112, 228, 66, 74, 128, 155, 91, 100, 43, 152, 211, 113, 198, 58, 134, 186, 216, 3, 13, 210, 27, 252, 68, 71, 206, 209, 224, 219, 198, 1, 148, 106, 242, 74, 194, 30, 22, 6, 85, 62, 1, 244, 221, 78, 30, 223, 81, 228, 158, 223, 153, 182, 67, 149, 2, 119, 192, 199, 104, 87, 49, 242, 224, 38, 203, 101, 169, 231, 223, 181, 222, 118, 250, 79, 192, 147, 9, 153, 131, 243, 54, 235, 212, 107, 44, 205, 203, 60, 10, 107, 148, 88, 232, 121, 3, 52, 171, 12, 239, 129, 77, 79, 79, 111, 209, 22, 220, 124, 215, 175, 161, 174, 170, 156, 148, 149, 130, 170, 57, 189, 8, 98, 90, 77, 20, 203, 215, 71, 41, 48, 217, 133, 59, 229, 15, 206, 1, 184, 147, 200, 200, 196, 51, 231, 47, 176, 243, 115, 194, 86, 143, 218, 74, 133, 170, 174, 97, 79, 217, 36, 1, 130, 20, 111, 22, 255, 240, 144, 53, 159, 7, 12, 30, 61, 30, 20, 187, 118, 215, 32, 78, 55, 212, 77, 195, 44, 33, 142, 92, 131, 31, 20, 249, 221, 66, 220, 45, 190, 110, 163, 46, 65, 78, 10, 128, 248, 202, 251, 51, 21, 41, 164, 177, 12, 146, 193, 61, 255, 209, 15, 199, 7, 35, 244, 148, 95, 197, 141, 231, 160, 16, 236, 197, 123, 6, 176, 97, 162, 111, 194, 162, 176, 98, 46, 87, 175, 16, 21, 0, 35, 101, 182, 32, 169, 5, 152, 211, 95, 204, 65, 226, 14, 4, 134, 108, 140, 190, 195, 202, 3, 132, 65, 47, 234, 20, 23, 235, 243, 76, 160, 86, 204, 7, 209, 56, 15, 211, 81, 95, 109, 253, 131, 176, 245, 246, 132, 175, 157, 181, 2, 111, 106, 28, 232, 241, 63, 7, 220, 56, 19, 138, 220, 81, 67, 196, 210, 118, 155, 191, 113, 26, 241, 119, 132, 20, 82, 15, 151, 141, 50, 200, 182, 128, 234, 152, 9, 235, 229, 110, 240, 126, 2, 35, 149, 32, 7, 121, 178, 155, 232, 5, 232, 68, 241, 18, 93, 69, 252, 233, 104, 234, 176, 53, 49, 81, 9, 48, 48, 239, 250, 223, 166, 72, 80, 116, 28, 90, 68, 206, 246, 84, 46, 45, 223, 38, 35, 189, 86, 100, 148, 59, 231, 190, 229, 150, 189, 74, 2, 23, 193, 49, 219, 137, 121, 167, 91, 227, 82, 213, 74, 107, 11, 7, 9, 12, 69, 76, 5, 158, 176, 10, 193, 249, 104, 1, 166, 200, 28, 199, 159, 237, 54, 183, 60, 233, 231, 204, 62, 180, 1, 113, 28, 105, 155, 20, 169, 118, 152, 86, 153, 223, 247, 129, 2, 174, 245, 43, 209, 76, 145, 110, 52, 234, 24, 73, 153, 124, 3, 132, 192, 14, 237, 204, 12, 209, 199, 187, 136, 206, 168, 77, 224, 146, 48, 92, 143, 253, 153, 174, 137, 162, 184, 25, 179, 152, 242, 128, 4, 8, 6, 224, 148, 95, 119, 37, 187, 237, 27, 245, 16, 189, 132, 193, 224, 41, 16, 89, 141, 76, 83, 112, 40, 14, 181, 11, 226, 19, 206, 158, 77, 95, 119, 253, 100, 64, 121, 202, 22, 127, 164, 29, 56, 217, 252, 92, 230, 141, 93, 134, 123, 6, 223, 174, 197, 155, 37, 134, 2, 68, 171, 58, 15, 203, 23, 29, 9, 67, 132, 8, 13, 75, 60, 43, 154, 184, 178, 79, 134, 207, 229, 168, 170, 251, 11, 56, 1, 71, 112, 233, 184, 62, 211, 4, 50, 156, 184, 135, 159, 137, 23, 87, 84, 7, 221, 78, 78, 184, 206, 32, 115, 122, 34, 210, 111, 242, 27, 88, 24, 32, 176, 113, 216, 192, 231, 98, 58, 64, 83, 210, 222, 186, 17, 165, 5, 16, 56, 128, 24, 84, 174, 80, 120, 178, 84, 175, 231, 241, 55, 59, 234, 9, 143, 180, 1, 86, 167, 255, 170, 33, 27, 178, 116, 49, 46, 253, 180, 100, 26, 210, 128, 148, 92, 195, 202, 101, 174, 163, 68, 119, 138, 229, 222, 67, 103, 113, 208, 52, 7, 204, 231, 184, 134, 101, 91, 123, 209, 106, 231, 21, 17, 159, 10, 177, 14, 179, 172, 144, 38, 219, 151, 107, 212, 112, 41, 247, 197, 33, 34, 229, 76, 168, 33, 123, 74, 24, 228, 133, 16, 239, 196, 165, 246, 211, 59, 152, 73, 57, 155, 138, 108, 94, 208, 134, 255, 196, 202, 125, 81, 72, 17, 253, 86, 49, 239, 127, 11, 194, 181, 208, 50, 139, 177, 135, 78, 75, 138, 32, 244, 188, 76, 9, 69, 226, 120, 75, 227, 195, 237, 253, 79, 166, 115, 251, 74, 22, 153, 102, 161, 166, 3, 231, 32, 57, 22, 91, 253, 99, 6, 238, 108, 199, 222, 191, 137, 203, 56, 55, 118, 212, 152, 133, 169, 252, 114, 119, 104, 53, 104, 186, 168, 179, 21, 55, 77, 136, 106, 181, 209, 5, 193, 252, 249, 51, 195, 11, 112, 181, 185, 35, 112, 51, 212, 151, 39, 222, 8, 43, 4, 183, 30, 5, 64, 6, 233, 15, 182, 118, 226, 87, 154, 136, 210, 163, 197, 199, 39, 183, 112, 153, 160, 33, 249, 98, 53, 54, 164, 191, 10, 233, 198, 111, 227, 152, 212, 70, 126, 140, 47, 227, 22, 50, 34, 239, 86, 132, 96, 77, 194, 139, 226, 18, 165, 179, 214, 192, 183, 69, 182, 92, 252, 107, 173, 152, 253, 115, 246, 70, 145, 30, 112, 174, 225, 14, 201, 62, 118, 102, 100, 91, 53, 200, 132, 136, 33, 125, 33, 2, 143, 215, 106, 40, 120, 99, 94, 23, 140, 113, 118, 47, 135, 114, 247, 30, 134, 28, 32, 14, 6, 156, 113, 149, 206, 136, 22, 31, 141, 236, 143, 52, 122, 202, 27, 104, 43, 12, 153, 111, 103, 179, 100, 212, 219, 64, 207, 1, 252, 67, 113, 220, 93, 242, 251, 123, 183, 169, 73, 194, 106, 111, 214, 47, 189, 104, 134, 42, 57, 215, 153, 187, 251, 10, 227, 134, 135, 150, 245, 176, 104, 196, 176, 23, 4, 116, 170, 219, 221, 104, 148, 159, 142, 247, 250, 70, 123, 148, 225, 145, 87, 217, 125, 208, 247, 134, 237, 159, 237, 140, 226, 102, 193, 145, 229, 92, 117, 77, 195, 227, 149, 182, 152, 142, 124, 228, 72, 179, 201, 39, 26, 220, 161, 52, 249, 152, 196, 85, 144, 59, 71, 173, 127, 175, 157, 179, 121, 61, 14, 248, 119, 102, 198, 45, 176, 44, 113, 51, 190, 255, 125, 222, 147, 147, 219, 101, 107, 1, 217, 46, 17, 111, 61, 152, 68, 243, 240, 196, 96, 230, 70, 220, 36, 254, 16, 56, 66, 15, 163, 103, 58, 64, 32, 172, 138, 51, 71, 107, 133, 127, 81, 247, 93, 99, 220, 53, 238, 111, 160, 181, 33, 16, 117, 129, 47, 109, 189, 62, 165, 235, 37, 42, 93, 138, 231, 34, 53, 255, 32, 153, 163, 81, 211, 173, 126, 116, 2, 211, 27, 71, 167, 167, 105, 156, 149, 255, 173, 203, 79, 205, 239, 188, 243, 13, 72, 6, 2, 215, 196, 159, 15, 61, 79, 175, 7, 96, 116, 75, 116, 51, 42, 140, 3, 96, 218, 84, 147, 188, 211, 243, 37, 26, 185, 216, 48, 161, 245, 51, 15, 35, 16, 143, 172, 67, 184, 136, 88, 71, 143, 66, 168, 56, 52, 167, 152, 164, 218, 188, 120, 185, 168, 165, 176, 37, 16, 228, 217, 199, 91, 250, 172, 127, 58, 168, 143, 110, 126, 255, 229, 212, 233, 86, 104, 106, 145, 110, 96, 109, 248, 65, 98, 231, 96, 121, 235, 38, 123, 188, 205, 22, 230, 58, 41, 156, 202, 253, 224, 25, 54, 48, 152, 106, 41, 189, 0, 116, 45, 221, 69, 255, 220, 63, 245, 46, 134, 249, 179, 165, 249, 13, 42, 173, 232, 24, 73, 213, 149, 210, 74, 178, 152, 95, 234, 20, 45, 62, 174, 6, 139, 249, 134, 11, 150, 220, 161, 12, 229, 206, 109, 150, 165, 77, 92, 195, 113, 49, 100, 175, 71, 183, 250, 215, 115, 135, 48, 221, 36, 100, 234, 199, 37, 153, 187, 172, 168, 157, 119, 62, 70, 77, 121, 110, 150, 152, 53, 108, 249, 16, 203, 7, 198, 79, 245, 204, 149, 174, 224, 225, 90, 24, 92, 81, 45, 246, 94, 58, 150, 46, 176, 11, 220, 115, 34, 159, 250, 162, 184, 250, 106, 41, 55, 44, 253, 54, 12, 92, 46, 62, 143, 67, 82, 33, 16, 68, 226, 155, 81, 83, 217, 236, 83, 223, 96, 167, 197, 74, 35, 245, 8, 75, 57, 78, 145, 83, 182, 161, 112, 1, 12, 17, 78, 16, 32, 237, 163, 54, 64, 85, 25, 89, 243, 164, 139, 146, 207, 90, 236, 55, 255, 226, 62, 26, 92, 138, 238, 29, 217, 90, 97, 164, 165, 17, 226, 110, 8, 250, 108, 55, 157, 253, 237, 217, 79, 98, 202, 241, 209, 130, 105, 185, 96, 195, 124, 221, 18, 164, 99, 153, 89, 157, 40, 200, 218, 152, 164, 206, 252, 249, 58, 50, 95, 202, 236, 32, 202, 119, 197, 39, 27, 175, 214, 139, 2, 31, 243, 15, 218, 181, 111, 242, 188, 236, 9, 166, 237, 176, 16, 22, 103, 19, 252, 246, 41, 32, 114, 50, 80, 68, 87, 94, 4, 95, 187, 125, 97, 8, 77, 84, 11, 148, 162, 117, 87, 189, 33, 171, 255, 140, 211, 39, 102, 203, 35, 22, 79, 65, 25, 119, 76, 53, 120, 112, 213, 51, 92, 187, 109, 213, 197, 152, 235, 0, 208, 98, 91, 27, 83, 155, 163, 41, 54, 140, 73, 131, 194, 172, 191, 167, 83, 124, 207, 83, 125, 77, 238, 180, 82, 122, 224, 68, 97, 146, 230, 150, 56, 233, 24, 65, 226, 70, 150, 224, 129, 119, 222, 205, 186, 9, 228, 22, 174, 152},
		},
		{
			name: "Works without 0x prefix and good public key",
			str:  "5905718104a292e3681b9c8b676035dd27bab25412494dfada5d8b3e58b3325f02487e667eb19cdc5c60ed7586a0925601b5886b178fd6a6ccd333b079ff583f9c7bc972075e2a966312a32b46e068096ad5e0415c1af552314bb069a453741ddff199b328fd4b7168e3f20198955567f932c8e35eb185c1a887f47267fab1e729341f3a674cc1dcaec5759266509e7ba6dc1ccce9109ebf6cca1cc59a175132152c69ec7885e74451676d6fe39d4d0fbe3ea8a447f673d169bcc9f738b86a532e3857afbef1254077907b093dd721bef63fdf141f901be1fb0db0a73818dc0f4dd134b205ffb8c81d962e01f6b6473c409f8521a67e3a0a46dbfa1f69f84b5e545f116f24c24b62f654bd1c416de4c10e816d4fd0f4575ff0424b8a734089c8baab02bf2f02ee872838d86c6e2b53766ebacd862729443e0ec3b61b01d12258f0e316cc86a451e94370e4e9f5505012b4f75aa8c82c729a5bfa7834986d35348007f0119c478cca8cfbf29445928f12687c0cd184e4b43a302c24be7bc703e0745319d04c3793b6077a1446a99d1f6dfa4c5a5aed6c7cb912adb5e87aac16609f40a61c8c344df26f9934240bd9854359ac122c386da330975dda5170135d41aa36eaa22e9eb9db4d64da890b8061a3b56b8fbfaffa4d9fa19b1ac015c71d3b75b1c350eec83cda981b3117bb6a05185b25c42beced680f43d0d8dba3ca77078f5ee16442f05aa1fc1a021e4feac81bda494ba3d719152211388af3c235bcfcad9c628aafe851297a73e279743e0e9c07668780c268a2a4030718f837c07c239df884445cde8b43f1bf34860c8bc2dae80b730871568afaf90e73855c3f4c53bb54f4ef738ec927d5d81c263fedf9239f763bc53480fd7d0ec2ee2146f2f37a6c89534e767df3eff4fafcacb096016750bad7aa813e028c1ea57d66630d6bb393435b5681b484d76298ee98509978c72c953b398ba96398f99181f8d23c1571c3143c53d8085ee80d151ca9315f940dbedffa1ea706d0c5380a3e87e5b85cea6cecb70e6471ea1261ad668e6d29599e150e1edfe45ccf369d4cd10130bdbdf76bee4d8ec2e114a1cb5def0f6291576816cb0021ee27f138f18f8d7f7336eb37cb78d1b7f532268f3f6667833c9e1ef1e9e30a1ce0f871ac8b62bdb67d79a1cded3e551df25211a4d841813a7207818e45e8374350bc4326c6e3d7d697562235da450de98518c9a219fc2828588f9b48c5ad76f3fcda306bfcd9c977490626a6c1f070e85fad2670925a8e0c30190279eed62dd853499b387dcb1bafa183cef58414b4533d70e4424a809b5b642b98d371c63a86bad8030dd21bfc4447ced1e0dbc601946af24ac21e1606553e01f4dd4e1edf51e49edf99b643950277c0c7685731f2e026cb65a9e7dfb5de76fa4fc093099983f336ebd46b2ccdcb3c0a6b9458e8790334ab0cef814d4f4f6fd116dc7cd7afa1aeaa9c949582aa39bd08625a4d14cbd7472930d9853be50fce01b893c8c8c433e72fb0f373c2568fda4a85aaae614fd9240182146f16fff090359f070c1e3d1e14bb76d7204e37d44dc32c218e5c831f14f9dd42dc2dbe6ea32e414e0a80f8cafb331529a4b10c92c13dffd10fc70723f4945fc58de7a010ecc57b06b061a26fc2a2b0622e57af1015002365b620a90598d35fcc41e20e04866c8cbec3ca0384412fea1417ebf34ca056cc07d1380fd3515f6dfd83b0f5f684af9db5026f6a1ce8f13f07dc38138adc5143c4d2769bbf711af1778414520f978d32c8b680ea9809ebe56ef07e022395200779b29be805e844f1125d45fce968eab0353151093030effadfa64850741c5a44cef6542e2ddf2623bd5664943be7bee596bd4a0217c131db8979a75be352d54a6b0b07090c454c059eb00ac1f96801a6c81cc79fed36b73ce9e7cc3eb401711c699b14a976985699dff78102aef52bd14c916e34ea1849997c0384c00eedcc0cd1c7bb88cea84de092305c8ffd99ae89a2b819b398f280040806e0945f7725bbed1bf510bd84c1e02910598d4c5370280eb50be213ce9e4d5f77fd644079ca167fa41d38d9fc5ce68d5d867b06dfaec59b25860244ab3a0fcb171d094384080d4b3c2b9ab8b24f86cfe5a8aafb0b38014770e9b83ed304329cb8879f8917575407dd4e4eb8ce20737a22d26ff21b581820b071d8c0e7623a4053d2deba11a5051038801854ae5078b254afe7f1373bea098fb40156a7ffaa211bb274312efdb4641ad280945cc3ca65aea344778ae5de436771d03407cce7b886655b7bd16ae715119f0ab10eb3ac9026db976bd47029f7c52122e54ca8217b4a18e48510efc4a5f6d33b9849399b8a6c5ed086ffc4ca7d514811fd5631ef7f0bc2b5d0328bb1874e4b8a20f4bc4c0945e2784be3c3edfd4fa673fb4a169966a1a603e72039165bfd6306ee6cc7debf89cb383776d49885a9fc7277683568baa8b315374d886ab5d105c1fcf933c30b70b5b9237033d49727de082b04b71e054006e90fb676e2579a88d2a3c5c727b77099a021f9623536a4bf0ae9c66fe398d4467e8c2fe3163222ef5684604dc28be212a5b3d6c0b745b65cfc6bad98fd73f646911e70aee10ec93e7666645b35c88488217d21028fd76a2878635e178c71762f8772f71e861c200e069c7195ce88161f8dec8f347aca1b682b0c996f67b364d4db40cf01fc4371dc5df2fb7bb7a949c26a6fd62fbd68862a39d799bbfb0ae3868796f5b068c4b0170474aadbdd68949f8ef7fa467b94e19157d97dd0f786ed9fed8ce266c191e55c754dc3e395b6988e7ce448b3c9271adca134f998c455903b47ad7faf9db3793d0ef87766c62db02c7133beff7dde9393db656b01d92e116f3d9844f3f0c460e646dc24fe1038420fa3673a4020ac8a33476b857f51f75d63dc35ee6fa0b5211075812f6dbd3ea5eb252a5d8ae72235ff2099a351d3ad7e7402d31b47a7a7699c95ffadcb4fcdefbcf30d480602d7c49f0f3d4faf0760744b74332a8c0360da5493bcd3f3251ab9d830a1f5330f23108fac43b88858478f42a83834a798a4dabc78b9a8a5b02510e4d9c75bfaac7f3aa88f6e7effe5d4e956686a916e606df84162e76079eb267bbccd16e63a299ccafde0193630986a29bd00742ddd45ffdc3ff52e86f9b3a5f90d2aade81849d595d24ab2985fea142d3eae068bf9860b96dca10ce5ce6d96a54d5cc3713164af47b7fad7738730dd2464eac72599bbaca89d773e464d796e9698356cf910cb07c64ff5cc95aee0e15a185c512df65e3a962eb00bdc73229ffaa2b8fa6a29372cfd360c5c2e3e8f4352211044e29b5153d9ec53df60a7c54a23f5084b394e9153b6a170010c114e1020eda33640551959f3a48b92cf5aec37ffe23e1a5c8aee1dd95a61a4a511e26e08fa6c379dfdedd94f62caf1d18269b960c37cdd12a46399599d28c8da98a4cefcf93a325fcaec20ca77c5271bafd68b021ff30fdab56ff2bcec09a6edb010166713fcf6292072325044575e045fbb7d61084d540b94a27557bd21abff8cd32766cb23164f4119774c357870d5335cbb6dd5c598eb00d0625b1b539ba329368c4983c2acbfa7537ccf537d4deeb4527ae0446192e69638e91841e24696e08177decdba09e416ae98",
			want: [dilithium2.CryptoPublicKeyBytes]byte{89, 5, 113, 129, 4, 162, 146, 227, 104, 27, 156, 139, 103, 96, 53, 221, 39, 186, 178, 84, 18, 73, 77, 250, 218, 93, 139, 62, 88, 179, 50, 95, 2, 72, 126, 102, 126, 177, 156, 220, 92, 96, 237, 117, 134, 160, 146, 86, 1, 181, 136, 107, 23, 143, 214, 166, 204, 211, 51, 176, 121, 255, 88, 63, 156, 123, 201, 114, 7, 94, 42, 150, 99, 18, 163, 43, 70, 224, 104, 9, 106, 213, 224, 65, 92, 26, 245, 82, 49, 75, 176, 105, 164, 83, 116, 29, 223, 241, 153, 179, 40, 253, 75, 113, 104, 227, 242, 1, 152, 149, 85, 103, 249, 50, 200, 227, 94, 177, 133, 193, 168, 135, 244, 114, 103, 250, 177, 231, 41, 52, 31, 58, 103, 76, 193, 220, 174, 197, 117, 146, 102, 80, 158, 123, 166, 220, 28, 204, 233, 16, 158, 191, 108, 202, 28, 197, 154, 23, 81, 50, 21, 44, 105, 236, 120, 133, 231, 68, 81, 103, 109, 111, 227, 157, 77, 15, 190, 62, 168, 164, 71, 246, 115, 209, 105, 188, 201, 247, 56, 184, 106, 83, 46, 56, 87, 175, 190, 241, 37, 64, 119, 144, 123, 9, 61, 215, 33, 190, 246, 63, 223, 20, 31, 144, 27, 225, 251, 13, 176, 167, 56, 24, 220, 15, 77, 209, 52, 178, 5, 255, 184, 200, 29, 150, 46, 1, 246, 182, 71, 60, 64, 159, 133, 33, 166, 126, 58, 10, 70, 219, 250, 31, 105, 248, 75, 94, 84, 95, 17, 111, 36, 194, 75, 98, 246, 84, 189, 28, 65, 109, 228, 193, 14, 129, 109, 79, 208, 244, 87, 95, 240, 66, 75, 138, 115, 64, 137, 200, 186, 171, 2, 191, 47, 2, 238, 135, 40, 56, 216, 108, 110, 43, 83, 118, 110, 186, 205, 134, 39, 41, 68, 62, 14, 195, 182, 27, 1, 209, 34, 88, 240, 227, 22, 204, 134, 164, 81, 233, 67, 112, 228, 233, 245, 80, 80, 18, 180, 247, 90, 168, 200, 44, 114, 154, 91, 250, 120, 52, 152, 109, 53, 52, 128, 7, 240, 17, 156, 71, 140, 202, 140, 251, 242, 148, 69, 146, 143, 18, 104, 124, 12, 209, 132, 228, 180, 58, 48, 44, 36, 190, 123, 199, 3, 224, 116, 83, 25, 208, 76, 55, 147, 182, 7, 122, 20, 70, 169, 157, 31, 109, 250, 76, 90, 90, 237, 108, 124, 185, 18, 173, 181, 232, 122, 172, 22, 96, 159, 64, 166, 28, 140, 52, 77, 242, 111, 153, 52, 36, 11, 217, 133, 67, 89, 172, 18, 44, 56, 109, 163, 48, 151, 93, 218, 81, 112, 19, 93, 65, 170, 54, 234, 162, 46, 158, 185, 219, 77, 100, 218, 137, 11, 128, 97, 163, 181, 107, 143, 191, 175, 250, 77, 159, 161, 155, 26, 192, 21, 199, 29, 59, 117, 177, 195, 80, 238, 200, 60, 218, 152, 27, 49, 23, 187, 106, 5, 24, 91, 37, 196, 43, 236, 237, 104, 15, 67, 208, 216, 219, 163, 202, 119, 7, 143, 94, 225, 100, 66, 240, 90, 161, 252, 26, 2, 30, 79, 234, 200, 27, 218, 73, 75, 163, 215, 25, 21, 34, 17, 56, 138, 243, 194, 53, 188, 252, 173, 156, 98, 138, 175, 232, 81, 41, 122, 115, 226, 121, 116, 62, 14, 156, 7, 102, 135, 128, 194, 104, 162, 164, 3, 7, 24, 248, 55, 192, 124, 35, 157, 248, 132, 68, 92, 222, 139, 67, 241, 191, 52, 134, 12, 139, 194, 218, 232, 11, 115, 8, 113, 86, 138, 250, 249, 14, 115, 133, 92, 63, 76, 83, 187, 84, 244, 239, 115, 142, 201, 39, 213, 216, 28, 38, 63, 237, 249, 35, 159, 118, 59, 197, 52, 128, 253, 125, 14, 194, 238, 33, 70, 242, 243, 122, 108, 137, 83, 78, 118, 125, 243, 239, 244, 250, 252, 172, 176, 150, 1, 103, 80, 186, 215, 170, 129, 62, 2, 140, 30, 165, 125, 102, 99, 13, 107, 179, 147, 67, 91, 86, 129, 180, 132, 215, 98, 152, 238, 152, 80, 153, 120, 199, 44, 149, 59, 57, 139, 169, 99, 152, 249, 145, 129, 248, 210, 60, 21, 113, 195, 20, 60, 83, 216, 8, 94, 232, 13, 21, 28, 169, 49, 95, 148, 13, 190, 223, 250, 30, 167, 6, 208, 197, 56, 10, 62, 135, 229, 184, 92, 234, 108, 236, 183, 14, 100, 113, 234, 18, 97, 173, 102, 142, 109, 41, 89, 158, 21, 14, 30, 223, 228, 92, 207, 54, 157, 76, 209, 1, 48, 189, 189, 247, 107, 238, 77, 142, 194, 225, 20, 161, 203, 93, 239, 15, 98, 145, 87, 104, 22, 203, 0, 33, 238, 39, 241, 56, 241, 143, 141, 127, 115, 54, 235, 55, 203, 120, 209, 183, 245, 50, 38, 143, 63, 102, 103, 131, 60, 158, 30, 241, 233, 227, 10, 28, 224, 248, 113, 172, 139, 98, 189, 182, 125, 121, 161, 205, 237, 62, 85, 29, 242, 82, 17, 164, 216, 65, 129, 58, 114, 7, 129, 142, 69, 232, 55, 67, 80, 188, 67, 38, 198, 227, 215, 214, 151, 86, 34, 53, 218, 69, 13, 233, 133, 24, 201, 162, 25, 252, 40, 40, 88, 143, 155, 72, 197, 173, 118, 243, 252, 218, 48, 107, 252, 217, 201, 119, 73, 6, 38, 166, 193, 240, 112, 232, 95, 173, 38, 112, 146, 90, 142, 12, 48, 25, 2, 121, 238, 214, 45, 216, 83, 73, 155, 56, 125, 203, 27, 175, 161, 131, 206, 245, 132, 20, 180, 83, 61, 112, 228, 66, 74, 128, 155, 91, 100, 43, 152, 211, 113, 198, 58, 134, 186, 216, 3, 13, 210, 27, 252, 68, 71, 206, 209, 224, 219, 198, 1, 148, 106, 242, 74, 194, 30, 22, 6, 85, 62, 1, 244, 221, 78, 30, 223, 81, 228, 158, 223, 153, 182, 67, 149, 2, 119, 192, 199, 104, 87, 49, 242, 224, 38, 203, 101, 169, 231, 223, 181, 222, 118, 250, 79, 192, 147, 9, 153, 131, 243, 54, 235, 212, 107, 44, 205, 203, 60, 10, 107, 148, 88, 232, 121, 3, 52, 171, 12, 239, 129, 77, 79, 79, 111, 209, 22, 220, 124, 215, 175, 161, 174, 170, 156, 148, 149, 130, 170, 57, 189, 8, 98, 90, 77, 20, 203, 215, 71, 41, 48, 217, 133, 59, 229, 15, 206, 1, 184, 147, 200, 200, 196, 51, 231, 47, 176, 243, 115, 194, 86, 143, 218, 74, 133, 170, 174, 97, 79, 217, 36, 1, 130, 20, 111, 22, 255, 240, 144, 53, 159, 7, 12, 30, 61, 30, 20, 187, 118, 215, 32, 78, 55, 212, 77, 195, 44, 33, 142, 92, 131, 31, 20, 249, 221, 66, 220, 45, 190, 110, 163, 46, 65, 78, 10, 128, 248, 202, 251, 51, 21, 41, 164, 177, 12, 146, 193, 61, 255, 209, 15, 199, 7, 35, 244, 148, 95, 197, 141, 231, 160, 16, 236, 197, 123, 6, 176, 97, 162, 111, 194, 162, 176, 98, 46, 87, 175, 16, 21, 0, 35, 101, 182, 32, 169, 5, 152, 211, 95, 204, 65, 226, 14, 4, 134, 108, 140, 190, 195, 202, 3, 132, 65, 47, 234, 20, 23, 235, 243, 76, 160, 86, 204, 7, 209, 56, 15, 211, 81, 95, 109, 253, 131, 176, 245, 246, 132, 175, 157, 181, 2, 111, 106, 28, 232, 241, 63, 7, 220, 56, 19, 138, 220, 81, 67, 196, 210, 118, 155, 191, 113, 26, 241, 119, 132, 20, 82, 15, 151, 141, 50, 200, 182, 128, 234, 152, 9, 235, 229, 110, 240, 126, 2, 35, 149, 32, 7, 121, 178, 155, 232, 5, 232, 68, 241, 18, 93, 69, 252, 233, 104, 234, 176, 53, 49, 81, 9, 48, 48, 239, 250, 223, 166, 72, 80, 116, 28, 90, 68, 206, 246, 84, 46, 45, 223, 38, 35, 189, 86, 100, 148, 59, 231, 190, 229, 150, 189, 74, 2, 23, 193, 49, 219, 137, 121, 167, 91, 227, 82, 213, 74, 107, 11, 7, 9, 12, 69, 76, 5, 158, 176, 10, 193, 249, 104, 1, 166, 200, 28, 199, 159, 237, 54, 183, 60, 233, 231, 204, 62, 180, 1, 113, 28, 105, 155, 20, 169, 118, 152, 86, 153, 223, 247, 129, 2, 174, 245, 43, 209, 76, 145, 110, 52, 234, 24, 73, 153, 124, 3, 132, 192, 14, 237, 204, 12, 209, 199, 187, 136, 206, 168, 77, 224, 146, 48, 92, 143, 253, 153, 174, 137, 162, 184, 25, 179, 152, 242, 128, 4, 8, 6, 224, 148, 95, 119, 37, 187, 237, 27, 245, 16, 189, 132, 193, 224, 41, 16, 89, 141, 76, 83, 112, 40, 14, 181, 11, 226, 19, 206, 158, 77, 95, 119, 253, 100, 64, 121, 202, 22, 127, 164, 29, 56, 217, 252, 92, 230, 141, 93, 134, 123, 6, 223, 174, 197, 155, 37, 134, 2, 68, 171, 58, 15, 203, 23, 29, 9, 67, 132, 8, 13, 75, 60, 43, 154, 184, 178, 79, 134, 207, 229, 168, 170, 251, 11, 56, 1, 71, 112, 233, 184, 62, 211, 4, 50, 156, 184, 135, 159, 137, 23, 87, 84, 7, 221, 78, 78, 184, 206, 32, 115, 122, 34, 210, 111, 242, 27, 88, 24, 32, 176, 113, 216, 192, 231, 98, 58, 64, 83, 210, 222, 186, 17, 165, 5, 16, 56, 128, 24, 84, 174, 80, 120, 178, 84, 175, 231, 241, 55, 59, 234, 9, 143, 180, 1, 86, 167, 255, 170, 33, 27, 178, 116, 49, 46, 253, 180, 100, 26, 210, 128, 148, 92, 195, 202, 101, 174, 163, 68, 119, 138, 229, 222, 67, 103, 113, 208, 52, 7, 204, 231, 184, 134, 101, 91, 123, 209, 106, 231, 21, 17, 159, 10, 177, 14, 179, 172, 144, 38, 219, 151, 107, 212, 112, 41, 247, 197, 33, 34, 229, 76, 168, 33, 123, 74, 24, 228, 133, 16, 239, 196, 165, 246, 211, 59, 152, 73, 57, 155, 138, 108, 94, 208, 134, 255, 196, 202, 125, 81, 72, 17, 253, 86, 49, 239, 127, 11, 194, 181, 208, 50, 139, 177, 135, 78, 75, 138, 32, 244, 188, 76, 9, 69, 226, 120, 75, 227, 195, 237, 253, 79, 166, 115, 251, 74, 22, 153, 102, 161, 166, 3, 231, 32, 57, 22, 91, 253, 99, 6, 238, 108, 199, 222, 191, 137, 203, 56, 55, 118, 212, 152, 133, 169, 252, 114, 119, 104, 53, 104, 186, 168, 179, 21, 55, 77, 136, 106, 181, 209, 5, 193, 252, 249, 51, 195, 11, 112, 181, 185, 35, 112, 51, 212, 151, 39, 222, 8, 43, 4, 183, 30, 5, 64, 6, 233, 15, 182, 118, 226, 87, 154, 136, 210, 163, 197, 199, 39, 183, 112, 153, 160, 33, 249, 98, 53, 54, 164, 191, 10, 233, 198, 111, 227, 152, 212, 70, 126, 140, 47, 227, 22, 50, 34, 239, 86, 132, 96, 77, 194, 139, 226, 18, 165, 179, 214, 192, 183, 69, 182, 92, 252, 107, 173, 152, 253, 115, 246, 70, 145, 30, 112, 174, 225, 14, 201, 62, 118, 102, 100, 91, 53, 200, 132, 136, 33, 125, 33, 2, 143, 215, 106, 40, 120, 99, 94, 23, 140, 113, 118, 47, 135, 114, 247, 30, 134, 28, 32, 14, 6, 156, 113, 149, 206, 136, 22, 31, 141, 236, 143, 52, 122, 202, 27, 104, 43, 12, 153, 111, 103, 179, 100, 212, 219, 64, 207, 1, 252, 67, 113, 220, 93, 242, 251, 123, 183, 169, 73, 194, 106, 111, 214, 47, 189, 104, 134, 42, 57, 215, 153, 187, 251, 10, 227, 134, 135, 150, 245, 176, 104, 196, 176, 23, 4, 116, 170, 219, 221, 104, 148, 159, 142, 247, 250, 70, 123, 148, 225, 145, 87, 217, 125, 208, 247, 134, 237, 159, 237, 140, 226, 102, 193, 145, 229, 92, 117, 77, 195, 227, 149, 182, 152, 142, 124, 228, 72, 179, 201, 39, 26, 220, 161, 52, 249, 152, 196, 85, 144, 59, 71, 173, 127, 175, 157, 179, 121, 61, 14, 248, 119, 102, 198, 45, 176, 44, 113, 51, 190, 255, 125, 222, 147, 147, 219, 101, 107, 1, 217, 46, 17, 111, 61, 152, 68, 243, 240, 196, 96, 230, 70, 220, 36, 254, 16, 56, 66, 15, 163, 103, 58, 64, 32, 172, 138, 51, 71, 107, 133, 127, 81, 247, 93, 99, 220, 53, 238, 111, 160, 181, 33, 16, 117, 129, 47, 109, 189, 62, 165, 235, 37, 42, 93, 138, 231, 34, 53, 255, 32, 153, 163, 81, 211, 173, 126, 116, 2, 211, 27, 71, 167, 167, 105, 156, 149, 255, 173, 203, 79, 205, 239, 188, 243, 13, 72, 6, 2, 215, 196, 159, 15, 61, 79, 175, 7, 96, 116, 75, 116, 51, 42, 140, 3, 96, 218, 84, 147, 188, 211, 243, 37, 26, 185, 216, 48, 161, 245, 51, 15, 35, 16, 143, 172, 67, 184, 136, 88, 71, 143, 66, 168, 56, 52, 167, 152, 164, 218, 188, 120, 185, 168, 165, 176, 37, 16, 228, 217, 199, 91, 250, 172, 127, 58, 168, 143, 110, 126, 255, 229, 212, 233, 86, 104, 106, 145, 110, 96, 109, 248, 65, 98, 231, 96, 121, 235, 38, 123, 188, 205, 22, 230, 58, 41, 156, 202, 253, 224, 25, 54, 48, 152, 106, 41, 189, 0, 116, 45, 221, 69, 255, 220, 63, 245, 46, 134, 249, 179, 165, 249, 13, 42, 173, 232, 24, 73, 213, 149, 210, 74, 178, 152, 95, 234, 20, 45, 62, 174, 6, 139, 249, 134, 11, 150, 220, 161, 12, 229, 206, 109, 150, 165, 77, 92, 195, 113, 49, 100, 175, 71, 183, 250, 215, 115, 135, 48, 221, 36, 100, 234, 199, 37, 153, 187, 172, 168, 157, 119, 62, 70, 77, 121, 110, 150, 152, 53, 108, 249, 16, 203, 7, 198, 79, 245, 204, 149, 174, 224, 225, 90, 24, 92, 81, 45, 246, 94, 58, 150, 46, 176, 11, 220, 115, 34, 159, 250, 162, 184, 250, 106, 41, 55, 44, 253, 54, 12, 92, 46, 62, 143, 67, 82, 33, 16, 68, 226, 155, 81, 83, 217, 236, 83, 223, 96, 167, 197, 74, 35, 245, 8, 75, 57, 78, 145, 83, 182, 161, 112, 1, 12, 17, 78, 16, 32, 237, 163, 54, 64, 85, 25, 89, 243, 164, 139, 146, 207, 90, 236, 55, 255, 226, 62, 26, 92, 138, 238, 29, 217, 90, 97, 164, 165, 17, 226, 110, 8, 250, 108, 55, 157, 253, 237, 217, 79, 98, 202, 241, 209, 130, 105, 185, 96, 195, 124, 221, 18, 164, 99, 153, 89, 157, 40, 200, 218, 152, 164, 206, 252, 249, 58, 50, 95, 202, 236, 32, 202, 119, 197, 39, 27, 175, 214, 139, 2, 31, 243, 15, 218, 181, 111, 242, 188, 236, 9, 166, 237, 176, 16, 22, 103, 19, 252, 246, 41, 32, 114, 50, 80, 68, 87, 94, 4, 95, 187, 125, 97, 8, 77, 84, 11, 148, 162, 117, 87, 189, 33, 171, 255, 140, 211, 39, 102, 203, 35, 22, 79, 65, 25, 119, 76, 53, 120, 112, 213, 51, 92, 187, 109, 213, 197, 152, 235, 0, 208, 98, 91, 27, 83, 155, 163, 41, 54, 140, 73, 131, 194, 172, 191, 167, 83, 124, 207, 83, 125, 77, 238, 180, 82, 122, 224, 68, 97, 146, 230, 150, 56, 233, 24, 65, 226, 70, 150, 224, 129, 119, 222, 205, 186, 9, 228, 22, 174, 152},
		},
		{
			name:    "0x prefix and wrong length public key fails",
			str:     "0xb845089a1457f811bfc000588fbb4e713669be8",
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := PubKeyFromHex(tt.str)
			if (err != nil) != tt.wantErr {
				t.Errorf("PubKeyFromHex() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("PubKeyFromHex() got = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_rootFromHex(t *testing.T) {
	tests := []struct {
		name    string
		str     string
		want    [32]byte
		wantErr bool
	}{
		{
			name:    "Empty value fails due to wrong length",
			str:     "",
			wantErr: true,
		},
		{
			name:    "Junk fails",
			str:     "alksjdkjasd",
			wantErr: true,
		},
		{
			name:    "Empty value with 0x prefix fails due to wrong length",
			str:     "0x",
			wantErr: true,
		},
		{
			name: "Works with 0x prefix and good root",
			str:  "0x4ff6f743a43f3b4f95350831aeaf0a122a1a392922c45d804280284a69eb850b",
			want: [32]byte{79, 246, 247, 67, 164, 63, 59, 79, 149, 53, 8, 49, 174, 175, 10, 18, 42, 26, 57, 41, 34, 196, 93, 128, 66, 128, 40, 74, 105, 235, 133, 11},
		},
		{
			name: "Works without 0x prefix and good root",
			str:  "4ff6f743a43f3b4f95350831aeaf0a122a1a392922c45d804280284a69eb850b",
			want: [32]byte{79, 246, 247, 67, 164, 63, 59, 79, 149, 53, 8, 49, 174, 175, 10, 18, 42, 26, 57, 41, 34, 196, 93, 128, 66, 128, 40, 74, 105, 235, 133, 11},
		},
		{
			name:    "0x prefix and wrong length root fails",
			str:     "0xb845089a14",
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := RootFromHex(tt.str)
			if (err != nil) != tt.wantErr {
				t.Errorf("rootFromHex() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("rootFromHex() got = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_rootToHexString(t *testing.T) {
	mockRoot := [32]byte{1}
	tests := []struct {
		name    string
		root    []byte
		want    string
		wantErr bool
	}{
		{
			name:    "nil roots return empty string",
			root:    nil,
			want:    "",
			wantErr: false,
		},
		{
			name:    "len(root) == 0 returns empty string",
			root:    make([]byte, 0),
			want:    "",
			wantErr: false,
		},
		{
			name:    "non-empty root with incorrect size returns error",
			root:    make([]byte, 20),
			want:    "",
			wantErr: true,
		},
		{
			name:    "non-empty root with correct size returns expected value",
			root:    mockRoot[:],
			want:    "0x0100000000000000000000000000000000000000000000000000000000000000",
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := rootToHexString(tt.root)
			if (err != nil) != tt.wantErr {
				t.Errorf("rootToHexString() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("rootToHexString() got = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_pubKeyToHexString(t *testing.T) {
	mockPubKey := [dilithium2.CryptoPublicKeyBytes]byte{1}
	tests := []struct {
		name    string
		pubKey  []byte
		want    string
		wantErr bool
	}{
		{
			name:    "nil pubkey should return error",
			pubKey:  nil,
			want:    "",
			wantErr: true,
		},
		{
			name:    "empty pubkey should return error",
			pubKey:  make([]byte, 0),
			want:    "",
			wantErr: true,
		},
		{
			name:    "wrong length pubkey should return error",
			pubKey:  make([]byte, 3),
			want:    "",
			wantErr: true,
		},
		{
			name:    "non-empty pubkey with correct size returns expected value",
			pubKey:  mockPubKey[:],
			want:    "0x
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := pubKeyToHexString(tt.pubKey)
			if (err != nil) != tt.wantErr {
				t.Errorf("pubKeyToHexString() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if got != tt.want {
				t.Errorf("pubKeyToHexString() got = %v, want %v", got, tt.want)
			}
		})
	}
}
