package internal_test

/*
import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/theQRL/go-zond/common/hexutil"
	"github.com/theQRL/qrysm/v4/testing/require"
	"github.com/theQRL/qrysm/v4/validator/keymanager/remote-web3signer/internal"
)

// mockTransport is the mock Transport object
type mockTransport struct {
	mockResponse *http.Response
}

// RoundTrip is mocking my own implementation of the RoundTripper interface
func (m *mockTransport) RoundTrip(*http.Request) (*http.Response, error) {
	return m.mockResponse, nil
}

func TestNewApiClient(t *testing.T) {
	apiClient, err := internal.NewApiClient("http://localhost:8545")
	assert.NoError(t, err)
	assert.NotNil(t, apiClient)
}

func TestClient_Sign_HappyPath(t *testing.T) {
	jsonSig := ``
	// create a new reader with that JSON
	r := io.NopCloser(bytes.NewReader([]byte(jsonSig)))
	mock := &mockTransport{mockResponse: &http.Response{
		StatusCode: 200,
		Body:       r,
	}}
	u, err := url.Parse("example.com")
	assert.NoError(t, err)
	cl := internal.ApiClient{BaseURL: u, RestClient: &http.Client{Transport: mock}}
	jsonRequest, err := json.Marshal(`{message: "hello"}`)
	assert.NoError(t, err)
	resp, err := cl.Sign(context.Background(), "a2b5aaad9c6efefe7bb9b1243a043404f3362937cfb6b31833929833173f476630ea2cfeb0d9ddf15f97ca8685948820", jsonRequest)
	assert.NotNil(t, resp)
	assert.Nil(t, err)
	assert.EqualValues(t, jsonSig, fmt.Sprintf("%#x", resp.Marshal()))
}

func TestClient_Sign_HappyPath_Jsontype(t *testing.T) {
	sig := ``
	byteval, err := hexutil.Decode(sig)
	require.NoError(t, err)
	sigResp := &internal.SignatureResponse{
		Signature: byteval,
	}
	jsonBytes, err := json.Marshal(sigResp)
	require.NoError(t, err)
	require.NoError(t, err)
	// create a new reader with that JSON
	header := http.Header{}
	header.Set("Content-Type", "application/json;  charset=UTF-8")
	r := io.NopCloser(bytes.NewReader(jsonBytes))
	mock := &mockTransport{mockResponse: &http.Response{
		StatusCode: 200,
		Header:     header,
		Body:       r,
	}}
	u, err := url.Parse("example.com")
	assert.NoError(t, err)
	cl := internal.ApiClient{BaseURL: u, RestClient: &http.Client{Transport: mock}}
	jsonRequest, err := json.Marshal(`{message: "hello"}`)
	assert.NoError(t, err)
	resp, err := cl.Sign(context.Background(), "a2b5aaad9c6efefe7bb9b1243a043404f3362937cfb6b31833929833173f476630ea2cfeb0d9ddf15f97ca8685948820", jsonRequest)
	assert.NotNil(t, resp)
	assert.Nil(t, err)
	assert.EqualValues(t, sig, fmt.Sprintf("%#x", resp.Marshal()))
}

func TestClient_Sign_500(t *testing.T) {
	jsonSig := `0xb3baa751d0a9132cfe93e4e3d5ff9075111100e3789dca219ade5a24d27e19d16b3353149da1833e9b691bb38634e8dc04469be7032132906c927d7e1a49b414730612877bc6b2810c8f202daf793d1ab0d6b5cb21d52f9e52e883859887a5d9`
	// create a new reader with that JSON
	r := io.NopCloser(bytes.NewReader([]byte(jsonSig)))
	mock := &mockTransport{mockResponse: &http.Response{
		StatusCode: 500,
		Body:       r,
	}}
	u, err := url.Parse("example.com")
	assert.NoError(t, err)
	cl := internal.ApiClient{BaseURL: u, RestClient: &http.Client{Transport: mock}}
	jsonRequest, err := json.Marshal(`{message: "hello"}`)
	assert.NoError(t, err)
	resp, err := cl.Sign(context.Background(), "a2b5aaad9c6efefe7bb9b1243a043404f3362937cfb6b31833929833173f476630ea2cfeb0d9ddf15f97ca8685948820", jsonRequest)
	assert.NotNil(t, err)
	assert.Nil(t, resp)

}

func TestClient_Sign_412(t *testing.T) {
	jsonSig := `0xb3baa751d0a9132cfe93e4e3d5ff9075111100e3789dca219ade5a24d27e19d16b3353149da1833e9b691bb38634e8dc04469be7032132906c927d7e1a49b414730612877bc6b2810c8f202daf793d1ab0d6b5cb21d52f9e52e883859887a5d9`
	// create a new reader with that JSON
	r := io.NopCloser(bytes.NewReader([]byte(jsonSig)))
	mock := &mockTransport{mockResponse: &http.Response{
		StatusCode: 412,
		Body:       r,
	}}
	u, err := url.Parse("example.com")
	assert.NoError(t, err)
	cl := internal.ApiClient{BaseURL: u, RestClient: &http.Client{Transport: mock}}
	jsonRequest, err := json.Marshal(`{message: "hello"}`)
	assert.NoError(t, err)
	resp, err := cl.Sign(context.Background(), "a2b5aaad9c6efefe7bb9b1243a043404f3362937cfb6b31833929833173f476630ea2cfeb0d9ddf15f97ca8685948820", jsonRequest)
	assert.NotNil(t, err)
	assert.Nil(t, resp)

}

func TestClient_Sign_400(t *testing.T) {
	jsonSig := `0xb3baa751d0a9132cfe93e4e3d5ff9075111100e3789dca219ade5a24d27e19d16b3353149da1833e9b691bb38634e8dc04469be7032132906c927d7e1a49b414730612877bc6b2810c8f202daf793d1ab0d6b5cb21d52f9e52e883859887a5d9`
	// create a new reader with that JSON
	r := io.NopCloser(bytes.NewReader([]byte(jsonSig)))
	mock := &mockTransport{mockResponse: &http.Response{
		StatusCode: 400,
		Body:       r,
	}}
	u, err := url.Parse("example.com")
	assert.NoError(t, err)
	cl := internal.ApiClient{BaseURL: u, RestClient: &http.Client{Transport: mock}}
	jsonRequest, err := json.Marshal(`{message: "hello"}`)
	assert.NoError(t, err)
	resp, err := cl.Sign(context.Background(), "a2b5aaad9c6efefe7bb9b1243a043404f3362937cfb6b31833929833173f476630ea2cfeb0d9ddf15f97ca8685948820", jsonRequest)
	assert.NotNil(t, err)
	assert.Nil(t, resp)

}

func TestClient_GetPublicKeys_HappyPath(t *testing.T) {
	// public keys are returned hex encoded with 0x
	j := `["0xddc6cb97f9bd1e4b05e4f59c3f5696ad8f84d00dfb3187431dbdd37cb58d6e52a2b1e219a22ba42a8c690d81b6e0d21d20115d8a59a63cc9e904b2dc70e0deca7169e377bd5229b6984e244c00b9c0777878abc545166a227f8b000e1e6578f1813f58759e61568eb6707b3cc972d043b710353f5ab9d4819eb4a6ddf3e83d19b8274aee44c89318613d4f4130ef542c8a33cbaad3403943ff0f0ca55308bc0934032b081e58d7f33ee4ae02ddb06e7a8dd20294ad74dba735e9ab69f0b6e2c3b9d9540196136613c749a0fa57131e06aaaf0e27372e1d2a090d19f2e475fb281fee2f2f95ab9267fa9746a8163d975efddb8b1d8ddd142c6229e8daedbbae314f097ea2777199be2d737964ee8e6464545925d20c85b8e53b5ce4f4290e7f2c1d4384f3a0873164c23b22fef75dfc1ec1855ebbb3732ffbc9282bb8e292ba87bfb9c5dc99f581368edaa29161296b8584208d652661e89ca6ea9445fb34f6aae87f4f2f24afe3934b33357f5fce6edea2692a2937b126e8fb451d06286dbc32182fad11fd919a48cacfde6a73f282248bafc8d19406045e0f670d1c71e847751bd3395e5bb8a89196a78275c38a2aa976fbb44390354a6e3bc07bbb3b19f083f88f69c4af5db2a8377139dda8a7c9023e8439c2ae719b2682372149fc1ddc0b381c471963c0a78530d0d1144241612df9c7a119e9ce5ae105e85bdbe2d325a7ec6a5e79d7ff6de20bbfec57803ebf652988bfa6a300e8e7eb6e8cb966d72b028c109ccac8de887dd89a2c615766ad56cbf6c47677c015a3e4098c77c10530c18851b1ba261063e9eb844cb57ab9f7e24d47c179929cc541367805ad7d89248e2d9ade76536990345540fec27ef7e503840aa55454c569fb663f913d83120a2796f68daab97846fc1b70578d490a32b5c44b907ce7a61cc8ed5203cc9eaf8dcc0e54cbeb703bc64ae608cad8d3e0471f7d02127ff5bb188947c980b17886057ceece0f79901195f61f267a2c21586266bdf07bb537914f4b46dd6599e155e18a7c6542e0d86332f94c91123665db9a50a8619bb0a0e59349b44edf23e3598c95a323b4fab26a41630feda54a649b86acb4e0f207e242b860c1ec6e6830eb80fba85daaeeae598fc647a22a539bb3b5904fd5e75120c686304041ddc87f2613b8a8db302655b0dfcee897d51c724fdc1844c3b7adc615fa585aa49448433c40aa0f6c7e49c881599ee070fb5b7a4fed52bb1902e67e28ed28c0e927e4138858b0d6edb251fdbedc30871e47c176f9b22e89165dc5ff32512425bd179d58c2dc4b1d4e6781ec385ac95dac9918529b9f888ecaa63f87d7bdca1c660fdc91132ddeec3653232c3b5c10ced8ef8ba36c7bb3e4d41fa54fabd89729ca2a27e3fd677c5ec2b2abd8425ca5354df964cb659c08605f6bcbc307693ae65624f2deee4a142a3d2128fa06daf7a02b96bb023277867bd129d17b1c4e2ac39b5a14f200f116ab0cccf75468e8912621f0c280e9d59d8fd3039f5445d5242c5d247e25a59b0ab431385264fdd951cf7d05dc5811e900d575a0b18ed06eee22cd226deb120f3f6fc3841e06fca87821abab292ead5630abd4e5d43df82513e962c90890c17eb6ebafb7fa06954ae9e13a240f429f4c8c9631aed21a1dfc8f1ac1930bb2e5859ff20853ee20774d7bdd90295d9e22c093fc4e61fa3d4cf86cd005636b0826669b854d8339895a1ad78253a3908f28d59b16d6d219aa77f184d1860e3bd0b988a10bb37f64113182c1b47d8f6b2a6e9684276f331c35cf4c7b83452b8cb369525215511e4d556bd049e9bce3eb152a8d387229e105a0f95eb8c4d3ba2b8957248f61072b46d1ad7da121a9b1a2e2b6302426ef7cf209a91dbc3c22af49cd6bcc11b9dd067158dccb1b477751ce211d0f5568ad206bf32c74a5bb4ed111332e15263e96083911138d4e2d1474a7ac7fe0989e1f54c7c0d7aee1b53e916fb83b4b75a4f91fb364e1da950c94726de023060fa078863b1d5da47f0b43a5067cfe2048d377f73460691b93fe85525c4bd1b5a3e67330fcf81e6d45d2a10ad774b96c1ebf1e2705f3ba37ea60d68a17f2e6058ad0e6968d81e8822b5c8c62b724a724b27990c37043e96de2ffaec8e3d33372de8b8d73e976b42f03f77dff021c8d896822da0135ce9891ae1cdc53a6022947e8fd2611e5050d4486995f4ee89d2efb31ef3fbd59b11fd36b1d94e5b1f141db9b745f163926b91810f914c43a5d3b9142d4acee69571b794902176df68bc773bb22a9467dd47f0a52f35461b1f8fc690e0d40ea8c2270f9b24ac486074ff4bcec94e883fb80b24b0a9c1f0d2c08fab49cae64ea5f55e21a6a706c7ab5a6e58ba1e5f1dc6e0f2c198de08f2d0e29e4d32496f044878861999a6fc2a341f017f1e0d27e2766aca1d2ac8ed8a687c3cf30f2e30794dfd92501ff3a39915080f0623b5f75d458439c3e7695acbfd45e07247c018bb80205c80079f81bd176c900243b9ab69a2dbc8921199445c2d9db106065c20b9371b03fd0f7758ab3eb248a92c894ccc2aaf6d20775e669acaff5b56a7c7e46229de31a6dee16bad4257483a379a8e05fc8c9286785f2b73e6c6decc57fcca3ece8442032568f7020570dccdf5675274d2c9509b55798d24f2ecdcb2022ffd4bd86d1d77237beab34eb4cbe459d76ce5d878a6da003d14891c0b5986f1a6c4c3044a25768e3261ed758571c92cf0c7d165ab80097325066efbdf1a97d575a7266266424b04d67147963089468dffe7995697d111f07e3d39d024586e3127046f679693065ff0c4ce2ac28eed03834c884fa9fe3fd95a2a204b8e59646a2047d760fe3aa89a0427d1124e63540f1e532c0b9e1d0f7ebfb56a07e0415b35ce51f3423ed153d880db1bf05976b598f6348dd641c213230cb2ef34a71975b34667eb2ba9e407bf87d30f041f022848f4ebe53fbc27db58dba3a5bcdb5540009a11e07d7fb120d58a4c723b53ee9582e74676e57e87ce84d292b6ccedc8e5c306de7912578dfaecfaf8274795b151ba0e1051700ce012ab7751f202bdf02f65b5aaebc49bcdc59e8598c3792aa6f214f11f2af64dd334c09d5a86473204e9930136313f39d4931881982113ffac26fb697d3f7e1336e4be4648884ccd5a06c25ceba9e9a85f72c7363af28f189a4fcc8903e068460a682ad46561d3b9e29526498f8ab807e7f7ed585da7ab9b798b93f41616422166bbb72214f438230313a53ec93685fc05d6eece8e7e2168787b114bb1693497512c637ddff6935ea4c164504a776f7ad356f835421eb25faebb38d88cca96e1dfac55e12480e1d176333a7a481ffb0263b3ee9c93342bbd22bea125e0386cca9daea23983b65bfac6f244970388963f9efdf48af255ddb9baf74bd6a0f695dfa8eece84ce3147563daa4d2a57f7c518ac04a2a39504781d3c689b73b51cbb7bcd433db60c34627fda4c50e5b8fa0d59f809e7427e9e3cb778f1fe03105582532274b0f5a22df574e60a198adeec9824d5e2210ee017936cf595a0443a22a2f40b915f63a8bfce0479abbd269abf3896444cdf78fede985586d0f67582d23e1f010b4d0075153c4298a9410781f3f6ddf2d022e9b877b3d520482c12634bf4285c2985b5e9dfbd02f58450b"]`
	// create a new reader with that JSON
	r := io.NopCloser(bytes.NewReader([]byte(j)))
	mock := &mockTransport{mockResponse: &http.Response{
		StatusCode: 200,
		Body:       r,
	}}
	u, err := url.Parse("example.com")
	assert.NoError(t, err)
	cl := internal.ApiClient{BaseURL: u, RestClient: &http.Client{Transport: mock}}
	resp, err := cl.GetPublicKeys(context.Background(), "example.com/api/publickeys")
	assert.NotNil(t, resp)
	assert.Nil(t, err)
	// we would like them as 2592byte base64 without 0x
	assert.EqualValues(t, "[221 198 203 151 249 189 30 75 5 228 245 156 63 86 150 173 143 132 208 13 251 49 135 67 29 189 211 124 181 141 110 82 162 177 226 25 162 43 164 42 140 105 13 129 182 224 210 29 32 17 93 138 89 166 60 201 233 4 178 220 112 224 222 202 113 105 227 119 189 82 41 182 152 78 36 76 0 185 192 119 120 120 171 197 69 22 106 34 127 139 0 14 30 101 120 241 129 63 88 117 158 97 86 142 182 112 123 60 201 114 208 67 183 16 53 63 90 185 212 129 158 180 166 221 243 232 61 25 184 39 74 238 68 200 147 24 97 61 79 65 48 239 84 44 138 51 203 170 211 64 57 67 255 15 12 165 83 8 188 9 52 3 43 8 30 88 215 243 62 228 174 2 221 176 110 122 141 210 2 148 173 116 219 167 53 233 171 105 240 182 226 195 185 217 84 1 150 19 102 19 199 73 160 250 87 19 30 6 170 175 14 39 55 46 29 42 9 13 25 242 228 117 251 40 31 238 47 47 149 171 146 103 250 151 70 168 22 61 151 94 253 219 139 29 141 221 20 44 98 41 232 218 237 187 174 49 79 9 126 162 119 113 153 190 45 115 121 100 238 142 100 100 84 89 37 210 12 133 184 229 59 92 228 244 41 14 127 44 29 67 132 243 160 135 49 100 194 59 34 254 247 93 252 30 193 133 94 187 179 115 47 251 201 40 43 184 226 146 186 135 191 185 197 220 153 245 129 54 142 218 162 145 97 41 107 133 132 32 141 101 38 97 232 156 166 234 148 69 251 52 246 170 232 127 79 47 36 175 227 147 75 51 53 127 95 206 110 222 162 105 42 41 55 177 38 232 251 69 29 6 40 109 188 50 24 47 173 17 253 145 154 72 202 207 222 106 115 242 130 36 139 175 200 209 148 6 4 94 15 103 13 28 113 232 71 117 27 211 57 94 91 184 168 145 150 167 130 117 195 138 42 169 118 251 180 67 144 53 74 110 59 192 123 187 59 25 240 131 248 143 105 196 175 93 178 168 55 113 57 221 168 167 201 2 62 132 57 194 174 113 155 38 130 55 33 73 252 29 220 11 56 28 71 25 99 192 167 133 48 208 209 20 66 65 97 45 249 199 161 25 233 206 90 225 5 232 91 219 226 211 37 167 236 106 94 121 215 255 109 226 11 191 236 87 128 62 191 101 41 136 191 166 163 0 232 231 235 110 140 185 102 215 43 2 140 16 156 202 200 222 136 125 216 154 44 97 87 102 173 86 203 246 196 118 119 192 21 163 228 9 140 119 193 5 48 193 136 81 177 186 38 16 99 233 235 132 76 181 122 185 247 226 77 71 193 121 146 156 197 65 54 120 5 173 125 137 36 142 45 154 222 118 83 105 144 52 85 64 254 194 126 247 229 3 132 10 165 84 84 197 105 251 102 63 145 61 131 18 10 39 150 246 141 170 185 120 70 252 27 112 87 141 73 10 50 181 196 75 144 124 231 166 28 200 237 82 3 204 158 175 141 204 14 84 203 235 112 59 198 74 230 8 202 216 211 224 71 31 125 2 18 127 245 187 24 137 71 201 128 177 120 134 5 124 238 206 15 121 144 17 149 246 31 38 122 44 33 88 98 102 189 240 123 181 55 145 79 75 70 221 101 153 225 85 225 138 124 101 66 224 216 99 50 249 76 145 18 54 101 219 154 80 168 97 155 176 160 229 147 73 180 78 223 35 227 89 140 149 163 35 180 250 178 106 65 99 15 237 165 74 100 155 134 172 180 224 242 7 226 66 184 96 193 236 110 104 48 235 128 251 168 93 170 238 174 89 143 198 71 162 42 83 155 179 181 144 79 213 231 81 32 198 134 48 64 65 221 200 127 38 19 184 168 219 48 38 85 176 223 206 232 151 213 28 114 79 220 24 68 195 183 173 198 21 250 88 90 164 148 72 67 60 64 170 15 108 126 73 200 129 89 158 224 112 251 91 122 79 237 82 187 25 2 230 126 40 237 40 192 233 39 228 19 136 88 176 214 237 178 81 253 190 220 48 135 30 71 193 118 249 178 46 137 22 93 197 255 50 81 36 37 189 23 157 88 194 220 75 29 78 103 129 236 56 90 201 93 172 153 24 82 155 159 136 142 202 166 63 135 215 189 202 28 102 15 220 145 19 45 222 236 54 83 35 44 59 92 16 206 216 239 139 163 108 123 179 228 212 31 165 79 171 216 151 41 202 42 39 227 253 103 124 94 194 178 171 216 66 92 165 53 77 249 100 203 101 156 8 96 95 107 203 195 7 105 58 230 86 36 242 222 238 74 20 42 61 33 40 250 6 218 247 160 43 150 187 2 50 119 134 123 209 41 209 123 28 78 42 195 155 90 20 242 0 241 22 171 12 204 247 84 104 232 145 38 33 240 194 128 233 213 157 143 211 3 159 84 69 213 36 44 93 36 126 37 165 155 10 180 49 56 82 100 253 217 81 207 125 5 220 88 17 233 0 213 117 160 177 142 208 110 238 34 205 34 109 235 18 15 63 111 195 132 30 6 252 168 120 33 171 171 41 46 173 86 48 171 212 229 212 61 248 37 19 233 98 201 8 144 193 126 182 235 175 183 250 6 149 74 233 225 58 36 15 66 159 76 140 150 49 174 210 26 29 252 143 26 193 147 11 178 229 133 159 242 8 83 238 32 119 77 123 221 144 41 93 158 34 192 147 252 78 97 250 61 76 248 108 208 5 99 107 8 38 102 155 133 77 131 57 137 90 26 215 130 83 163 144 143 40 213 155 22 214 210 25 170 119 241 132 209 134 14 59 208 185 136 161 11 179 127 100 17 49 130 193 180 125 143 107 42 110 150 132 39 111 51 28 53 207 76 123 131 69 43 140 179 105 82 82 21 81 30 77 85 107 208 73 233 188 227 235 21 42 141 56 114 41 225 5 160 249 94 184 196 211 186 43 137 87 36 143 97 7 43 70 209 173 125 161 33 169 177 162 226 182 48 36 38 239 124 242 9 169 29 188 60 34 175 73 205 107 204 17 185 221 6 113 88 220 203 27 71 119 81 206 33 29 15 85 104 173 32 107 243 44 116 165 187 78 209 17 51 46 21 38 62 150 8 57 17 19 141 78 45 20 116 167 172 127 224 152 158 31 84 199 192 215 174 225 181 62 145 111 184 59 75 117 164 249 31 179 100 225 218 149 12 148 114 109 224 35 6 15 160 120 134 59 29 93 164 127 11 67 165 6 124 254 32 72 211 119 247 52 96 105 27 147 254 133 82 92 75 209 181 163 230 115 48 252 248 30 109 69 210 161 10 215 116 185 108 30 191 30 39 5 243 186 55 234 96 214 138 23 242 230 5 138 208 230 150 141 129 232 130 43 92 140 98 183 36 167 36 178 121 144 195 112 67 233 109 226 255 174 200 227 211 51 114 222 139 141 115 233 118 180 47 3 247 125 255 2 28 141 137 104 34 218 1 53 206 152 145 174 28 220 83 166 2 41 71 232 253 38 17 229 5 13 68 134 153 95 78 232 157 46 251 49 239 63 189 89 177 31 211 107 29 148 229 177 241 65 219 155 116 95 22 57 38 185 24 16 249 20 196 58 93 59 145 66 212 172 238 105 87 27 121 73 2 23 109 246 139 199 115 187 34 169 70 125 212 127 10 82 243 84 97 177 248 252 105 14 13 64 234 140 34 112 249 178 74 196 134 7 79 244 188 236 148 232 131 251 128 178 75 10 156 31 13 44 8 250 180 156 174 100 234 95 85 226 26 106 112 108 122 181 166 229 139 161 229 241 220 110 15 44 25 141 224 143 45 14 41 228 211 36 150 240 68 135 136 97 153 154 111 194 163 65 240 23 241 224 210 126 39 102 172 161 210 172 142 216 166 135 195 207 48 242 227 7 148 223 217 37 1 255 58 57 145 80 128 240 98 59 95 117 212 88 67 156 62 118 149 172 191 212 94 7 36 124 1 139 184 2 5 200 0 121 248 27 209 118 201 0 36 59 154 182 154 45 188 137 33 25 148 69 194 217 219 16 96 101 194 11 147 113 176 63 208 247 117 138 179 235 36 138 146 200 148 204 194 170 246 210 7 117 230 105 172 175 245 181 106 124 126 70 34 157 227 26 109 238 22 186 212 37 116 131 163 121 168 224 95 200 201 40 103 133 242 183 62 108 109 236 197 127 204 163 236 232 68 32 50 86 143 112 32 87 13 204 223 86 117 39 77 44 149 9 181 87 152 210 79 46 205 203 32 34 255 212 189 134 209 215 114 55 190 171 52 235 76 190 69 157 118 206 93 135 138 109 160 3 209 72 145 192 181 152 111 26 108 76 48 68 162 87 104 227 38 30 215 88 87 28 146 207 12 125 22 90 184 0 151 50 80 102 239 189 241 169 125 87 90 114 102 38 100 36 176 77 103 20 121 99 8 148 104 223 254 121 149 105 125 17 31 7 227 211 157 2 69 134 227 18 112 70 246 121 105 48 101 255 12 76 226 172 40 238 208 56 52 200 132 250 159 227 253 149 162 162 4 184 229 150 70 162 4 125 118 15 227 170 137 160 66 125 17 36 230 53 64 241 229 50 192 185 225 208 247 235 251 86 160 126 4 21 179 92 229 31 52 35 237 21 61 136 13 177 191 5 151 107 89 143 99 72 221 100 28 33 50 48 203 46 243 74 113 151 91 52 102 126 178 186 158 64 123 248 125 48 240 65 240 34 132 143 78 190 83 251 194 125 181 141 186 58 91 205 181 84 0 9 161 30 7 215 251 18 13 88 164 199 35 181 62 233 88 46 116 103 110 87 232 124 232 77 41 43 108 206 220 142 92 48 109 231 145 37 120 223 174 207 175 130 116 121 91 21 27 160 225 5 23 0 206 1 42 183 117 31 32 43 223 2 246 91 90 174 188 73 188 220 89 232 89 140 55 146 170 111 33 79 17 242 175 100 221 51 76 9 213 168 100 115 32 78 153 48 19 99 19 243 157 73 49 136 25 130 17 63 250 194 111 182 151 211 247 225 51 110 75 228 100 136 132 204 213 160 108 37 206 186 158 154 133 247 44 115 99 175 40 241 137 164 252 200 144 62 6 132 96 166 130 173 70 86 29 59 158 41 82 100 152 248 171 128 126 127 126 213 133 218 122 185 183 152 185 63 65 97 100 34 22 107 187 114 33 79 67 130 48 49 58 83 236 147 104 95 192 93 110 236 232 231 226 22 135 135 177 20 187 22 147 73 117 18 198 55 221 255 105 53 234 76 22 69 4 167 118 247 173 53 111 131 84 33 235 37 250 235 179 141 136 204 169 110 29 250 197 94 18 72 14 29 23 99 51 167 164 129 255 176 38 59 62 233 201 51 66 187 210 43 234 18 94 3 134 204 169 218 234 35 152 59 101 191 172 111 36 73 112 56 137 99 249 239 223 72 175 37 93 219 155 175 116 189 106 15 105 93 250 142 236 232 76 227 20 117 99 218 164 210 165 127 124 81 138 192 74 42 57 80 71 129 211 198 137 183 59 81 203 183 188 212 51 219 96 195 70 39 253 164 197 14 91 143 160 213 159 128 158 116 39 233 227 203 119 143 31 224 49 5 88 37 50 39 75 15 90 34 223 87 78 96 161 152 173 238 201 130 77 94 34 16 238 1 121 54 207 89 90 4 67 162 42 47 64 185 21 246 58 139 252 224 71 154 187 210 105 171 243 137 100 68 205 247 143 237 233 133 88 109 15 103 88 45 35 225 240 16 180 208 7 81 83 196 41 138 148 16 120 31 63 109 223 45 2 46 155 135 123 61 82 4 130 193 38 52 191 66 133 194 152 91 94 157 251 208 47 88 69 11]", fmt.Sprintf("%v", resp[0][:]))
}

func TestClient_GetPublicKeys_EncodingError(t *testing.T) {
	// public keys are returned hex encoded with 0x
	j := `["a2b5aaad9c6efefe7bb9b1243a043404f3362937c","fb6b31833929833173f476630ea2cfe","b0d9ddf15fca8685948820"]`
	// create a new reader with that JSON
	r := io.NopCloser(bytes.NewReader([]byte(j)))
	mock := &mockTransport{mockResponse: &http.Response{
		StatusCode: 200,
		Body:       r,
	}}
	u, err := url.Parse("example.com")
	assert.NoError(t, err)
	cl := internal.ApiClient{BaseURL: u, RestClient: &http.Client{Transport: mock}}
	resp, err := cl.GetPublicKeys(context.Background(), "example.com/api/publickeys")
	assert.Equal(t, err.Error(), "failed to decode from Hex from the following public key index locations: 0, 1, 2, ")
	assert.Nil(t, resp)
}

// TODO: not really in use, should be revisited
func TestClient_ReloadSignerKeys_HappyPath(t *testing.T) {
	mock := &mockTransport{mockResponse: &http.Response{
		StatusCode: 200,
		Body:       io.NopCloser(bytes.NewReader(nil)),
	}}
	u, err := url.Parse("example.com")
	assert.NoError(t, err)
	cl := internal.ApiClient{BaseURL: u, RestClient: &http.Client{Transport: mock}}
	err = cl.ReloadSignerKeys(context.Background())
	assert.Nil(t, err)
}

// TODO: not really in use, should be revisited
func TestClient_GetServerStatus_HappyPath(t *testing.T) {
	j := `"some server status, not sure what it looks like, need to find some sample data"`
	r := io.NopCloser(bytes.NewReader([]byte(j)))
	mock := &mockTransport{mockResponse: &http.Response{
		StatusCode: 200,
		Body:       r,
	}}
	u, err := url.Parse("example.com")
	assert.NoError(t, err)
	cl := internal.ApiClient{BaseURL: u, RestClient: &http.Client{Transport: mock}}
	resp, err := cl.GetServerStatus(context.Background())
	assert.NotNil(t, resp)
	assert.Nil(t, err)
}
*/
