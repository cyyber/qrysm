package mock

import (
	"math/big"
	"strings"

	dilithium2 "github.com/theQRL/go-qrllib/dilithium"
	"github.com/theQRL/go-zond/accounts/abi"
	"github.com/theQRL/go-zond/accounts/abi/bind"
	"github.com/theQRL/go-zond/accounts/abi/bind/backends"
	"github.com/theQRL/go-zond/common"
	"github.com/theQRL/go-zond/core"
	"github.com/theQRL/go-zond/core/types"
	"github.com/theQRL/go-zond/pqcrypto"
	"github.com/theQRL/qrysm/v4/contracts/deposit"
)

var (
	amount32Eth        = "32000000000000000000"
	amountLessThan1Eth = "500000000000000000"
	depositContractBin = "0x60806040523480156200001157600080fd5b5060005b600160206200002591906200014d565b8110156200010d5760026021826020811062000046576200004562000188565b5b0154602183602081106200005f576200005e62000188565b5b015460405160200162000074929190620001e6565b6040516020818303038152906040526040516200009291906200028f565b602060405180830381855afa158015620000b0573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190620000d59190620002de565b6021600183620000e6919062000310565b60208110620000fa57620000f962000188565b5b0181905550808060010191505062000015565b506200034b565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200015a8262000114565b9150620001678362000114565b92508282039050818111156200018257620001816200011e565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b6000819050919050565b620001e0620001da82620001b7565b620001c1565b82525050565b6000620001f48285620001cb565b602082019150620002068284620001cb565b6020820191508190509392505050565b600081519050919050565b600081905092915050565b60005b838110156200024c5780820151818401526020810190506200022f565b60008484015250505050565b6000620002658262000216565b62000271818562000221565b9350620002838185602086016200022c565b80840191505092915050565b60006200029d828462000258565b915081905092915050565b600080fd5b620002b881620001b7565b8114620002c457600080fd5b50565b600081519050620002d881620002ad565b92915050565b600060208284031215620002f757620002f6620002a8565b5b60006200030784828501620002c7565b91505092915050565b60006200031d8262000114565b91506200032a8362000114565b92508282019050808211156200034557620003446200011e565b5b92915050565b611924806200035b6000396000f3fe60806040526004361061003f5760003560e01c806301ffc9a7146100445780632289511814610081578063621fd1301461009d578063c5f2892f146100c8575b600080fd5b34801561005057600080fd5b5061006b60048036038101906100669190610b96565b6100f3565b6040516100789190610bde565b60405180910390f35b61009b60048036038101906100969190610c94565b6101c5565b005b3480156100a957600080fd5b506100b261060f565b6040516100bf9190610ded565b60405180910390f35b3480156100d457600080fd5b506100dd610621565b6040516100ea9190610e1e565b60405180910390f35b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806101be57507f85640907000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b610a20878790501461020c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020390610ebc565b60405180910390fd5b60208585905014610252576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024990610f4e565b60405180910390fd5b6111f38383905014610299576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029090610fe0565b60405180910390fd5b670de0b6b3a76400003410156102e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102db90611072565b60405180910390fd5b6000633b9aca00346102f691906110cb565b14610336576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032d9061116e565b60405180910390fd5b6000633b9aca003461034891906111bd565b905067ffffffffffffffff8016811115610397576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038e90611260565b60405180910390fd5b60006103a2826107fc565b90507f649bbc62d0e31342afea4e5cd82d4049e7e1ee912fc0889aa790803be39038c589898989858a8a6103d76020546107fc565b6040516103eb9897969594939291906112bc565b60405180910390a1600060018a8a8a8a868b8b6040516104119796959493929190611338565b602060405180830381855afa15801561042e573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061045191906113b4565b9050838114610495576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048c90611479565b60405180910390fd5b6001602060026104a591906115cc565b6104af9190611617565b602054106104f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e9906116bd565b60405180910390fd5b60016020600082825461050591906116dd565b925050819055506000602054905060005b60208110156105f15760018083160361054d57826000826020811061053e5761053d611711565b5b01819055505050505050610606565b60026000826020811061056357610562611711565b5b015484604051602001610577929190611761565b60405160208183030381529060405260405161059391906117c9565b602060405180830381855afa1580156105b0573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906105d391906113b4565b92506002826105e291906111bd565b91508080600101915050610516565b506000610601576106006117e0565b5b505050505b50505050505050565b606061061c6020546107fc565b905090565b6000806000602054905060005b6020811015610773576001808316036106ce5760026000826020811061065757610656611711565b5b01548460405160200161066b929190611761565b60405160208183030381529060405260405161068791906117c9565b602060405180830381855afa1580156106a4573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906106c791906113b4565b9250610757565b600283602183602081106106e5576106e4611711565b5b01546040516020016106f8929190611761565b60405160208183030381529060405260405161071491906117c9565b602060405180830381855afa158015610731573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061075491906113b4565b92505b60028261076491906111bd565b9150808060010191505061062e565b506002826107826020546107fc565b600060401b6040516020016107999392919061185c565b6040516020818303038152906040526040516107b591906117c9565b602060405180830381855afa1580156107d2573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906107f591906113b4565b9250505090565b6060600867ffffffffffffffff81111561081957610818611895565b5b6040519080825280601f01601f19166020018201604052801561084b5781602001600182028036833780820191505090505b50905060008260c01b90508060076008811061086a57610869611711565b5b1a60f81b8260008151811061088257610881611711565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806006600881106108c5576108c4611711565b5b1a60f81b826001815181106108dd576108dc611711565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806005600881106109205761091f611711565b5b1a60f81b8260028151811061093857610937611711565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508060046008811061097b5761097a611711565b5b1a60f81b8260038151811061099357610992611711565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806003600881106109d6576109d5611711565b5b1a60f81b826004815181106109ee576109ed611711565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080600260088110610a3157610a30611711565b5b1a60f81b82600581518110610a4957610a48611711565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080600160088110610a8c57610a8b611711565b5b1a60f81b82600681518110610aa457610aa3611711565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080600060088110610ae757610ae6611711565b5b1a60f81b82600781518110610aff57610afe611711565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535050919050565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610b7381610b3e565b8114610b7e57600080fd5b50565b600081359050610b9081610b6a565b92915050565b600060208284031215610bac57610bab610b34565b5b6000610bba84828501610b81565b91505092915050565b60008115159050919050565b610bd881610bc3565b82525050565b6000602082019050610bf36000830184610bcf565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610c1e57610c1d610bf9565b5b8235905067ffffffffffffffff811115610c3b57610c3a610bfe565b5b602083019150836001820283011115610c5757610c56610c03565b5b9250929050565b6000819050919050565b610c7181610c5e565b8114610c7c57600080fd5b50565b600081359050610c8e81610c68565b92915050565b60008060008060008060006080888a031215610cb357610cb2610b34565b5b600088013567ffffffffffffffff811115610cd157610cd0610b39565b5b610cdd8a828b01610c08565b9750975050602088013567ffffffffffffffff811115610d0057610cff610b39565b5b610d0c8a828b01610c08565b9550955050604088013567ffffffffffffffff811115610d2f57610d2e610b39565b5b610d3b8a828b01610c08565b93509350506060610d4e8a828b01610c7f565b91505092959891949750929550565b600081519050919050565b600082825260208201905092915050565b60005b83811015610d97578082015181840152602081019050610d7c565b60008484015250505050565b6000601f19601f8301169050919050565b6000610dbf82610d5d565b610dc98185610d68565b9350610dd9818560208601610d79565b610de281610da3565b840191505092915050565b60006020820190508181036000830152610e078184610db4565b905092915050565b610e1881610c5e565b82525050565b6000602082019050610e336000830184610e0f565b92915050565b600082825260208201905092915050565b7f4465706f736974436f6e74726163743a20696e76616c6964207075626b65792060008201527f6c656e6774680000000000000000000000000000000000000000000000000000602082015250565b6000610ea6602683610e39565b9150610eb182610e4a565b604082019050919050565b60006020820190508181036000830152610ed581610e99565b9050919050565b7f4465706f736974436f6e74726163743a20696e76616c6964207769746864726160008201527f77616c5f63726564656e7469616c73206c656e67746800000000000000000000602082015250565b6000610f38603683610e39565b9150610f4382610edc565b604082019050919050565b60006020820190508181036000830152610f6781610f2b565b9050919050565b7f4465706f736974436f6e74726163743a20696e76616c6964207369676e61747560008201527f7265206c656e6774680000000000000000000000000000000000000000000000602082015250565b6000610fca602983610e39565b9150610fd582610f6e565b604082019050919050565b60006020820190508181036000830152610ff981610fbd565b9050919050565b7f4465706f736974436f6e74726163743a206465706f7369742076616c7565207460008201527f6f6f206c6f770000000000000000000000000000000000000000000000000000602082015250565b600061105c602683610e39565b915061106782611000565b604082019050919050565b6000602082019050818103600083015261108b8161104f565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006110d682611092565b91506110e183611092565b9250826110f1576110f061109c565b5b828206905092915050565b7f4465706f736974436f6e74726163743a206465706f7369742076616c7565206e60008201527f6f74206d756c7469706c65206f66206777656900000000000000000000000000602082015250565b6000611158603383610e39565b9150611163826110fc565b604082019050919050565b600060208201905081810360008301526111878161114b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006111c882611092565b91506111d383611092565b9250826111e3576111e261109c565b5b828204905092915050565b7f4465706f736974436f6e74726163743a206465706f7369742076616c7565207460008201527f6f6f206869676800000000000000000000000000000000000000000000000000602082015250565b600061124a602783610e39565b9150611255826111ee565b604082019050919050565b600060208201905081810360008301526112798161123d565b9050919050565b82818337600083830152505050565b600061129b8385610d68565b93506112a8838584611280565b6112b183610da3565b840190509392505050565b600060a08201905081810360008301526112d7818a8c61128f565b905081810360208301526112ec81888a61128f565b905081810360408301526113008187610db4565b9050818103606083015261131581858761128f565b905081810360808301526113298184610db4565b90509998505050505050505050565b6000608082019050818103600083015261135381898b61128f565b9050818103602083015261136881878961128f565b9050818103604083015261137c8186610db4565b9050818103606083015261139181848661128f565b905098975050505050505050565b6000815190506113ae81610c68565b92915050565b6000602082840312156113ca576113c9610b34565b5b60006113d88482850161139f565b91505092915050565b7f4465706f736974436f6e74726163743a207265636f6e7374727563746564204460008201527f65706f7369744461746120646f6573206e6f74206d6174636820737570706c6960208201527f6564206465706f7369745f646174615f726f6f74000000000000000000000000604082015250565b6000611463605483610e39565b915061146e826113e1565b606082019050919050565b6000602082019050818103600083015261149281611456565b9050919050565b60008160011c9050919050565b6000808291508390505b60018511156114f0578086048111156114cc576114cb61118e565b5b60018516156114db5780820291505b80810290506114e985611499565b94506114b0565b94509492505050565b60008261150957600190506115c5565b8161151757600090506115c5565b816001811461152d576002811461153757611566565b60019150506115c5565b60ff8411156115495761154861118e565b5b8360020a9150848211156115605761155f61118e565b5b506115c5565b5060208310610133831016604e8410600b841016171561159b5782820a9050838111156115965761159561118e565b5b6115c5565b6115a884848460016114a6565b925090508184048111156115bf576115be61118e565b5b81810290505b9392505050565b60006115d782611092565b91506115e283611092565b925061160f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846114f9565b905092915050565b600061162282611092565b915061162d83611092565b92508282039050818111156116455761164461118e565b5b92915050565b7f4465706f736974436f6e74726163743a206d65726b6c6520747265652066756c60008201527f6c00000000000000000000000000000000000000000000000000000000000000602082015250565b60006116a7602183610e39565b91506116b28261164b565b604082019050919050565b600060208201905081810360008301526116d68161169a565b9050919050565b60006116e882611092565b91506116f383611092565b925082820190508082111561170b5761170a61118e565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b61175b61175682610c5e565b611740565b82525050565b600061176d828561174a565b60208201915061177d828461174a565b6020820191508190509392505050565b600081905092915050565b60006117a382610d5d565b6117ad818561178d565b93506117bd818560208601610d79565b80840191505092915050565b60006117d58284611798565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000082169050919050565b6000819050919050565b6118566118518261180f565b61183b565b82525050565b6000611868828661174a565b6020820191506118788285611798565b91506118848284611845565b601882019150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212204870ee7b3a7bf11fe50491deb227d84308f62e8138a1c9b0369b9d35a8e11c2964736f6c63782c302e382e32332d646576656c6f702e323032332e31312e362b636f6d6d69742e34636639383934362e6d6f64005d"
)

// TestAccount represents a test account in the simulated backend,
// through which we can perform actions on the zond1.0 chain.
type TestAccount struct {
	Addr         common.Address
	ContractAddr common.Address
	Contract     *deposit.DepositContract
	Backend      *backends.SimulatedBackend
	TxOpts       *bind.TransactOpts
}

// Setup creates the simulated backend with the deposit contract deployed
func Setup() (*TestAccount, error) {
	genesis := make(core.GenesisAlloc)
	dilithiumKey, err := pqcrypto.GenerateDilithiumKey()
	if err != nil {
		return nil, err
	}

	// strip off the 0x and the first 2 characters 04 which is always the EC prefix and is not required.
	publicKeyBytes := dilithiumKey.GetPK()
	var pubKey = make([]byte, dilithium2.CryptoPublicKeyBytes)
	copy(pubKey, publicKeyBytes[:])

	addr := dilithiumKey.GetAddress()
	txOpts, err := bind.NewKeyedTransactorWithChainID(dilithiumKey, big.NewInt(1337))
	if err != nil {
		return nil, err
	}
	startingBalance, _ := new(big.Int).SetString("100000000000000000000000000000000000000", 10)
	genesis[addr] = core.GenesisAccount{Balance: startingBalance}
	backend := backends.NewSimulatedBackend(genesis, 210000000000)

	contractAddr, _, contract, err := DeployDepositContract(txOpts, backend)
	if err != nil {
		return nil, err
	}
	backend.Commit()

	return &TestAccount{addr, contractAddr, contract, backend, txOpts}, nil
}

// Amount32Eth returns 32Eth(in wei) in terms of the big.Int type.
func Amount32Eth() *big.Int {
	amount, _ := new(big.Int).SetString(amount32Eth, 10)
	return amount
}

// LessThan1Eth returns less than 1 Eth(in wei) in terms of the big.Int type.
func LessThan1Eth() *big.Int {
	amount, _ := new(big.Int).SetString(amountLessThan1Eth, 10)
	return amount
}

// DeployDepositContract deploys a new Ethereum contract, binding an instance of DepositContract to it.
func DeployDepositContract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *deposit.DepositContract, error) {
	parsed, err := abi.JSON(strings.NewReader(deposit.DepositContractABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(depositContractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &deposit.DepositContract{
		DepositContractCaller:     deposit.NewDepositContractCallerFromBoundContract(contract),
		DepositContractTransactor: deposit.NewDepositContractTransactorFromBoundContract(contract),
		DepositContractFilterer:   deposit.NewDepositContractFiltererFromBoundContract(contract),
	}, nil
}
