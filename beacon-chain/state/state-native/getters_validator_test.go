package state_native_test

import (
	"testing"

	"github.com/theQRL/go-zond/common/hexutil"
	"github.com/theQRL/qrysm/beacon-chain/state"
	statenative "github.com/theQRL/qrysm/beacon-chain/state/state-native"
	testtmpl "github.com/theQRL/qrysm/beacon-chain/state/testing"
	qrysmpb "github.com/theQRL/qrysm/proto/qrysm/v1alpha1"
	"github.com/theQRL/qrysm/testing/require"
	"github.com/theQRL/qrysm/testing/util"
)

func TestBeaconState_ValidatorAtIndexReadOnly_HandlesNilSlice_Capella(t *testing.T) {
	testtmpl.VerifyBeaconStateValidatorAtIndexReadOnlyHandlesNilSlice(t, func() (state.BeaconState, error) {
		return statenative.InitializeFromProtoUnsafeCapella(&qrysmpb.BeaconStateCapella{
			Validators: nil,
		})
	})
}

func TestValidatorIndexes(t *testing.T) {
	dState, _ := util.DeterministicGenesisStateCapella(t, 10)
	byteValue := dState.PubkeyAtIndex(1)
	t.Run("ValidatorIndexByPubkey", func(t *testing.T) {
		require.Equal(t, hexutil.Encode(byteValue[:]), "0x36402999643c1415f0fe9f7fdbc20f1b1cfc56db71b38195779ac53ec642729319691be34052c1435029042d13fc0918a1e1e4c84ca10b5a9502e3f4b97c63832e859f0828bc9a56fc0d1963a8991a5b5a3ac8ac8953f81f0d86ecbf352b5e0799e0f51645a1b5862d5936d29d04d31b570ca30bfd09bcd0997687c73a7866f085e657b0af55a65faaab9cba68c959ea198dc3e656facc4203fae28b14b6a36644f4fd3d46483ffca567905d52b1c523ea77266a4a8fbaa7ac3fb1d13da59e8563b22f3860e5ab40503a7558765cb81703d452c133d7f58eb36c34a5ad93c8216f989cf8b8e412b09520f65f5c008d7e66648d7db9a9ed419496e7dd91c69a7ed5295bcd3acbd1da2f0123dc8e018b509414c811e2155f440cf4bb44b7c48ff7d51acc4fb6380d028a07c0a29a76bc9ef60dc52edb1f3d40d893b56c3413f15c6532a3c8b63d2c475fb6665461c4cec67f7c5972c9699300f3133d96038a6c45de631aba7f465b26809156e8d975d16ec05ab09805551a596765ac6b436fb0a49991e4f2ec546c59930a327591f4ebcba247cfcc13b7f24157e7416eb3070199869fbf64de57567526e89c9c9ac19af85a8533e13abf0f656fe6d6c8e453bfa64b15ecedddd2138ce5d2afd4b7bb2e6eada728301980f68dc58a16928b9a04b85ba85fde02f0e4cf082d57710b9fcbd21f6ed74c2e129250aa01f08c5273e608c93551d569a08fb3e684f81931687da2e2d3395395d447f3d17f9e45e4049986ea4f0d85a44271079e301aedba8891ed932a3e6e18d959f7a20f05f784842964545efd1058b2a8891373b9a7e61759d543706a8dca12164b5b1c94bdaf80f86d6422e5e09617e6ac9a029dd065509e7aedef060b22e8348983ee95320dbb4ac452c5f8b0d90be0e1362368f6c93baf83987a63e6b696ef1fd144cf0e47ce653dbde4a6711a59bacf7b4a39f016da579bf490dee13187760995fd9824f9912a3766d0978359da1956df615e76009f7304bb252b626c735240bc61d411cd0e687628ce34fde0c2049f767fd6c1031806ccda52878be942652abf1a416282121a2447998b9685839a1dd8b785330b33866e987536c65cd89011b6a85c7590443d6a61ef2fde1f39fcaadcffbe9738e2a874c7c956078634a538bde468b066bc44e048173d19f52beaa706af10a10a0fce366c41f090f6dd571812c11a6f271b10ec0458b7379f6f347dddf79c48761f67598a9d99b610fe3e7f13381bdd90be5e16d004f842bf4fcde95491c088a7305f8d5275a46dbdf170429103ed0dd08e79a402ba565361b9c62a6f58bfb24b7dafdc5f3af050b5a1df24b48c4818d09d84af3a018c2fc21e6a159da4be1a8d5e35fa41368f5ced7c2a3a580074bd7e90135415263131cf11bc4c194e4a72b247229e49f24706710b60b793197f68f3f4b7dd063e6390c8257f3c4171c31deb755241cf59a89798e250a3489ad6c6a02d2a245a831c106ae661377a68a8efe2a3bfffe9ef85c5a66bcf79afd7f1c4eca3a334f3737b4ffa3537ae0dab8241e0b976527123c361f8c191a111e65cbd8dd6596d32db7ddf9e4101c0ac752b6c249fa0253006b8fc7012ebb130f47197d90956df83a7ef6568486b7e82d088f5efd33221a386cf421be25a084363bcece179df8956f92d3a83250c12dfe7fb3fc8e07684867e83219ad400822f2e089f2e8c6404a663fa63880364317c7a336d79510cae0b696c13c7056950b18c0214aec0c2c608a931dcb7028e63fd4498f2110bb7e6a53e1f716ffff7e9534c666b87ff89b44281b04a436970acf51095ae1c2c2bc4271a3ab59eae09741a1de514004827c872044aa237ab2e8341d19fbd17e60896e913fe43ebda27c7273c821938f44e514ebb0f2b3c7bef256ce0cf7e4ceb02f234d39f9abb6de32e05e56d8cdf95d2f454aa4ea12f197adb6948a59fcd3e05e6fb5f281255c715f418ce0bde8e0c384db0963ee13bdcca3815b8ab5126b4058e76beac5af157d44e086b01963aaec9ddf8e7cdbd5fa9d063f6a2bdec0b0f314064baa671c29437533928169de03adbedd4621fc343a446878e54812844e50e96fb65467e1a0af7b47cb6f87bdd493f0826f22f766b29a617924ba8d51093449b3df2a5eac41e41e10e2c912784a1a7ab630b4f4dba01572e67110a4a8c0830066536a0fac2cb599a8aa91781e84978dd07c67de8b59ecd4e2482691d69b52ff74073a69c38bdbbc4da64849d59b3a728ee5657bfbbc54532ac5bfd1affa01ab4fd1b742ba3380b1ee0c245d078baba3528531c17f50dbe7e1fb92f18751646c922effc3a37c5eaf5eae1f7af5442f3f913d8b76e8d3cec587c96a0a3a4e8598c0edbd9e418255750b8962f1eef51ac1a61cd3f23f799e1695ed449cacfc3c4ba9235a7c27e983fa6e809bf79ff8400565fdb56856f43810b1e39178f900549fab43b6e2ab67071d42f3b9cc04781672f4257cf2652882eec3d207757fbdb90926b44b092bf18a073a8bc0c3aa0427af3f83194323804f430d1c448680a84c2d5bf9c424cbe7479f6772642b10052b90a81c0477431de39e3eee9174a25122173e78fef4e3a4c6cfd04d7b896b0f80b429f4c4679f8f7a80af205c36933ee485d2134939d85b3b6b113205f5ded1488496076a39a3db68ac2814619a95690380bd7303f9cc0fa3646ba8c77c80edccf22b00ee3bd3b9240200f732b3e23be5aa43d12fc9bb55f2cfad95f69139bd39dcdf4ead6029150cf7b0c665db7a6ceb6861fc76f74c09db1c5dbf1979cc9ef6a45b84e6f84b12175902a2dd584e8ac632abef6ccb3f45878065750162f47e4e4db6dbc8bfcd8cdf1e8ca6149c691aa9137eafcea28ba16502d320910cedc04b7aaddeb414df9c3a374a0ee3f8d8aeb863de582bbdc92aa4335a286fa4182f112d6f92f9671ebfe2c3a580e3c3f47c772efc6cabdca917221720ac9005982c9b122b794398e93b60c2020adddadb34ebf2bbb2ad80b8f98026934c2dac55b75e6d863246270098a2d3466c7e313e08fa34fc6da2ea849d5f5b7119b37dbd7a16e61f4a30b813bacdf5ee576d2b623e2a7d1e9508c2db66a6d37643289eb11600953766240a929ad186e505acfff4baee66cccb8502401438d8c0a675a2f0c2cc31edd5ff12deccf13c199bf2e2b9144336c0e4636ea6935257cdb4593859eb93ca39f3deaba4566a2fe4cbea2204febf9477b530d3c2cbd09ad9cd35c1e87c20003ae29313fc1e90cd1af95894c793269b3c1b780ae60ac00e00a3f61c347b0ccd57b8fbdebef587f9bdbcaf838a43ba2a956a227f2e9b89cd218c0b1439a40615a73acd4475228e1ee217bd8cac04196943b2fc762efd683802d4a4e7defc27aef58e87ee96a8421ec7c1f8c95590d8548f74b301e1b048e30340349eba5436489d3d3a26e9196750a6c8cce2095482dda48d54f2a03fd2a1dfd18a8b5079f6e3293e7fe2048545338313419a7c2e10857699fec6e6b0f48195d31c648945b49d9c72995805b09d84f41792ee8a8cfca6b5b63b73b3730338031d1cafe37e627e83725a94080dc66b22b1347ec798510a31e2d4d2fadbb09d79b2cf75d69849f1b6214d091c81036357a20942b2a0b6f7c682332f399aeb25c4e0774913fbff8dc")
	})
	t.Run("ValidatorAtIndexReadOnly", func(t *testing.T) {
		readOnlyState, err := dState.ValidatorAtIndexReadOnly(1)
		require.NoError(t, err)
		readOnlyBytes := readOnlyState.PublicKey()
		require.NotEmpty(t, readOnlyBytes)
		require.Equal(t, hexutil.Encode(readOnlyBytes[:]), hexutil.Encode(byteValue[:]))
	})
}
