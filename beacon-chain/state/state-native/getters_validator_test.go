package state_native_test

import (
	"testing"

	"github.com/theQRL/go-zond/common/hexutil"
	"github.com/theQRL/qrysm/v4/beacon-chain/state"
	statenative "github.com/theQRL/qrysm/v4/beacon-chain/state/state-native"
	testtmpl "github.com/theQRL/qrysm/v4/beacon-chain/state/testing"
	zondpb "github.com/theQRL/qrysm/v4/proto/qrysm/v1alpha1"
	"github.com/theQRL/qrysm/v4/testing/require"
	"github.com/theQRL/qrysm/v4/testing/util"
)

func TestBeaconState_ValidatorAtIndexReadOnly_HandlesNilSlice_Capella(t *testing.T) {
	testtmpl.VerifyBeaconStateValidatorAtIndexReadOnlyHandlesNilSlice(t, func() (state.BeaconState, error) {
		return statenative.InitializeFromProtoUnsafeCapella(&zondpb.BeaconState{
			Validators: nil,
		})
	})
}

func TestValidatorIndexOutOfRangeError(t *testing.T) {
	err := statenative.NewValidatorIndexOutOfRangeError(1)
	require.Equal(t, err.Error(), "index 1 out of range")
}

func TestValidatorIndexes(t *testing.T) {
	dState, _ := util.DeterministicGenesisState(t, 10)
	byteValue := dState.PubkeyAtIndex(1)
	t.Run("ValidatorIndexByPubkey", func(t *testing.T) {
		// require.Equal(t, hexutil.Encode(byteValue[:]), "0xb89bebc699769726a318c8e9971bd3171297c61aea4a6578a7a4f94b547dcba5bac16a89108b6b6a1fe3695d1a874a0b")
		require.Equal(t, hexutil.Encode(byteValue[:]), "0x39abbd3207107f4c3e6e9867c9752fdda1cbf14858cc83b0a545d80ec05f3f391eaecff18af264cdf8d767def2d6cb26ead0022a0bea028884a348d59ae5e940c9e971c064eee34aa43f461a6b74b286717afa8229e05dd7f34389d7bddd03d2fc87035aa9678dd5f8fa9b910c33e717f11d059a14f59fbc2a48e9aa456cf971a21c1651328f1df23e5e89743815ef42d73946649ef2f81d011fef86aa3bd19b5796df32414541d9c2b563b797c1c3a050af0aa2faae2ef5f7b9f9e9b42850f6149da058674b2fefadde52c814b52b86f17f755e2dac759e9d799ffe09132f486ed687f59ef3c1874e14ce028961d713050b1a767507ed3125e47a780a79ae40e4cac305a705a79444c4dbb275d7d136dea3fc4b84aedd308572908ba628c921f7c9020f1e014de9d4323ad3000c240ae5af9fa7737dce817577a23f15bd79cc95ddab534c0ed7c8191af1138cd1e208843cf07fdee0cc9c3b593d81ddd9aeaaf44d8eceefcda56f9f7c897ca597b68ab71167349f41f7acd286b9122a6c2330764d969f2fe974abf3c874afea950f060b206727f5722089a607252cad5cdeb00abecc6d0fec300ebce52dd85030c87d9731b7f8e895586d4f21dcce7c6183d837fb3a1e0613ed9b5e1cb4eb018ec84457f53086ee2ec868217146105c35bedd10ee90dd5871bee0ff8b0d9e91760f6df949065085c021bc8e5366f2268493b91906d923e4ce7641844067a5a9571ad61f860658ea60fd0e66a6367e247f622677c5fac761e8c9548d8968c24e58d7c7107fcc599d617e767db2be85cd22af4b429535cfc75fe64a022345eff6e49933cd48fe8fed1e23a3852574b95f42064434129772c8729dd78710821c9aa05f2b4bcef8db3852d80c99df4ea9b3634dc997ea78174d78fc0eb5bd78743971e0a5af21b1d6173bbc0669279f7e590bdc30cd75b1a0d92e871d93fc40d68be5545eace0fbd07de8d9f5f9f133c2957c2dcc0f45f579cd6c856750b0696f86af8130032faa8216982e707d4250b560c1492268d3ae82b34c2b3ebf2081c9a39dedb231934e2adea29e4f1e71df025302a34e1dd0fdf9762c93a744a06c592532f0ee04736fa43d9f1abfbe3ad274faef16105dc1c79667bddfb6fe2c96c1c657ee2d8ce7acd6ef76c7ecf3f40224bd473cbcb9987599f912cdb2a01949cbab5207e770d67219c976e8d45feafdf99e88541f6d9c124e8824d6cc5e718224de2d594a109ffcbae162e523a90b035ba407cac4c6ef9b36ab43c945f8b17c9ad73ab6bdd61fca3479cf85d9907adbb5718d61d615cbf5d707c204170d094d1c675e0c2d9d6193da7eb26744be686ef723c66283823228a793dcc833a3a87bb86500f7be4eeee64324ea1ae3ce8d484efcea21b005d9e5fecfb9ca45cff02fbaa1967b71140af690db542d31950fccf9012113d38234d0752d713fd4200cc5e624562c904f645fbd87079c8646037ff9ec485d61f293d75a8053d5865cda0e3a37c762d6591a41cef842f1ec965e984a4ba9a90af436653b96dec0e1bbee3219d119238a1984f033665fa4afdefe137a74ebd7b61970477f123b2a0b99a14e63ea29e33bf95a93fc004a874186e59c54e72eb955e1af301b62de96ee5be738ef877e07ae4a21706a229d9f0af5c0e83f94031900a484ac11505644367a2e9a1afa3d0ca7840dad3c7278d3fca45b22a536f303a61e193a56a1cdb8eb832dff4c0e6980e49b7a21168073005badd0f88875e7107ad42dd66e1ed486da3564ffa78ca19e14d3484be0d928b51165168d1e9b6c826db52c8f09316b41b0984c6d67f0f14db2d1fa121be611d80fafcefd5304b123c28d7b914bb3b0430532bbf7768da77ae68413ee8bdc22e019c7e217dc140726e0753691aaab5752ebd48c35314d1cd4f2d606f28998c8c6cf05114a945657337c30fcddc1fdda4331391499db52eaddd4769e2801280947887ff7610e04eb0241b51656e2b7e60702697ce0590df003d68e98e5267437d0f28684acf8000a9d6a50607d6a31e9a64d4224c01d12d8438eeef2552963e04a96c61aa77193b2dd0f757dd5d0f8ceb75a83aafc49bb506fad152594fe7884e6d78472c6cbb2abda4f482a5b0ff5d277611e5a85c2bf37896a65265ece907aa22a9f4b82ddca61ec1cd23bfd72eec5ddaa62e42a403b2617e49e9f521b51f827527b2bb6da00a7d0f9738ff4923f8f1ed73c4faea3c2dae4651005a2176728fec159cf99aacbed0e2cbefbee179c74869c9754f63a4d73b7297f436f1c8e4aceaa5107a360945bffdfc07ca8c9c3292336bd985c378c0f5234671c62a6416cc501dcd4e71bbe73ccc78e3387246632a5671ceda7f28aa8a694ae21deee33e24cd92f6007ec381d8dc365da75dfb2c1b3cf1ccaf3d92299d8c96f7775a0535cbf7eb8ace89d9dabe2b5b62fb486d2ae90245542697f67a6d7fb4cc73878a464c69606eb5d906fa9b7233b07fe5b429762ee03f60caeac58a0f2e424cc2cbbee10741519a604cd0547cadcfb584a452b635f3099f2cac6472e2fac130b3bb644a122fa60bf6ed47442b9eafbcf18f8dacdcc8f0cfb5a1a0b0bc604be4df3ad991b78c46d3df87dc625d43e48b45090ee5b4b359cbd29878a8c77cf6bf669437e658eecd84d48eaa0bb077ac3e0c6b33ace8f4821dfd5720eb82e23e20535f3a9344a267d38c13ea8781abb2716dc68bff2a538324ab7dc050448845bc408275fa18467bbf2d8a3460ee38f01031e99193a0a97cc43fd5ceca0b8c2739aba793b2e807f4af2a957051777e03ae7acd3dcd27afd98a47f9c1995ca56edfa2a07a020891a81f93165217946a17cd584a16d1afa6679d9fba3085af961b0c3ad3bfa9d738aaeba89455eebd7602cf1404900af1a1ab912b7f2764d8d927522e0ba8960080d4c6d89b0b0a26bb646197ea936e6c42ad92d6b28692e18ea365d4b4c2ee4d5a55e0162d02378d316a1b3be3742187f7b5058738268ebfa4d6b9f6a9d9dd06a3cd87c94584d1ccd3315a7a23ccb2e50e800fcc1bbb5530bb92cd95e5e25efef8140fb5f854b7282a8197d775249ec8bd352d11973a451b551b0be2d0fbc285627360bba80feb80b5a5ba710f7a13156c97146dddd2f157473891647f0e82dc1d52288f38e5fbfb431a26a899237e21ab5e87e053b951c43375553f492957c38d6381e6aac144d79d77f86b4eeb9175cc8f26865255b8d6cf74956eca067bfab61dbf15948ec887b3dd65f8d73b949093ce1a9872b3177f80d8fffdb608dd57834f82550151ceee0546b1a7a67adeb12d7c93b1d34f3a3c9b3bef69ddfd5173a696dc14476f8047e2056d33f86e83fb8244b6728ba1a7fe510f465e301a790dd3e8d763ab4ca11842bc440f54c39c154e909588a6004813c00ef18619b8dff60a4109e683d99fb2d687a32bc75cd74d801fddb096ed64877abaf5c9a472ac6b8eeb3ec1d8cb9e0581f810da806d4e183fce509303ccabb6387b3e2941e52b6dad9f396ff1d4e9ac7808c7635053999bd6d899aaa207a7532043d8a499ee68f1e986a65fb362e0ac80b29c043f267f6aaaaea760526bd7e2a0fe2741e07c826b625daee96a41df9beb4e5cc63e2a1f90e40596b99f234ea9ba9f0307c1625cf155d5574fd48df3eab")
	})
	t.Run("ValidatorAtIndexReadOnly", func(t *testing.T) {
		readOnlyState, err := dState.ValidatorAtIndexReadOnly(1)
		require.NoError(t, err)
		readOnlyBytes := readOnlyState.PublicKey()
		require.NotEmpty(t, readOnlyBytes)
		require.Equal(t, hexutil.Encode(readOnlyBytes[:]), hexutil.Encode(byteValue[:]))
	})
}
